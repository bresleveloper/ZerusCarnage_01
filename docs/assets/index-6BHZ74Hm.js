(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const r of s.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&n(r)}).observe(document,{childList:!0,subtree:!0});function t(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerPolicy&&(s.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?s.credentials="include":i.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(i){if(i.ep)return;i.ep=!0;const s=t(i);fetch(i.href,s)}})();/**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const tl="134",uc=0,Ca=1,dc=2,nl=1,pc=2,Li=3,Bi=0,je=1,ni=2,il=1,sn=0,Di=1,Aa=2,La=3,Ra=4,fc=5,Zn=100,mc=101,gc=102,Pa=103,Da=104,yc=200,vc=201,xc=202,_c=203,sl=204,rl=205,Mc=206,bc=207,wc=208,Sc=209,Ec=210,Tc=0,Cc=1,Ac=2,Hr=3,Lc=4,Rc=5,Pc=6,Dc=7,Hs=0,Ic=1,Uc=2,En=0,Nc=1,Fc=2,kc=3,Bc=4,zc=5,al=300,qi=301,Xi=302,Vr=303,Wr=304,Vs=306,ta=307,qr=1e3,xt=1001,Xr=1002,et=1003,Ia=1004,Ua=1005,Mt=1006,Gc=1007,Ws=1008,ln=1009,Oc=1010,Hc=1011,Is=1012,Vc=1013,Ds=1014,tn=1015,Qn=1016,Wc=1017,qc=1018,Xc=1019,Ii=1020,Yc=1021,Kn=1022,ut=1023,Zc=1024,$c=1025,jc=ut,ei=1026,zi=1027,Jc=1028,Qc=1029,Kc=1030,eh=1031,th=1032,nh=1033,Na=33776,Fa=33777,ka=33778,Ba=33779,za=35840,Ga=35841,Oa=35842,Ha=35843,ih=36196,Va=37492,Wa=37496,sh=37808,rh=37809,ah=37810,oh=37811,lh=37812,ch=37813,hh=37814,uh=37815,dh=37816,ph=37817,fh=37818,mh=37819,gh=37820,yh=37821,vh=36492,xh=37840,_h=37841,Mh=37842,bh=37843,wh=37844,Sh=37845,Eh=37846,Th=37847,Ch=37848,Ah=37849,Lh=37850,Rh=37851,Ph=37852,Dh=37853,Ih=2200,Uh=2201,Nh=2202,Us=2300,Ns=2301,nr=2302,$n=2400,jn=2401,Fs=2402,na=2500,ol=2501,Fh=0,lt=3e3,Cn=3001,ia=3007,sa=3002,kh=3003,ll=3004,cl=3005,hl=3006,Bh=3200,zh=3201,ai=0,Gh=1,ir=7680,Oh=519,Gi=35044,ks=35048,qa="300 es";class An{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const i=this._listeners[e];if(i!==void 0){const s=i.indexOf(t);s!==-1&&i.splice(s,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let s=0,r=i.length;s<r;s++)i[s].call(this,e);e.target=null}}}const sr=Math.PI/180,Yr=180/Math.PI,tt=[];for(let a=0;a<256;a++)tt[a]=(a<16?"0":"")+a.toString(16);const Hh=typeof crypto<"u"&&"randomUUID"in crypto;function Dt(){if(Hh)return crypto.randomUUID().toUpperCase();const a=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(tt[a&255]+tt[a>>8&255]+tt[a>>16&255]+tt[a>>24&255]+"-"+tt[e&255]+tt[e>>8&255]+"-"+tt[e>>16&15|64]+tt[e>>24&255]+"-"+tt[t&63|128]+tt[t>>8&255]+"-"+tt[t>>16&255]+tt[t>>24&255]+tt[n&255]+tt[n>>8&255]+tt[n>>16&255]+tt[n>>24&255]).toUpperCase()}function vt(a,e,t){return Math.max(e,Math.min(t,a))}function Vh(a,e){return(a%e+e)%e}function rr(a,e,t){return(1-t)*a+t*e}function Xa(a){return(a&a-1)===0&&a!==0}function Wh(a){return Math.pow(2,Math.floor(Math.log(a)/Math.LN2))}class Y{constructor(e=0,t=0){this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),s=this.x-e.x,r=this.y-e.y;return this.x=s*n-r*i+e.x,this.y=s*i+r*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}Y.prototype.isVector2=!0;class nt{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,i,s,r,o,l,c){const h=this.elements;return h[0]=e,h[1]=i,h[2]=o,h[3]=t,h[4]=s,h[5]=l,h[6]=n,h[7]=r,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,r=n[0],o=n[3],l=n[6],c=n[1],h=n[4],u=n[7],d=n[2],p=n[5],g=n[8],y=i[0],v=i[3],f=i[6],m=i[1],E=i[4],_=i[7],T=i[2],C=i[5],x=i[8];return s[0]=r*y+o*m+l*T,s[3]=r*v+o*E+l*C,s[6]=r*f+o*_+l*x,s[1]=c*y+h*m+u*T,s[4]=c*v+h*E+u*C,s[7]=c*f+h*_+u*x,s[2]=d*y+p*m+g*T,s[5]=d*v+p*E+g*C,s[8]=d*f+p*_+g*x,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],r=e[4],o=e[5],l=e[6],c=e[7],h=e[8];return t*r*h-t*o*c-n*s*h+n*o*l+i*s*c-i*r*l}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],r=e[4],o=e[5],l=e[6],c=e[7],h=e[8],u=h*r-o*c,d=o*l-h*s,p=c*s-r*l,g=t*u+n*d+i*p;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const y=1/g;return e[0]=u*y,e[1]=(i*c-h*n)*y,e[2]=(o*n-i*r)*y,e[3]=d*y,e[4]=(h*t-i*l)*y,e[5]=(i*s-o*t)*y,e[6]=p*y,e[7]=(n*l-c*t)*y,e[8]=(r*t-n*s)*y,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,s,r,o){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*r+c*o)+r+e,-i*c,i*l,-i*(-c*r+l*o)+o+t,0,0,1),this}scale(e,t){const n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this}rotate(e){const t=Math.cos(e),n=Math.sin(e),i=this.elements,s=i[0],r=i[3],o=i[6],l=i[1],c=i[4],h=i[7];return i[0]=t*s+n*l,i[3]=t*r+n*c,i[6]=t*o+n*h,i[1]=-n*s+t*l,i[4]=-n*r+t*c,i[7]=-n*o+t*h,this}translate(e,t){const n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}nt.prototype.isMatrix3=!0;function ul(a){if(a.length===0)return-1/0;let e=a[0];for(let t=1,n=a.length;t<n;++t)a[t]>e&&(e=a[t]);return e}function qs(a){return document.createElementNS("http://www.w3.org/1999/xhtml",a)}function Ya(a,e=0){let t=3735928559^e,n=1103547991^e;for(let i=0,s;i<a.length;i++)s=a.charCodeAt(i),t=Math.imul(t^s,2654435761),n=Math.imul(n^s,1597334677);return t=Math.imul(t^t>>>16,2246822507)^Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507)^Math.imul(t^t>>>13,3266489909),4294967296*(2097151&n)+(t>>>0)}let Ln;class oi{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{Ln===void 0&&(Ln=qs("canvas")),Ln.width=e.width,Ln.height=e.height;const n=Ln.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=Ln}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}}let qh=0;class st extends An{constructor(e=st.DEFAULT_IMAGE,t=st.DEFAULT_MAPPING,n=xt,i=xt,s=Mt,r=Ws,o=ut,l=ln,c=1,h=lt){super(),Object.defineProperty(this,"id",{value:qh++}),this.uuid=Dt(),this.name="",this.image=e,this.mipmaps=[],this.mapping=t,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=r,this.anisotropy=c,this.format=o,this.internalFormat=null,this.type=l,this.offset=new Y(0,0),this.repeat=new Y(1,1),this.center=new Y(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new nt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this.userData=JSON.parse(JSON.stringify(e.userData)),this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==void 0){const i=this.image;if(i.uuid===void 0&&(i.uuid=Dt()),!t&&e.images[i.uuid]===void 0){let s;if(Array.isArray(i)){s=[];for(let r=0,o=i.length;r<o;r++)i[r].isDataTexture?s.push(ar(i[r].image)):s.push(ar(i[r]))}else s=ar(i);e.images[i.uuid]={uuid:i.uuid,url:s}}n.image=i.uuid}return JSON.stringify(this.userData)!=="{}"&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==al)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case qr:e.x=e.x-Math.floor(e.x);break;case xt:e.x=e.x<0?0:1;break;case Xr:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case qr:e.y=e.y-Math.floor(e.y);break;case xt:e.y=e.y<0?0:1;break;case Xr:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&this.version++}}st.DEFAULT_IMAGE=void 0;st.DEFAULT_MAPPING=al;st.prototype.isTexture=!0;function ar(a){return typeof HTMLImageElement<"u"&&a instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&a instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&a instanceof ImageBitmap?oi.getDataURL(a):a.data?{data:Array.prototype.slice.call(a.data),width:a.width,height:a.height,type:a.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}class ze{constructor(e=0,t=0,n=0,i=1){this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=this.w,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*i+r[12]*s,this.y=r[1]*t+r[5]*n+r[9]*i+r[13]*s,this.z=r[2]*t+r[6]*n+r[10]*i+r[14]*s,this.w=r[3]*t+r[7]*n+r[11]*i+r[15]*s,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,s;const l=e.elements,c=l[0],h=l[4],u=l[8],d=l[1],p=l[5],g=l[9],y=l[2],v=l[6],f=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-y)<.01&&Math.abs(g-v)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+y)<.1&&Math.abs(g+v)<.1&&Math.abs(c+p+f-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const E=(c+1)/2,_=(p+1)/2,T=(f+1)/2,C=(h+d)/4,x=(u+y)/4,R=(g+v)/4;return E>_&&E>T?E<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(E),i=C/n,s=x/n):_>T?_<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(_),n=C/i,s=R/i):T<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(T),n=x/s,i=R/s),this.set(n,i,s,t),this}let m=Math.sqrt((v-g)*(v-g)+(u-y)*(u-y)+(d-h)*(d-h));return Math.abs(m)<.001&&(m=1),this.x=(v-g)/m,this.y=(u-y)/m,this.z=(d-h)/m,this.w=Math.acos((c+p+f-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}ze.prototype.isVector4=!0;class It extends An{constructor(e,t,n={}){super(),this.width=e,this.height=t,this.depth=1,this.scissor=new ze(0,0,e,t),this.scissorTest=!1,this.viewport=new ze(0,0,e,t),this.texture=new st(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.image={width:e,height:t,depth:1},this.texture.generateMipmaps=n.generateMipmaps!==void 0?n.generateMipmaps:!1,this.texture.internalFormat=n.internalFormat!==void 0?n.internalFormat:null,this.texture.minFilter=n.minFilter!==void 0?n.minFilter:Mt,this.depthBuffer=n.depthBuffer!==void 0?n.depthBuffer:!0,this.stencilBuffer=n.stencilBuffer!==void 0?n.stencilBuffer:!1,this.depthTexture=n.depthTexture!==void 0?n.depthTexture:null}setTexture(e){e.image={width:this.width,height:this.height,depth:this.depth},this.texture=e}setSize(e,t,n=1){(this.width!==e||this.height!==t||this.depth!==n)&&(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.image={...this.texture.image},this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}It.prototype.isWebGLRenderTarget=!0;class Xh extends It{constructor(e,t,n){super(e,t);const i=this.texture;this.texture=[];for(let s=0;s<n;s++)this.texture[s]=i.clone()}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let i=0,s=this.texture.length;i<s;i++)this.texture[i].image.width=e,this.texture[i].image.height=t,this.texture[i].image.depth=n;this.dispose()}return this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t),this}copy(e){this.dispose(),this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this.texture.length=0;for(let t=0,n=e.texture.length;t<n;t++)this.texture[t]=e.texture[t].clone();return this}}Xh.prototype.isWebGLMultipleRenderTargets=!0;class dl extends It{constructor(e,t,n){super(e,t,n),this.samples=4}copy(e){return super.copy.call(this,e),this.samples=e.samples,this}}dl.prototype.isWebGLMultisampleRenderTarget=!0;class dt{constructor(e=0,t=0,n=0,i=1){this._x=e,this._y=t,this._z=n,this._w=i}static slerp(e,t,n,i){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),n.slerpQuaternions(e,t,i)}static slerpFlat(e,t,n,i,s,r,o){let l=n[i+0],c=n[i+1],h=n[i+2],u=n[i+3];const d=s[r+0],p=s[r+1],g=s[r+2],y=s[r+3];if(o===0){e[t+0]=l,e[t+1]=c,e[t+2]=h,e[t+3]=u;return}if(o===1){e[t+0]=d,e[t+1]=p,e[t+2]=g,e[t+3]=y;return}if(u!==y||l!==d||c!==p||h!==g){let v=1-o;const f=l*d+c*p+h*g+u*y,m=f>=0?1:-1,E=1-f*f;if(E>Number.EPSILON){const T=Math.sqrt(E),C=Math.atan2(T,f*m);v=Math.sin(v*C)/T,o=Math.sin(o*C)/T}const _=o*m;if(l=l*v+d*_,c=c*v+p*_,h=h*v+g*_,u=u*v+y*_,v===1-o){const T=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=T,c*=T,h*=T,u*=T}}e[t]=l,e[t+1]=c,e[t+2]=h,e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,i,s,r){const o=n[i],l=n[i+1],c=n[i+2],h=n[i+3],u=s[r],d=s[r+1],p=s[r+2],g=s[r+3];return e[t]=o*g+h*u+l*p-c*d,e[t+1]=l*g+h*d+c*u-o*p,e[t+2]=c*g+h*p+o*d-l*u,e[t+3]=h*g-o*u-l*d-c*p,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){if(!(e&&e.isEuler))throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const n=e._x,i=e._y,s=e._z,r=e._order,o=Math.cos,l=Math.sin,c=o(n/2),h=o(i/2),u=o(s/2),d=l(n/2),p=l(i/2),g=l(s/2);switch(r){case"XYZ":this._x=d*h*u+c*p*g,this._y=c*p*u-d*h*g,this._z=c*h*g+d*p*u,this._w=c*h*u-d*p*g;break;case"YXZ":this._x=d*h*u+c*p*g,this._y=c*p*u-d*h*g,this._z=c*h*g-d*p*u,this._w=c*h*u+d*p*g;break;case"ZXY":this._x=d*h*u-c*p*g,this._y=c*p*u+d*h*g,this._z=c*h*g+d*p*u,this._w=c*h*u-d*p*g;break;case"ZYX":this._x=d*h*u-c*p*g,this._y=c*p*u+d*h*g,this._z=c*h*g-d*p*u,this._w=c*h*u+d*p*g;break;case"YZX":this._x=d*h*u+c*p*g,this._y=c*p*u+d*h*g,this._z=c*h*g-d*p*u,this._w=c*h*u-d*p*g;break;case"XZY":this._x=d*h*u-c*p*g,this._y=c*p*u-d*h*g,this._z=c*h*g+d*p*u,this._w=c*h*u+d*p*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+r)}return t!==!1&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],s=t[8],r=t[1],o=t[5],l=t[9],c=t[2],h=t[6],u=t[10],d=n+o+u;if(d>0){const p=.5/Math.sqrt(d+1);this._w=.25/p,this._x=(h-l)*p,this._y=(s-c)*p,this._z=(r-i)*p}else if(n>o&&n>u){const p=2*Math.sqrt(1+n-o-u);this._w=(h-l)/p,this._x=.25*p,this._y=(i+r)/p,this._z=(s+c)/p}else if(o>u){const p=2*Math.sqrt(1+o-n-u);this._w=(s-c)/p,this._x=(i+r)/p,this._y=.25*p,this._z=(l+h)/p}else{const p=2*Math.sqrt(1+u-n-o);this._w=(r-i)/p,this._x=(s+c)/p,this._y=(l+h)/p,this._z=.25*p}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(vt(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e,t){return t!==void 0?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,s=e._z,r=e._w,o=t._x,l=t._y,c=t._z,h=t._w;return this._x=n*h+r*o+i*c-s*l,this._y=i*h+r*l+s*o-n*c,this._z=s*h+r*c+n*l-i*o,this._w=r*h-n*o-i*l-s*c,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,s=this._z,r=this._w;let o=r*e._w+n*e._x+i*e._y+s*e._z;if(o<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=r,this._x=n,this._y=i,this._z=s,this;const l=1-o*o;if(l<=Number.EPSILON){const p=1-t;return this._w=p*r+t*this._w,this._x=p*n+t*this._x,this._y=p*i+t*this._y,this._z=p*s+t*this._z,this.normalize(),this._onChangeCallback(),this}const c=Math.sqrt(l),h=Math.atan2(c,o),u=Math.sin((1-t)*h)/c,d=Math.sin(t*h)/c;return this._w=r*u+this._w*d,this._x=n*u+this._x*d,this._y=i*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(e,t,n){this.copy(e).slerp(t,n)}random(){const e=Math.random(),t=Math.sqrt(1-e),n=Math.sqrt(e),i=2*Math.PI*Math.random(),s=2*Math.PI*Math.random();return this.set(t*Math.cos(i),n*Math.sin(s),n*Math.cos(s),t*Math.sin(i))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}}dt.prototype.isQuaternion=!0;class w{constructor(e=0,t=0,n=0){this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e,t){return t!==void 0?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(Za.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(Za.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6]*i,this.y=s[1]*t+s[4]*n+s[7]*i,this.z=s[2]*t+s[5]*n+s[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=e.elements,r=1/(s[3]*t+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*t+s[4]*n+s[8]*i+s[12])*r,this.y=(s[1]*t+s[5]*n+s[9]*i+s[13])*r,this.z=(s[2]*t+s[6]*n+s[10]*i+s[14])*r,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,s=e.x,r=e.y,o=e.z,l=e.w,c=l*t+r*i-o*n,h=l*n+o*t-s*i,u=l*i+s*n-r*t,d=-s*t-r*n-o*i;return this.x=c*l+d*-s+h*-o-u*-r,this.y=h*l+d*-r+u*-s-c*-o,this.z=u*l+d*-o+c*-r-h*-s,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[4]*n+s[8]*i,this.y=s[1]*t+s[5]*n+s[9]*i,this.z=s[2]*t+s[6]*n+s[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e,t){return t!==void 0?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,s=e.z,r=t.x,o=t.y,l=t.z;return this.x=i*l-s*o,this.y=s*r-n*l,this.z=n*o-i*r,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return or.copy(this).projectOnVector(e),this.sub(or)}reflect(e){return this.sub(or.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(vt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,n=Math.sqrt(1-e**2);return this.x=n*Math.cos(t),this.y=n*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}w.prototype.isVector3=!0;const or=new w,Za=new dt;class Lt{constructor(e=new w(1/0,1/0,1/0),t=new w(-1/0,-1/0,-1/0)){this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){let t=1/0,n=1/0,i=1/0,s=-1/0,r=-1/0,o=-1/0;for(let l=0,c=e.length;l<c;l+=3){const h=e[l],u=e[l+1],d=e[l+2];h<t&&(t=h),u<n&&(n=u),d<i&&(i=d),h>s&&(s=h),u>r&&(r=u),d>o&&(o=d)}return this.min.set(t,n,i),this.max.set(s,r,o),this}setFromBufferAttribute(e){let t=1/0,n=1/0,i=1/0,s=-1/0,r=-1/0,o=-1/0;for(let l=0,c=e.count;l<c;l++){const h=e.getX(l),u=e.getY(l),d=e.getZ(l);h<t&&(t=h),u<n&&(n=u),d<i&&(i=d),h>s&&(s=h),u>r&&(r=u),d>o&&(o=d)}return this.min.set(t,n,i),this.max.set(s,r,o),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=yi.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e){return this.makeEmpty(),this.expandByObject(e)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e){e.updateWorldMatrix(!1,!1);const t=e.geometry;t!==void 0&&(t.boundingBox===null&&t.computeBoundingBox(),lr.copy(t.boundingBox),lr.applyMatrix4(e.matrixWorld),this.union(lr));const n=e.children;for(let i=0,s=n.length;i<s;i++)this.expandByObject(n[i]);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,yi),yi.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(vi),es.subVectors(this.max,vi),Rn.subVectors(e.a,vi),Pn.subVectors(e.b,vi),Dn.subVectors(e.c,vi),Xt.subVectors(Pn,Rn),Yt.subVectors(Dn,Pn),xn.subVectors(Rn,Dn);let t=[0,-Xt.z,Xt.y,0,-Yt.z,Yt.y,0,-xn.z,xn.y,Xt.z,0,-Xt.x,Yt.z,0,-Yt.x,xn.z,0,-xn.x,-Xt.y,Xt.x,0,-Yt.y,Yt.x,0,-xn.y,xn.x,0];return!cr(t,Rn,Pn,Dn,es)||(t=[1,0,0,0,1,0,0,0,1],!cr(t,Rn,Pn,Dn,es))?!1:(ts.crossVectors(Xt,Yt),t=[ts.x,ts.y,ts.z],cr(t,Rn,Pn,Dn,es))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return yi.copy(e).clamp(this.min,this.max).sub(e).length()}getBoundingSphere(e){return this.getCenter(e.center),e.radius=this.getSize(yi).length()*.5,e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(kt[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),kt[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),kt[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),kt[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),kt[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),kt[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),kt[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),kt[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(kt),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}Lt.prototype.isBox3=!0;const kt=[new w,new w,new w,new w,new w,new w,new w,new w],yi=new w,lr=new Lt,Rn=new w,Pn=new w,Dn=new w,Xt=new w,Yt=new w,xn=new w,vi=new w,es=new w,ts=new w,_n=new w;function cr(a,e,t,n,i){for(let s=0,r=a.length-3;s<=r;s+=3){_n.fromArray(a,s);const o=i.x*Math.abs(_n.x)+i.y*Math.abs(_n.y)+i.z*Math.abs(_n.z),l=e.dot(_n),c=t.dot(_n),h=n.dot(_n);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>o)return!1}return!0}const Yh=new Lt,$a=new w,hr=new w,ur=new w;class li{constructor(e=new w,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):Yh.setFromPoints(e).getCenter(n);let i=0;for(let s=0,r=e.length;s<r;s++)i=Math.max(i,n.distanceToSquared(e[s]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){ur.subVectors(e,this.center);const t=ur.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),i=(n-this.radius)*.5;this.center.add(ur.multiplyScalar(i/n)),this.radius+=i}return this}union(e){return hr.subVectors(e.center,this.center).normalize().multiplyScalar(e.radius),this.expandByPoint($a.copy(e.center).add(hr)),this.expandByPoint($a.copy(e.center).sub(hr)),this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const Bt=new w,dr=new w,ns=new w,Zt=new w,pr=new w,is=new w,fr=new w;class ci{constructor(e=new w,t=new w(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Bt)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=Bt.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(Bt.copy(this.direction).multiplyScalar(t).add(this.origin),Bt.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){dr.copy(e).add(t).multiplyScalar(.5),ns.copy(t).sub(e).normalize(),Zt.copy(this.origin).sub(dr);const s=e.distanceTo(t)*.5,r=-this.direction.dot(ns),o=Zt.dot(this.direction),l=-Zt.dot(ns),c=Zt.lengthSq(),h=Math.abs(1-r*r);let u,d,p,g;if(h>0)if(u=r*l-o,d=r*o-l,g=s*h,u>=0)if(d>=-g)if(d<=g){const y=1/h;u*=y,d*=y,p=u*(u+r*d+2*o)+d*(r*u+d+2*l)+c}else d=s,u=Math.max(0,-(r*d+o)),p=-u*u+d*(d+2*l)+c;else d=-s,u=Math.max(0,-(r*d+o)),p=-u*u+d*(d+2*l)+c;else d<=-g?(u=Math.max(0,-(-r*s+o)),d=u>0?-s:Math.min(Math.max(-s,-l),s),p=-u*u+d*(d+2*l)+c):d<=g?(u=0,d=Math.min(Math.max(-s,-l),s),p=d*(d+2*l)+c):(u=Math.max(0,-(r*s+o)),d=u>0?s:Math.min(Math.max(-s,-l),s),p=-u*u+d*(d+2*l)+c);else d=r>0?-s:s,u=Math.max(0,-(r*d+o)),p=-u*u+d*(d+2*l)+c;return n&&n.copy(this.direction).multiplyScalar(u).add(this.origin),i&&i.copy(ns).multiplyScalar(d).add(dr),p}intersectSphere(e,t){Bt.subVectors(e.center,this.origin);const n=Bt.dot(this.direction),i=Bt.dot(Bt)-n*n,s=e.radius*e.radius;if(i>s)return null;const r=Math.sqrt(s-i),o=n-r,l=n+r;return o<0&&l<0?null:o<0?this.at(l,t):this.at(o,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,s,r,o,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,d=this.origin;return c>=0?(n=(e.min.x-d.x)*c,i=(e.max.x-d.x)*c):(n=(e.max.x-d.x)*c,i=(e.min.x-d.x)*c),h>=0?(s=(e.min.y-d.y)*h,r=(e.max.y-d.y)*h):(s=(e.max.y-d.y)*h,r=(e.min.y-d.y)*h),n>r||s>i||((s>n||n!==n)&&(n=s),(r<i||i!==i)&&(i=r),u>=0?(o=(e.min.z-d.z)*u,l=(e.max.z-d.z)*u):(o=(e.max.z-d.z)*u,l=(e.min.z-d.z)*u),n>l||o>i)||((o>n||n!==n)&&(n=o),(l<i||i!==i)&&(i=l),i<0)?null:this.at(n>=0?n:i,t)}intersectsBox(e){return this.intersectBox(e,Bt)!==null}intersectTriangle(e,t,n,i,s){pr.subVectors(t,e),is.subVectors(n,e),fr.crossVectors(pr,is);let r=this.direction.dot(fr),o;if(r>0){if(i)return null;o=1}else if(r<0)o=-1,r=-r;else return null;Zt.subVectors(this.origin,e);const l=o*this.direction.dot(is.crossVectors(Zt,is));if(l<0)return null;const c=o*this.direction.dot(pr.cross(Zt));if(c<0||l+c>r)return null;const h=-o*Zt.dot(fr);return h<0?null:this.at(h/r,s)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class xe{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,i,s,r,o,l,c,h,u,d,p,g,y,v){const f=this.elements;return f[0]=e,f[4]=t,f[8]=n,f[12]=i,f[1]=s,f[5]=r,f[9]=o,f[13]=l,f[2]=c,f[6]=h,f[10]=u,f[14]=d,f[3]=p,f[7]=g,f[11]=y,f[15]=v,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new xe().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/In.setFromMatrixColumn(e,0).length(),s=1/In.setFromMatrixColumn(e,1).length(),r=1/In.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*s,t[5]=n[5]*s,t[6]=n[6]*s,t[7]=0,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const t=this.elements,n=e.x,i=e.y,s=e.z,r=Math.cos(n),o=Math.sin(n),l=Math.cos(i),c=Math.sin(i),h=Math.cos(s),u=Math.sin(s);if(e.order==="XYZ"){const d=r*h,p=r*u,g=o*h,y=o*u;t[0]=l*h,t[4]=-l*u,t[8]=c,t[1]=p+g*c,t[5]=d-y*c,t[9]=-o*l,t[2]=y-d*c,t[6]=g+p*c,t[10]=r*l}else if(e.order==="YXZ"){const d=l*h,p=l*u,g=c*h,y=c*u;t[0]=d+y*o,t[4]=g*o-p,t[8]=r*c,t[1]=r*u,t[5]=r*h,t[9]=-o,t[2]=p*o-g,t[6]=y+d*o,t[10]=r*l}else if(e.order==="ZXY"){const d=l*h,p=l*u,g=c*h,y=c*u;t[0]=d-y*o,t[4]=-r*u,t[8]=g+p*o,t[1]=p+g*o,t[5]=r*h,t[9]=y-d*o,t[2]=-r*c,t[6]=o,t[10]=r*l}else if(e.order==="ZYX"){const d=r*h,p=r*u,g=o*h,y=o*u;t[0]=l*h,t[4]=g*c-p,t[8]=d*c+y,t[1]=l*u,t[5]=y*c+d,t[9]=p*c-g,t[2]=-c,t[6]=o*l,t[10]=r*l}else if(e.order==="YZX"){const d=r*l,p=r*c,g=o*l,y=o*c;t[0]=l*h,t[4]=y-d*u,t[8]=g*u+p,t[1]=u,t[5]=r*h,t[9]=-o*h,t[2]=-c*h,t[6]=p*u+g,t[10]=d-y*u}else if(e.order==="XZY"){const d=r*l,p=r*c,g=o*l,y=o*c;t[0]=l*h,t[4]=-u,t[8]=c*h,t[1]=d*u+y,t[5]=r*h,t[9]=p*u-g,t[2]=g*u-p,t[6]=o*h,t[10]=y*u+d}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(Zh,e,$h)}lookAt(e,t,n){const i=this.elements;return gt.subVectors(e,t),gt.lengthSq()===0&&(gt.z=1),gt.normalize(),$t.crossVectors(n,gt),$t.lengthSq()===0&&(Math.abs(n.z)===1?gt.x+=1e-4:gt.z+=1e-4,gt.normalize(),$t.crossVectors(n,gt)),$t.normalize(),ss.crossVectors(gt,$t),i[0]=$t.x,i[4]=ss.x,i[8]=gt.x,i[1]=$t.y,i[5]=ss.y,i[9]=gt.y,i[2]=$t.z,i[6]=ss.z,i[10]=gt.z,this}multiply(e,t){return t!==void 0?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,r=n[0],o=n[4],l=n[8],c=n[12],h=n[1],u=n[5],d=n[9],p=n[13],g=n[2],y=n[6],v=n[10],f=n[14],m=n[3],E=n[7],_=n[11],T=n[15],C=i[0],x=i[4],R=i[8],W=i[12],N=i[1],A=i[5],$=i[9],I=i[13],D=i[2],k=i[6],U=i[10],B=i[14],K=i[3],le=i[7],ye=i[11],se=i[15];return s[0]=r*C+o*N+l*D+c*K,s[4]=r*x+o*A+l*k+c*le,s[8]=r*R+o*$+l*U+c*ye,s[12]=r*W+o*I+l*B+c*se,s[1]=h*C+u*N+d*D+p*K,s[5]=h*x+u*A+d*k+p*le,s[9]=h*R+u*$+d*U+p*ye,s[13]=h*W+u*I+d*B+p*se,s[2]=g*C+y*N+v*D+f*K,s[6]=g*x+y*A+v*k+f*le,s[10]=g*R+y*$+v*U+f*ye,s[14]=g*W+y*I+v*B+f*se,s[3]=m*C+E*N+_*D+T*K,s[7]=m*x+E*A+_*k+T*le,s[11]=m*R+E*$+_*U+T*ye,s[15]=m*W+E*I+_*B+T*se,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],s=e[12],r=e[1],o=e[5],l=e[9],c=e[13],h=e[2],u=e[6],d=e[10],p=e[14],g=e[3],y=e[7],v=e[11],f=e[15];return g*(+s*l*u-i*c*u-s*o*d+n*c*d+i*o*p-n*l*p)+y*(+t*l*p-t*c*d+s*r*d-i*r*p+i*c*h-s*l*h)+v*(+t*c*u-t*o*p-s*r*u+n*r*p+s*o*h-n*c*h)+f*(-i*o*h-t*l*u+t*o*d+i*r*u-n*r*d+n*l*h)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],r=e[4],o=e[5],l=e[6],c=e[7],h=e[8],u=e[9],d=e[10],p=e[11],g=e[12],y=e[13],v=e[14],f=e[15],m=u*v*c-y*d*c+y*l*p-o*v*p-u*l*f+o*d*f,E=g*d*c-h*v*c-g*l*p+r*v*p+h*l*f-r*d*f,_=h*y*c-g*u*c+g*o*p-r*y*p-h*o*f+r*u*f,T=g*u*l-h*y*l-g*o*d+r*y*d+h*o*v-r*u*v,C=t*m+n*E+i*_+s*T;if(C===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const x=1/C;return e[0]=m*x,e[1]=(y*d*s-u*v*s-y*i*p+n*v*p+u*i*f-n*d*f)*x,e[2]=(o*v*s-y*l*s+y*i*c-n*v*c-o*i*f+n*l*f)*x,e[3]=(u*l*s-o*d*s-u*i*c+n*d*c+o*i*p-n*l*p)*x,e[4]=E*x,e[5]=(h*v*s-g*d*s+g*i*p-t*v*p-h*i*f+t*d*f)*x,e[6]=(g*l*s-r*v*s-g*i*c+t*v*c+r*i*f-t*l*f)*x,e[7]=(r*d*s-h*l*s+h*i*c-t*d*c-r*i*p+t*l*p)*x,e[8]=_*x,e[9]=(g*u*s-h*y*s-g*n*p+t*y*p+h*n*f-t*u*f)*x,e[10]=(r*y*s-g*o*s+g*n*c-t*y*c-r*n*f+t*o*f)*x,e[11]=(h*o*s-r*u*s-h*n*c+t*u*c+r*n*p-t*o*p)*x,e[12]=T*x,e[13]=(h*y*i-g*u*i+g*n*d-t*y*d-h*n*v+t*u*v)*x,e[14]=(g*o*i-r*y*i-g*n*l+t*y*l+r*n*v-t*o*v)*x,e[15]=(r*u*i-h*o*i+h*n*l-t*u*l-r*n*d+t*o*d)*x,this}scale(e){const t=this.elements,n=e.x,i=e.y,s=e.z;return t[0]*=n,t[4]*=i,t[8]*=s,t[1]*=n,t[5]*=i,t[9]*=s,t[2]*=n,t[6]*=i,t[10]*=s,t[3]*=n,t[7]*=i,t[11]*=s,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),s=1-n,r=e.x,o=e.y,l=e.z,c=s*r,h=s*o;return this.set(c*r+n,c*o-i*l,c*l+i*o,0,c*o+i*l,h*o+n,h*l-i*r,0,c*l-i*o,h*l+i*r,s*l*l+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,s,r){return this.set(1,n,s,0,e,1,r,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,s=t._x,r=t._y,o=t._z,l=t._w,c=s+s,h=r+r,u=o+o,d=s*c,p=s*h,g=s*u,y=r*h,v=r*u,f=o*u,m=l*c,E=l*h,_=l*u,T=n.x,C=n.y,x=n.z;return i[0]=(1-(y+f))*T,i[1]=(p+_)*T,i[2]=(g-E)*T,i[3]=0,i[4]=(p-_)*C,i[5]=(1-(d+f))*C,i[6]=(v+m)*C,i[7]=0,i[8]=(g+E)*x,i[9]=(v-m)*x,i[10]=(1-(d+y))*x,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let s=In.set(i[0],i[1],i[2]).length();const r=In.set(i[4],i[5],i[6]).length(),o=In.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),e.x=i[12],e.y=i[13],e.z=i[14],Tt.copy(this);const c=1/s,h=1/r,u=1/o;return Tt.elements[0]*=c,Tt.elements[1]*=c,Tt.elements[2]*=c,Tt.elements[4]*=h,Tt.elements[5]*=h,Tt.elements[6]*=h,Tt.elements[8]*=u,Tt.elements[9]*=u,Tt.elements[10]*=u,t.setFromRotationMatrix(Tt),n.x=s,n.y=r,n.z=o,this}makePerspective(e,t,n,i,s,r){r===void 0&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const o=this.elements,l=2*s/(t-e),c=2*s/(n-i),h=(t+e)/(t-e),u=(n+i)/(n-i),d=-(r+s)/(r-s),p=-2*r*s/(r-s);return o[0]=l,o[4]=0,o[8]=h,o[12]=0,o[1]=0,o[5]=c,o[9]=u,o[13]=0,o[2]=0,o[6]=0,o[10]=d,o[14]=p,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(e,t,n,i,s,r){const o=this.elements,l=1/(t-e),c=1/(n-i),h=1/(r-s),u=(t+e)*l,d=(n+i)*c,p=(r+s)*h;return o[0]=2*l,o[4]=0,o[8]=0,o[12]=-u,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-d,o[2]=0,o[6]=0,o[10]=-2*h,o[14]=-p,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}xe.prototype.isMatrix4=!0;const In=new w,Tt=new xe,Zh=new w(0,0,0),$h=new w(1,1,1),$t=new w,ss=new w,gt=new w,ja=new xe,Ja=new dt;class hi{constructor(e=0,t=0,n=0,i=hi.DefaultOrder){this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,s=i[0],r=i[4],o=i[8],l=i[1],c=i[5],h=i[9],u=i[2],d=i[6],p=i[10];switch(t){case"XYZ":this._y=Math.asin(vt(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-h,p),this._z=Math.atan2(-r,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-vt(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(o,p),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(vt(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,p),this._z=Math.atan2(-r,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-vt(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,p),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-r,c));break;case"YZX":this._z=Math.asin(vt(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(o,p));break;case"XZY":this._z=Math.asin(-vt(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(o,s)):(this._x=Math.atan2(-h,p),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return ja.makeRotationFromQuaternion(e),this.setFromRotationMatrix(ja,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return Ja.setFromEuler(this),this.setFromQuaternion(Ja,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}toVector3(e){return e?e.set(this._x,this._y,this._z):new w(this._x,this._y,this._z)}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}}hi.prototype.isEuler=!0;hi.DefaultOrder="XYZ";hi.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class jh{constructor(){this.mask=1}set(e){this.mask=1<<e|0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}}let Jh=0;const Qa=new w,Un=new dt,zt=new xe,rs=new w,xi=new w,Qh=new w,Kh=new dt,Ka=new w(1,0,0),eo=new w(0,1,0),to=new w(0,0,1),eu={type:"added"},no={type:"removed"};class Ne extends An{constructor(){super(),Object.defineProperty(this,"id",{value:Jh++}),this.uuid=Dt(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Ne.DefaultUp.clone();const e=new w,t=new hi,n=new dt,i=new w(1,1,1);function s(){n.setFromEuler(t,!1)}function r(){t.setFromQuaternion(n,void 0,!1)}t._onChange(s),n._onChange(r),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new xe},normalMatrix:{value:new nt}}),this.matrix=new xe,this.matrixWorld=new xe,this.matrixAutoUpdate=Ne.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new jh,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Un.setFromAxisAngle(e,t),this.quaternion.multiply(Un),this}rotateOnWorldAxis(e,t){return Un.setFromAxisAngle(e,t),this.quaternion.premultiply(Un),this}rotateX(e){return this.rotateOnAxis(Ka,e)}rotateY(e){return this.rotateOnAxis(eo,e)}rotateZ(e){return this.rotateOnAxis(to,e)}translateOnAxis(e,t){return Qa.copy(e).applyQuaternion(this.quaternion),this.position.add(Qa.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(Ka,e)}translateY(e){return this.translateOnAxis(eo,e)}translateZ(e){return this.translateOnAxis(to,e)}localToWorld(e){return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return e.applyMatrix4(zt.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?rs.copy(e):rs.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),xi.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?zt.lookAt(xi,rs,this.up):zt.lookAt(rs,xi,this.up),this.quaternion.setFromRotationMatrix(zt),i&&(zt.extractRotation(i.matrixWorld),Un.setFromRotationMatrix(zt),this.quaternion.premultiply(Un.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(eu)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(no)),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){for(let e=0;e<this.children.length;e++){const t=this.children[e];t.parent=null,t.dispatchEvent(no)}return this.children.length=0,this}attach(e){return this.updateWorldMatrix(!0,!1),zt.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),zt.multiply(e.parent.matrixWorld)),e.applyMatrix4(zt),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const r=this.children[n].getObjectByProperty(e,t);if(r!==void 0)return r}}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(xi,e,Qh),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(xi,Kh,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const i=this.children;for(let s=0,r=i.length;s<r;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON()));function s(o,l){return o[l.uuid]===void 0&&(o[l.uuid]=l.toJSON(e)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(e.geometries,this.geometry);const o=this.geometry.parameters;if(o!==void 0&&o.shapes!==void 0){const l=o.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(e.shapes,u)}else s(e.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const o=[];for(let l=0,c=this.material.length;l<c;l++)o.push(s(e.materials,this.material[l]));i.material=o}else i.material=s(e.materials,this.material);if(this.children.length>0){i.children=[];for(let o=0;o<this.children.length;o++)i.children.push(this.children[o].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let o=0;o<this.animations.length;o++){const l=this.animations[o];i.animations.push(s(e.animations,l))}}if(t){const o=r(e.geometries),l=r(e.materials),c=r(e.textures),h=r(e.images),u=r(e.shapes),d=r(e.skeletons),p=r(e.animations);o.length>0&&(n.geometries=o),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),h.length>0&&(n.images=h),u.length>0&&(n.shapes=u),d.length>0&&(n.skeletons=d),p.length>0&&(n.animations=p)}return n.object=i,n;function r(o){const l=[];for(const c in o){const h=o[c];delete h.metadata,l.push(h)}return l}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const i=e.children[n];this.add(i.clone())}return this}}Ne.DefaultUp=new w(0,1,0);Ne.DefaultMatrixAutoUpdate=!0;Ne.prototype.isObject3D=!0;const Ct=new w,Gt=new w,mr=new w,Ot=new w,Nn=new w,Fn=new w,io=new w,gr=new w,yr=new w,vr=new w;class Je{constructor(e=new w,t=new w,n=new w){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),Ct.subVectors(e,t),i.cross(Ct);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(e,t,n,i,s){Ct.subVectors(i,t),Gt.subVectors(n,t),mr.subVectors(e,t);const r=Ct.dot(Ct),o=Ct.dot(Gt),l=Ct.dot(mr),c=Gt.dot(Gt),h=Gt.dot(mr),u=r*c-o*o;if(u===0)return s.set(-2,-1,-1);const d=1/u,p=(c*l-o*h)*d,g=(r*h-o*l)*d;return s.set(1-p-g,g,p)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,Ot),Ot.x>=0&&Ot.y>=0&&Ot.x+Ot.y<=1}static getUV(e,t,n,i,s,r,o,l){return this.getBarycoord(e,t,n,i,Ot),l.set(0,0),l.addScaledVector(s,Ot.x),l.addScaledVector(r,Ot.y),l.addScaledVector(o,Ot.z),l}static isFrontFacing(e,t,n,i){return Ct.subVectors(n,t),Gt.subVectors(e,t),Ct.cross(Gt).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Ct.subVectors(this.c,this.b),Gt.subVectors(this.a,this.b),Ct.cross(Gt).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return Je.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return Je.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,i,s){return Je.getUV(e,this.a,this.b,this.c,t,n,i,s)}containsPoint(e){return Je.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return Je.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,s=this.c;let r,o;Nn.subVectors(i,n),Fn.subVectors(s,n),gr.subVectors(e,n);const l=Nn.dot(gr),c=Fn.dot(gr);if(l<=0&&c<=0)return t.copy(n);yr.subVectors(e,i);const h=Nn.dot(yr),u=Fn.dot(yr);if(h>=0&&u<=h)return t.copy(i);const d=l*u-h*c;if(d<=0&&l>=0&&h<=0)return r=l/(l-h),t.copy(n).addScaledVector(Nn,r);vr.subVectors(e,s);const p=Nn.dot(vr),g=Fn.dot(vr);if(g>=0&&p<=g)return t.copy(s);const y=p*c-l*g;if(y<=0&&c>=0&&g<=0)return o=c/(c-g),t.copy(n).addScaledVector(Fn,o);const v=h*g-p*u;if(v<=0&&u-h>=0&&p-g>=0)return io.subVectors(s,i),o=(u-h)/(u-h+(p-g)),t.copy(i).addScaledVector(io,o);const f=1/(v+y+d);return r=y*f,o=d*f,t.copy(n).addScaledVector(Nn,r).addScaledVector(Fn,o)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let tu=0;class ht extends An{constructor(){super(),Object.defineProperty(this,"id",{value:tu++}),this.uuid=Dt(),this.name="",this.type="Material",this.fog=!0,this.blending=Di,this.side=Bi,this.vertexColors=!1,this.opacity=1,this.format=ut,this.transparent=!1,this.blendSrc=sl,this.blendDst=rl,this.blendEquation=Zn,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=Hr,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Oh,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ir,this.stencilZFail=ir,this.stencilZPass=ir,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}if(t==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===il;continue}const i=this[t];if(i===void 0){console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.");continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Di&&(n.blending=this.blending),this.side!==Bi&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.format!==ut&&(n.format=this.format),this.transparent===!0&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(n.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=this.flatShading),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),JSON.stringify(this.userData)!=="{}"&&(n.userData=this.userData);function i(s){const r=[];for(const o in s){const l=s[o];delete l.metadata,r.push(l)}return r}if(t){const s=i(e.textures),r=i(e.images);s.length>0&&(n.textures=s),r.length>0&&(n.images=r)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.fog=e.fog,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.format=e.format,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const i=t.length;n=new Array(i);for(let s=0;s!==i;++s)n[s]=t[s].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}ht.prototype.isMaterial=!0;const pl={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},At={h:0,s:0,l:0},as={h:0,s:0,l:0};function xr(a,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?a+(e-a)*6*t:t<1/2?e:t<2/3?a+(e-a)*6*(2/3-t):a}function _r(a){return a<.04045?a*.0773993808:Math.pow(a*.9478672986+.0521327014,2.4)}function Mr(a){return a<.0031308?a*12.92:1.055*Math.pow(a,.41666)-.055}class de{constructor(e,t,n){return t===void 0&&n===void 0?this.set(e):this.setRGB(e,t,n)}set(e){return e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,this}setRGB(e,t,n){return this.r=e,this.g=t,this.b=n,this}setHSL(e,t,n){if(e=Vh(e,1),t=vt(t,0,1),n=vt(n,0,1),t===0)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+t):n+t-n*t,s=2*n-i;this.r=xr(s,i,e+1/3),this.g=xr(s,i,e),this.b=xr(s,i,e-1/3)}return this}setStyle(e){function t(i){i!==void 0&&parseFloat(i)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(e)){let i;const s=n[1],r=n[2];switch(s){case"rgb":case"rgba":if(i=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))return this.r=Math.min(255,parseInt(i[1],10))/255,this.g=Math.min(255,parseInt(i[2],10))/255,this.b=Math.min(255,parseInt(i[3],10))/255,t(i[4]),this;if(i=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))return this.r=Math.min(100,parseInt(i[1],10))/100,this.g=Math.min(100,parseInt(i[2],10))/100,this.b=Math.min(100,parseInt(i[3],10))/100,t(i[4]),this;break;case"hsl":case"hsla":if(i=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r)){const o=parseFloat(i[1])/360,l=parseInt(i[2],10)/100,c=parseInt(i[3],10)/100;return t(i[4]),this.setHSL(o,l,c)}break}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(e)){const i=n[1],s=i.length;if(s===3)return this.r=parseInt(i.charAt(0)+i.charAt(0),16)/255,this.g=parseInt(i.charAt(1)+i.charAt(1),16)/255,this.b=parseInt(i.charAt(2)+i.charAt(2),16)/255,this;if(s===6)return this.r=parseInt(i.charAt(0)+i.charAt(1),16)/255,this.g=parseInt(i.charAt(2)+i.charAt(3),16)/255,this.b=parseInt(i.charAt(4)+i.charAt(5),16)/255,this}return e&&e.length>0?this.setColorName(e):this}setColorName(e){const t=pl[e.toLowerCase()];return t!==void 0?this.setHex(t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copyGammaToLinear(e,t=2){return this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this}copyLinearToGamma(e,t=2){const n=t>0?1/t:1;return this.r=Math.pow(e.r,n),this.g=Math.pow(e.g,n),this.b=Math.pow(e.b,n),this}convertGammaToLinear(e){return this.copyGammaToLinear(this,e),this}convertLinearToGamma(e){return this.copyLinearToGamma(this,e),this}copySRGBToLinear(e){return this.r=_r(e.r),this.g=_r(e.g),this.b=_r(e.b),this}copyLinearToSRGB(e){return this.r=Mr(e.r),this.g=Mr(e.g),this.b=Mr(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(e){const t=this.r,n=this.g,i=this.b,s=Math.max(t,n,i),r=Math.min(t,n,i);let o,l;const c=(r+s)/2;if(r===s)o=0,l=0;else{const h=s-r;switch(l=c<=.5?h/(s+r):h/(2-s-r),s){case t:o=(n-i)/h+(n<i?6:0);break;case n:o=(i-t)/h+2;break;case i:o=(t-n)/h+4;break}o/=6}return e.h=o,e.s=l,e.l=c,e}getStyle(){return"rgb("+(this.r*255|0)+","+(this.g*255|0)+","+(this.b*255|0)+")"}offsetHSL(e,t,n){return this.getHSL(At),At.h+=e,At.s+=t,At.l+=n,this.setHSL(At.h,At.s,At.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(At),e.getHSL(as);const n=rr(At.h,as.h,t),i=rr(At.s,as.s,t),s=rr(At.l,as.l,t);return this.setHSL(n,i,s),this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),e.normalized===!0&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}de.NAMES=pl;de.prototype.isColor=!0;de.prototype.r=1;de.prototype.g=1;de.prototype.b=1;class Ae extends ht{constructor(e){super(),this.type="MeshBasicMaterial",this.color=new de(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Hs,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this}}Ae.prototype.isMeshBasicMaterial=!0;const He=new w,os=new Y;class Qe{constructor(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n===!0,this.usage=Gi,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}copyColorsArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let r=e[i];r===void 0&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),r=new de),t[n++]=r.r,t[n++]=r.g,t[n++]=r.b}return this}copyVector2sArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let r=e[i];r===void 0&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),r=new Y),t[n++]=r.x,t[n++]=r.y}return this}copyVector3sArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let r=e[i];r===void 0&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),r=new w),t[n++]=r.x,t[n++]=r.y,t[n++]=r.z}return this}copyVector4sArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let r=e[i];r===void 0&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),r=new ze),t[n++]=r.x,t[n++]=r.y,t[n++]=r.z,t[n++]=r.w}return this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)os.fromBufferAttribute(this,t),os.applyMatrix3(e),this.setXY(t,os.x,os.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)He.fromBufferAttribute(this,t),He.applyMatrix3(e),this.setXYZ(t,He.x,He.y,He.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)He.x=this.getX(t),He.y=this.getY(t),He.z=this.getZ(t),He.applyMatrix4(e),this.setXYZ(t,He.x,He.y,He.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)He.x=this.getX(t),He.y=this.getY(t),He.z=this.getZ(t),He.applyNormalMatrix(e),this.setXYZ(t,He.x,He.y,He.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)He.x=this.getX(t),He.y=this.getY(t),He.z=this.getZ(t),He.transformDirection(e),this.setXYZ(t,He.x,He.y,He.z);return this}set(e,t=0){return this.array.set(e,t),this}getX(e){return this.array[e*this.itemSize]}setX(e,t){return this.array[e*this.itemSize]=t,this}getY(e){return this.array[e*this.itemSize+1]}setY(e,t){return this.array[e*this.itemSize+1]=t,this}getZ(e){return this.array[e*this.itemSize+2]}setZ(e,t){return this.array[e*this.itemSize+2]=t,this}getW(e){return this.array[e*this.itemSize+3]}setW(e,t){return this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=s,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Gi&&(e.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(e.updateRange=this.updateRange),e}}Qe.prototype.isBufferAttribute=!0;class fl extends Qe{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class ml extends Qe{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class nu extends Qe{constructor(e,t,n){super(new Uint16Array(e),t,n)}}nu.prototype.isFloat16BufferAttribute=!0;class Ge extends Qe{constructor(e,t,n){super(new Float32Array(e),t,n)}}let iu=0;const _t=new xe,br=new Ne,kn=new w,yt=new Lt,_i=new Lt,Ke=new w;class Oe extends An{constructor(){super(),Object.defineProperty(this,"id",{value:iu++}),this.uuid=Dt(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(ul(e)>65535?ml:fl)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new nt().getNormalMatrix(e);n.applyNormalMatrix(s),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(e),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return _t.makeRotationFromQuaternion(e),this.applyMatrix4(_t),this}rotateX(e){return _t.makeRotationX(e),this.applyMatrix4(_t),this}rotateY(e){return _t.makeRotationY(e),this.applyMatrix4(_t),this}rotateZ(e){return _t.makeRotationZ(e),this.applyMatrix4(_t),this}translate(e,t,n){return _t.makeTranslation(e,t,n),this.applyMatrix4(_t),this}scale(e,t,n){return _t.makeScale(e,t,n),this.applyMatrix4(_t),this}lookAt(e){return br.lookAt(e),br.updateMatrix(),this.applyMatrix4(br.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(kn).negate(),this.translate(kn.x,kn.y,kn.z),this}setFromPoints(e){const t=[];for(let n=0,i=e.length;n<i;n++){const s=e[n];t.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new Ge(t,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Lt);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new w(-1/0,-1/0,-1/0),new w(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const s=t[n];yt.setFromBufferAttribute(s),this.morphTargetsRelative?(Ke.addVectors(this.boundingBox.min,yt.min),this.boundingBox.expandByPoint(Ke),Ke.addVectors(this.boundingBox.max,yt.max),this.boundingBox.expandByPoint(Ke)):(this.boundingBox.expandByPoint(yt.min),this.boundingBox.expandByPoint(yt.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new li);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new w,1/0);return}if(e){const n=this.boundingSphere.center;if(yt.setFromBufferAttribute(e),t)for(let s=0,r=t.length;s<r;s++){const o=t[s];_i.setFromBufferAttribute(o),this.morphTargetsRelative?(Ke.addVectors(yt.min,_i.min),yt.expandByPoint(Ke),Ke.addVectors(yt.max,_i.max),yt.expandByPoint(Ke)):(yt.expandByPoint(_i.min),yt.expandByPoint(_i.max))}yt.getCenter(n);let i=0;for(let s=0,r=e.count;s<r;s++)Ke.fromBufferAttribute(e,s),i=Math.max(i,n.distanceToSquared(Ke));if(t)for(let s=0,r=t.length;s<r;s++){const o=t[s],l=this.morphTargetsRelative;for(let c=0,h=o.count;c<h;c++)Ke.fromBufferAttribute(o,c),l&&(kn.fromBufferAttribute(e,c),Ke.add(kn)),i=Math.max(i,n.distanceToSquared(Ke))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.array,i=t.position.array,s=t.normal.array,r=t.uv.array,o=i.length/3;t.tangent===void 0&&this.setAttribute("tangent",new Qe(new Float32Array(4*o),4));const l=t.tangent.array,c=[],h=[];for(let N=0;N<o;N++)c[N]=new w,h[N]=new w;const u=new w,d=new w,p=new w,g=new Y,y=new Y,v=new Y,f=new w,m=new w;function E(N,A,$){u.fromArray(i,N*3),d.fromArray(i,A*3),p.fromArray(i,$*3),g.fromArray(r,N*2),y.fromArray(r,A*2),v.fromArray(r,$*2),d.sub(u),p.sub(u),y.sub(g),v.sub(g);const I=1/(y.x*v.y-v.x*y.y);isFinite(I)&&(f.copy(d).multiplyScalar(v.y).addScaledVector(p,-y.y).multiplyScalar(I),m.copy(p).multiplyScalar(y.x).addScaledVector(d,-v.x).multiplyScalar(I),c[N].add(f),c[A].add(f),c[$].add(f),h[N].add(m),h[A].add(m),h[$].add(m))}let _=this.groups;_.length===0&&(_=[{start:0,count:n.length}]);for(let N=0,A=_.length;N<A;++N){const $=_[N],I=$.start,D=$.count;for(let k=I,U=I+D;k<U;k+=3)E(n[k+0],n[k+1],n[k+2])}const T=new w,C=new w,x=new w,R=new w;function W(N){x.fromArray(s,N*3),R.copy(x);const A=c[N];T.copy(A),T.sub(x.multiplyScalar(x.dot(A))).normalize(),C.crossVectors(R,A);const I=C.dot(h[N])<0?-1:1;l[N*4]=T.x,l[N*4+1]=T.y,l[N*4+2]=T.z,l[N*4+3]=I}for(let N=0,A=_.length;N<A;++N){const $=_[N],I=$.start,D=$.count;for(let k=I,U=I+D;k<U;k+=3)W(n[k+0]),W(n[k+1]),W(n[k+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new Qe(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let d=0,p=n.count;d<p;d++)n.setXYZ(d,0,0,0);const i=new w,s=new w,r=new w,o=new w,l=new w,c=new w,h=new w,u=new w;if(e)for(let d=0,p=e.count;d<p;d+=3){const g=e.getX(d+0),y=e.getX(d+1),v=e.getX(d+2);i.fromBufferAttribute(t,g),s.fromBufferAttribute(t,y),r.fromBufferAttribute(t,v),h.subVectors(r,s),u.subVectors(i,s),h.cross(u),o.fromBufferAttribute(n,g),l.fromBufferAttribute(n,y),c.fromBufferAttribute(n,v),o.add(h),l.add(h),c.add(h),n.setXYZ(g,o.x,o.y,o.z),n.setXYZ(y,l.x,l.y,l.z),n.setXYZ(v,c.x,c.y,c.z)}else for(let d=0,p=t.count;d<p;d+=3)i.fromBufferAttribute(t,d+0),s.fromBufferAttribute(t,d+1),r.fromBufferAttribute(t,d+2),h.subVectors(r,s),u.subVectors(i,s),h.cross(u),n.setXYZ(d+0,h.x,h.y,h.z),n.setXYZ(d+1,h.x,h.y,h.z),n.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(e,t){if(!(e&&e.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);return}t===void 0&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const n=this.attributes;for(const i in n){if(e.attributes[i]===void 0)continue;const r=n[i].array,o=e.attributes[i],l=o.array,c=o.itemSize*t,h=Math.min(l.length,r.length-c);for(let u=0,d=c;u<h;u++,d++)r[d]=l[u]}return this}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)Ke.fromBufferAttribute(e,t),Ke.normalize(),e.setXYZ(t,Ke.x,Ke.y,Ke.z)}toNonIndexed(){function e(o,l){const c=o.array,h=o.itemSize,u=o.normalized,d=new c.constructor(l.length*h);let p=0,g=0;for(let y=0,v=l.length;y<v;y++){o.isInterleavedBufferAttribute?p=l[y]*o.data.stride+o.offset:p=l[y]*h;for(let f=0;f<h;f++)d[g++]=c[p++]}return new Qe(d,h,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Oe,n=this.index.array,i=this.attributes;for(const o in i){const l=i[o],c=e(l,n);t.setAttribute(o,c)}const s=this.morphAttributes;for(const o in s){const l=[],c=s[o];for(let h=0,u=c.length;h<u;h++){const d=c[h],p=e(d,n);l.push(p)}t.morphAttributes[o]=l}t.morphTargetsRelative=this.morphTargetsRelative;const r=this.groups;for(let o=0,l=r.length;o<l;o++){const c=r[o];t.addGroup(c.start,c.count,c.materialIndex)}return t}toJSON(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(e[c]=l[c]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const l in n){const c=n[l];e.data.attributes[l]=c.toJSON(e.data)}const i={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let u=0,d=c.length;u<d;u++){const p=c[u];h.push(p.toJSON(e.data))}h.length>0&&(i[l]=h,s=!0)}s&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const r=this.groups;r.length>0&&(e.data.groups=JSON.parse(JSON.stringify(r)));const o=this.boundingSphere;return o!==null&&(e.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const i=e.attributes;for(const c in i){const h=i[c];this.setAttribute(c,h.clone(t))}const s=e.morphAttributes;for(const c in s){const h=[],u=s[c];for(let d=0,p=u.length;d<p;d++)h.push(u[d].clone(t));this.morphAttributes[c]=h}this.morphTargetsRelative=e.morphTargetsRelative;const r=e.groups;for(let c=0,h=r.length;c<h;c++){const u=r[c];this.addGroup(u.start,u.count,u.materialIndex)}const o=e.boundingBox;o!==null&&(this.boundingBox=o.clone());const l=e.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,e.parameters!==void 0&&(this.parameters=Object.assign({},e.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}Oe.prototype.isBufferGeometry=!0;const so=new xe,Bn=new ci,wr=new li,jt=new w,Jt=new w,Qt=new w,Sr=new w,Er=new w,Tr=new w,ls=new w,cs=new w,hs=new w,us=new Y,ds=new Y,ps=new Y,Cr=new w,fs=new w;class oe extends Ne{constructor(e=new Oe,t=new Ae){super(),this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,r=i.length;s<r;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(e,t){const n=this.geometry,i=this.material,s=this.matrixWorld;if(i===void 0||(n.boundingSphere===null&&n.computeBoundingSphere(),wr.copy(n.boundingSphere),wr.applyMatrix4(s),e.ray.intersectsSphere(wr)===!1)||(so.copy(s).invert(),Bn.copy(e.ray).applyMatrix4(so),n.boundingBox!==null&&Bn.intersectsBox(n.boundingBox)===!1))return;let r;if(n.isBufferGeometry){const o=n.index,l=n.attributes.position,c=n.morphAttributes.position,h=n.morphTargetsRelative,u=n.attributes.uv,d=n.attributes.uv2,p=n.groups,g=n.drawRange;if(o!==null)if(Array.isArray(i))for(let y=0,v=p.length;y<v;y++){const f=p[y],m=i[f.materialIndex],E=Math.max(f.start,g.start),_=Math.min(o.count,Math.min(f.start+f.count,g.start+g.count));for(let T=E,C=_;T<C;T+=3){const x=o.getX(T),R=o.getX(T+1),W=o.getX(T+2);r=ms(this,m,e,Bn,l,c,h,u,d,x,R,W),r&&(r.faceIndex=Math.floor(T/3),r.face.materialIndex=f.materialIndex,t.push(r))}}else{const y=Math.max(0,g.start),v=Math.min(o.count,g.start+g.count);for(let f=y,m=v;f<m;f+=3){const E=o.getX(f),_=o.getX(f+1),T=o.getX(f+2);r=ms(this,i,e,Bn,l,c,h,u,d,E,_,T),r&&(r.faceIndex=Math.floor(f/3),t.push(r))}}else if(l!==void 0)if(Array.isArray(i))for(let y=0,v=p.length;y<v;y++){const f=p[y],m=i[f.materialIndex],E=Math.max(f.start,g.start),_=Math.min(l.count,Math.min(f.start+f.count,g.start+g.count));for(let T=E,C=_;T<C;T+=3){const x=T,R=T+1,W=T+2;r=ms(this,m,e,Bn,l,c,h,u,d,x,R,W),r&&(r.faceIndex=Math.floor(T/3),r.face.materialIndex=f.materialIndex,t.push(r))}}else{const y=Math.max(0,g.start),v=Math.min(l.count,g.start+g.count);for(let f=y,m=v;f<m;f+=3){const E=f,_=f+1,T=f+2;r=ms(this,i,e,Bn,l,c,h,u,d,E,_,T),r&&(r.faceIndex=Math.floor(f/3),t.push(r))}}}else n.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}oe.prototype.isMesh=!0;function su(a,e,t,n,i,s,r,o){let l;if(e.side===je?l=n.intersectTriangle(r,s,i,!0,o):l=n.intersectTriangle(i,s,r,e.side!==ni,o),l===null)return null;fs.copy(o),fs.applyMatrix4(a.matrixWorld);const c=t.ray.origin.distanceTo(fs);return c<t.near||c>t.far?null:{distance:c,point:fs.clone(),object:a}}function ms(a,e,t,n,i,s,r,o,l,c,h,u){jt.fromBufferAttribute(i,c),Jt.fromBufferAttribute(i,h),Qt.fromBufferAttribute(i,u);const d=a.morphTargetInfluences;if(s&&d){ls.set(0,0,0),cs.set(0,0,0),hs.set(0,0,0);for(let g=0,y=s.length;g<y;g++){const v=d[g],f=s[g];v!==0&&(Sr.fromBufferAttribute(f,c),Er.fromBufferAttribute(f,h),Tr.fromBufferAttribute(f,u),r?(ls.addScaledVector(Sr,v),cs.addScaledVector(Er,v),hs.addScaledVector(Tr,v)):(ls.addScaledVector(Sr.sub(jt),v),cs.addScaledVector(Er.sub(Jt),v),hs.addScaledVector(Tr.sub(Qt),v)))}jt.add(ls),Jt.add(cs),Qt.add(hs)}a.isSkinnedMesh&&(a.boneTransform(c,jt),a.boneTransform(h,Jt),a.boneTransform(u,Qt));const p=su(a,e,t,n,jt,Jt,Qt,Cr);if(p){o&&(us.fromBufferAttribute(o,c),ds.fromBufferAttribute(o,h),ps.fromBufferAttribute(o,u),p.uv=Je.getUV(Cr,jt,Jt,Qt,us,ds,ps,new Y)),l&&(us.fromBufferAttribute(l,c),ds.fromBufferAttribute(l,h),ps.fromBufferAttribute(l,u),p.uv2=Je.getUV(Cr,jt,Jt,Qt,us,ds,ps,new Y));const g={a:c,b:h,c:u,normal:new w,materialIndex:0};Je.getNormal(jt,Jt,Qt,g.normal),p.face=g}return p}class Yi extends Oe{constructor(e=1,t=1,n=1,i=1,s=1,r=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:s,depthSegments:r};const o=this;i=Math.floor(i),s=Math.floor(s),r=Math.floor(r);const l=[],c=[],h=[],u=[];let d=0,p=0;g("z","y","x",-1,-1,n,t,e,r,s,0),g("z","y","x",1,-1,n,t,-e,r,s,1),g("x","z","y",1,1,e,n,t,i,r,2),g("x","z","y",1,-1,e,n,-t,i,r,3),g("x","y","z",1,-1,e,t,n,i,s,4),g("x","y","z",-1,-1,e,t,-n,i,s,5),this.setIndex(l),this.setAttribute("position",new Ge(c,3)),this.setAttribute("normal",new Ge(h,3)),this.setAttribute("uv",new Ge(u,2));function g(y,v,f,m,E,_,T,C,x,R,W){const N=_/x,A=T/R,$=_/2,I=T/2,D=C/2,k=x+1,U=R+1;let B=0,K=0;const le=new w;for(let ye=0;ye<U;ye++){const se=ye*A-I;for(let Ee=0;Ee<k;Ee++){const X=Ee*N-$;le[y]=X*m,le[v]=se*E,le[f]=D,c.push(le.x,le.y,le.z),le[y]=0,le[v]=0,le[f]=C>0?1:-1,h.push(le.x,le.y,le.z),u.push(Ee/x),u.push(1-ye/R),B+=1}}for(let ye=0;ye<R;ye++)for(let se=0;se<x;se++){const Ee=d+se+k*ye,X=d+se+k*(ye+1),Q=d+(se+1)+k*(ye+1),he=d+(se+1)+k*ye;l.push(Ee,X,he),l.push(X,Q,he),K+=6}o.addGroup(p,K,W),p+=K,d+=B}}static fromJSON(e){return new Yi(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function ii(a){const e={};for(const t in a){e[t]={};for(const n in a[t]){const i=a[t][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?e[t][n]=i.clone():Array.isArray(i)?e[t][n]=i.slice():e[t][n]=i}}return e}function ot(a){const e={};for(let t=0;t<a.length;t++){const n=ii(a[t]);for(const i in n)e[i]=n[i]}return e}const ru={clone:ii,merge:ot};var au=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,ou=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Tn extends ht{constructor(e){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=au,this.fragmentShader=ou,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&(e.attributes!==void 0&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=ii(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const r=this.uniforms[i].value;r&&r.isTexture?t.uniforms[i]={type:"t",value:r.toJSON(e).uuid}:r&&r.isColor?t.uniforms[i]={type:"c",value:r.getHex()}:r&&r.isVector2?t.uniforms[i]={type:"v2",value:r.toArray()}:r&&r.isVector3?t.uniforms[i]={type:"v3",value:r.toArray()}:r&&r.isVector4?t.uniforms[i]={type:"v4",value:r.toArray()}:r&&r.isMatrix3?t.uniforms[i]={type:"m3",value:r.toArray()}:r&&r.isMatrix4?t.uniforms[i]={type:"m4",value:r.toArray()}:t.uniforms[i]={value:r}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}Tn.prototype.isShaderMaterial=!0;class ra extends Ne{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new xe,this.projectionMatrix=new xe,this.projectionMatrixInverse=new xe}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}ra.prototype.isCamera=!0;class mt extends ra{constructor(e=50,t=1,n=.1,i=2e3){super(),this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=Yr*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(sr*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return Yr*2*Math.atan(Math.tan(sr*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,i,s,r){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=r,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(sr*.5*this.fov)/this.zoom,n=2*t,i=this.aspect*n,s=-.5*i;const r=this.view;if(this.view!==null&&this.view.enabled){const l=r.fullWidth,c=r.fullHeight;s+=r.offsetX*i/l,t-=r.offsetY*n/c,i*=r.width/l,n*=r.height/c}const o=this.filmOffset;o!==0&&(s+=e*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,t,t-n,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}mt.prototype.isPerspectiveCamera=!0;const zn=90,Gn=1;class aa extends Ne{constructor(e,t,n){if(super(),this.type="CubeCamera",n.isWebGLCubeRenderTarget!==!0){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=n;const i=new mt(zn,Gn,e,t);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new w(1,0,0)),this.add(i);const s=new mt(zn,Gn,e,t);s.layers=this.layers,s.up.set(0,-1,0),s.lookAt(new w(-1,0,0)),this.add(s);const r=new mt(zn,Gn,e,t);r.layers=this.layers,r.up.set(0,0,1),r.lookAt(new w(0,1,0)),this.add(r);const o=new mt(zn,Gn,e,t);o.layers=this.layers,o.up.set(0,0,-1),o.lookAt(new w(0,-1,0)),this.add(o);const l=new mt(zn,Gn,e,t);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new w(0,0,1)),this.add(l);const c=new mt(zn,Gn,e,t);c.layers=this.layers,c.up.set(0,-1,0),c.lookAt(new w(0,0,-1)),this.add(c)}update(e,t){this.parent===null&&this.updateMatrixWorld();const n=this.renderTarget,[i,s,r,o,l,c]=this.children,h=e.xr.enabled,u=e.getRenderTarget();e.xr.enabled=!1;const d=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,i),e.setRenderTarget(n,1),e.render(t,s),e.setRenderTarget(n,2),e.render(t,r),e.setRenderTarget(n,3),e.render(t,o),e.setRenderTarget(n,4),e.render(t,l),n.texture.generateMipmaps=d,e.setRenderTarget(n,5),e.render(t,c),e.setRenderTarget(u),e.xr.enabled=h}}class Xs extends st{constructor(e,t,n,i,s,r,o,l,c,h){e=e!==void 0?e:[],t=t!==void 0?t:qi,super(e,t,n,i,s,r,o,l,c,h),this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}Xs.prototype.isCubeTexture=!0;class gl extends It{constructor(e,t,n){Number.isInteger(t)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),t=n),super(e,e,t),t=t||{},this.texture=new Xs(void 0,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:Mt,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.format=ut,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new Yi(5,5,5),s=new Tn({name:"CubemapFromEquirect",uniforms:ii(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:je,blending:sn});s.uniforms.tEquirect.value=t;const r=new oe(i,s),o=t.minFilter;return t.minFilter===Ws&&(t.minFilter=Mt),new aa(1,10,this).update(e,r),t.minFilter=o,r.geometry.dispose(),r.material.dispose(),this}clear(e,t,n,i){const s=e.getRenderTarget();for(let r=0;r<6;r++)e.setRenderTarget(this,r),e.clear(t,n,i);e.setRenderTarget(s)}}gl.prototype.isWebGLCubeRenderTarget=!0;const Ar=new w,lu=new w,cu=new nt;class Vt{constructor(e=new w(1,0,0),t=0){this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=Ar.subVectors(n,t).cross(lu.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(e,t){const n=e.delta(Ar),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const s=-(e.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:t.copy(n).multiplyScalar(s).add(e.start)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||cu.getNormalMatrix(e),i=this.coplanarPoint(Ar).applyMatrix4(e),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}Vt.prototype.isPlane=!0;const On=new li,gs=new w;class Ys{constructor(e=new Vt,t=new Vt,n=new Vt,i=new Vt,s=new Vt,r=new Vt){this.planes=[e,t,n,i,s,r]}set(e,t,n,i,s,r){const o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(n),o[3].copy(i),o[4].copy(s),o[5].copy(r),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e){const t=this.planes,n=e.elements,i=n[0],s=n[1],r=n[2],o=n[3],l=n[4],c=n[5],h=n[6],u=n[7],d=n[8],p=n[9],g=n[10],y=n[11],v=n[12],f=n[13],m=n[14],E=n[15];return t[0].setComponents(o-i,u-l,y-d,E-v).normalize(),t[1].setComponents(o+i,u+l,y+d,E+v).normalize(),t[2].setComponents(o+s,u+c,y+p,E+f).normalize(),t[3].setComponents(o-s,u-c,y-p,E-f).normalize(),t[4].setComponents(o-r,u-h,y-g,E-m).normalize(),t[5].setComponents(o+r,u+h,y+g,E+m).normalize(),this}intersectsObject(e){const t=e.geometry;return t.boundingSphere===null&&t.computeBoundingSphere(),On.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(On)}intersectsSprite(e){return On.center.set(0,0,0),On.radius=.7071067811865476,On.applyMatrix4(e.matrixWorld),this.intersectsSphere(On)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let s=0;s<6;s++)if(t[s].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(gs.x=i.normal.x>0?e.max.x:e.min.x,gs.y=i.normal.y>0?e.max.y:e.min.y,gs.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(gs)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function yl(){let a=null,e=!1,t=null,n=null;function i(s,r){t(s,r),n=a.requestAnimationFrame(i)}return{start:function(){e!==!0&&t!==null&&(n=a.requestAnimationFrame(i),e=!0)},stop:function(){a.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(s){t=s},setContext:function(s){a=s}}}function hu(a,e){const t=e.isWebGL2,n=new WeakMap;function i(c,h){const u=c.array,d=c.usage,p=a.createBuffer();a.bindBuffer(h,p),a.bufferData(h,u,d),c.onUploadCallback();let g=5126;return u instanceof Float32Array?g=5126:u instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):u instanceof Uint16Array?c.isFloat16BufferAttribute?t?g=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):g=5123:u instanceof Int16Array?g=5122:u instanceof Uint32Array?g=5125:u instanceof Int32Array?g=5124:u instanceof Int8Array?g=5120:(u instanceof Uint8Array||u instanceof Uint8ClampedArray)&&(g=5121),{buffer:p,type:g,bytesPerElement:u.BYTES_PER_ELEMENT,version:c.version}}function s(c,h,u){const d=h.array,p=h.updateRange;a.bindBuffer(u,c),p.count===-1?a.bufferSubData(u,0,d):(t?a.bufferSubData(u,p.offset*d.BYTES_PER_ELEMENT,d,p.offset,p.count):a.bufferSubData(u,p.offset*d.BYTES_PER_ELEMENT,d.subarray(p.offset,p.offset+p.count)),p.count=-1)}function r(c){return c.isInterleavedBufferAttribute&&(c=c.data),n.get(c)}function o(c){c.isInterleavedBufferAttribute&&(c=c.data);const h=n.get(c);h&&(a.deleteBuffer(h.buffer),n.delete(c))}function l(c,h){if(c.isGLBufferAttribute){const d=n.get(c);(!d||d.version<c.version)&&n.set(c,{buffer:c.buffer,type:c.type,bytesPerElement:c.elementSize,version:c.version});return}c.isInterleavedBufferAttribute&&(c=c.data);const u=n.get(c);u===void 0?n.set(c,i(c,h)):u.version<c.version&&(s(u.buffer,c,h),u.version=c.version)}return{get:r,remove:o,update:l}}class ft extends Oe{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const s=e/2,r=t/2,o=Math.floor(n),l=Math.floor(i),c=o+1,h=l+1,u=e/o,d=t/l,p=[],g=[],y=[],v=[];for(let f=0;f<h;f++){const m=f*d-r;for(let E=0;E<c;E++){const _=E*u-s;g.push(_,-m,0),y.push(0,0,1),v.push(E/o),v.push(1-f/l)}}for(let f=0;f<l;f++)for(let m=0;m<o;m++){const E=m+c*f,_=m+c*(f+1),T=m+1+c*(f+1),C=m+1+c*f;p.push(E,_,C),p.push(_,T,C)}this.setIndex(p),this.setAttribute("position",new Ge(g,3)),this.setAttribute("normal",new Ge(y,3)),this.setAttribute("uv",new Ge(v,2))}static fromJSON(e){return new ft(e.width,e.height,e.widthSegments,e.heightSegments)}}var uu=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,du=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,pu=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,fu=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,mu=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,gu=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,yu="vec3 transformed = vec3( position );",vu=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,xu=`vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif`,_u=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,Mu=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,bu=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,wu=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,Su=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,Eu=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,Tu=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,Cu=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,Au=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,Lu=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float linearToRelativeLuminance( const in vec3 color ) {
	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
	return dot( weights, color.rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,Ru=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_maxMipLevel 8.0
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_maxTileSize 256.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );
		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );
		vec2 f = fract( uv );
		uv += 0.5 - f;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		if ( mipInt < cubeUV_maxMipLevel ) {
			uv.y += 2.0 * cubeUV_maxTileSize;
		}
		uv.y += filterInt * 2.0 * cubeUV_minTileSize;
		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );
		uv *= texelSize;
		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x += texelSize;
		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.y += texelSize;
		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x -= texelSize;
		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		vec3 tm = mix( tl, tr, f.x );
		vec3 bm = mix( bl, br, f.x );
		return mix( tm, bm, f.y );
	}
	#define r0 1.0
	#define v0 0.339
	#define m0 - 2.0
	#define r1 0.8
	#define v1 0.276
	#define m1 - 1.0
	#define r4 0.4
	#define v4 0.046
	#define m4 2.0
	#define r5 0.305
	#define v5 0.016
	#define m5 3.0
	#define r6 0.21
	#define v6 0.0038
	#define m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= r1 ) {
			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
		} else if ( roughness >= r4 ) {
			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
		} else if ( roughness >= r5 ) {
			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
		} else if ( roughness >= r6 ) {
			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,Pu=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,Du=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,Iu=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,Uu=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,Nu=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,Fu="gl_FragColor = linearToOutputTexel( gl_FragColor );",ku=`
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );
}
vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );
}
vec4 sRGBToLinear( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 RGBEToLinear( in vec4 value ) {
	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );
}
vec4 LinearToRGBE( in vec4 value ) {
	float maxComponent = max( max( value.r, value.g ), value.b );
	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );
	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );
}
vec4 RGBMToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * value.a * maxRange, 1.0 );
}
vec4 LinearToRGBM( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );
	M = ceil( M * 255.0 ) / 255.0;
	return vec4( value.rgb / ( M * maxRange ), M );
}
vec4 RGBDToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );
}
vec4 LinearToRGBD( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float D = max( maxRange / maxRGB, 1.0 );
	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );
	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );
}
const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );
vec4 LinearToLogLuv( in vec4 value ) {
	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;
	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );
	vec4 vResult;
	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;
	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;
	vResult.w = fract( Le );
	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;
	return vResult;
}
const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );
vec4 LogLuvToLinear( in vec4 value ) {
	float Le = value.z * 255.0 + value.w;
	vec3 Xp_Y_XYZp;
	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );
	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;
	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;
	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;
	return vec4( max( vRGB, 0.0 ), 1.0 );
}`,Bu=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
		envColor = envMapTexelToLinear( envColor );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,zu=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform int maxMipLevel;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,Gu=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,Ou=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,Hu=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,Vu=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,Wu=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,qu=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,Xu=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,Yu=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return texture2D( gradientMap, coord ).rgb;
	#else
		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
	#endif
}`,Zu=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		lightMapIrradiance *= PI;
	#endif
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,$u=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,ju=`vec3 diffuse = vec3( 1.0 );
GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;
vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif
IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;
vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
vIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );
#ifdef DOUBLE_SIDED
	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );
	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );
#endif
#if NUM_POINT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		getPointLightInfo( pointLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_SPOT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		getSpotLightInfo( spotLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_DIR_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_HEMI_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		#ifdef DOUBLE_SIDED
			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );
		#endif
	}
	#pragma unroll_loop_end
#endif`,Ju=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,Qu=`#if defined( USE_ENVMAP )
	#ifdef ENVMAP_MODE_REFRACTION
		uniform float refractionRatio;
	#endif
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec;
			#ifdef ENVMAP_MODE_REFLECTION
				reflectVec = reflect( - viewDir, normal );
				reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			#else
				reflectVec = refract( - viewDir, normal, refractionRatio );
			#endif
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,Ku=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,ed=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,td=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,nd=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,id=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARCOLORMAP
			specularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEENCOLORMAP
		material.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEENROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;
	#endif
#endif`,sd=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		reflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,rd=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,ad=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			lightMapIrradiance *= PI;
		#endif
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,od=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,ld=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,cd=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,hd=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,ud=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,dd=`#ifdef USE_MAP
	vec4 texelColor = texture2D( map, vUv );
	texelColor = mapTexelToLinear( texelColor );
	diffuseColor *= texelColor;
#endif`,pd=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,fd=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	vec4 mapTexel = texture2D( map, uv );
	diffuseColor *= mapTexelToLinear( mapTexel );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,md=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,gd=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,yd=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,vd=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,xd=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform vec2 morphTargetsTextureSize;
		vec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {
			float texelIndex = float( vertexIndex * stride + offset );
			float y = floor( texelIndex / morphTargetsTextureSize.x );
			float x = texelIndex - y * morphTargetsTextureSize.x;
			vec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );
			return texture( morphTargetsTexture, morphUV ).xyz;
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,_d=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			#ifndef USE_MORPHNORMALS
				if ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];
			#else
				if ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];
			#endif
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,Md=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,bd=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,wd=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,Sd=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,Ed=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,Td=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,Cd=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,Ad=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,Ld=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,Rd=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,Pd=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,Dd=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,Id=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,Ud=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,Nd=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,Fd=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,kd=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,Bd=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,zd=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Gd=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,Od=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Hd=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,Vd=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	#ifdef BONE_TEXTURE
		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );
			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
	#else
		uniform mat4 boneMatrices[ MAX_BONES ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneMatrices[ int(i) ];
			return bone;
		}
	#endif
#endif`,Wd=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,qd=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Xd=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,Yd=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,Zd=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,$d=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,jd=`#ifdef USE_TRANSMISSION
	float transmissionAlpha = 1.0;
	float transmissionFactor = transmission;
	float thicknessFactor = thickness;
	#ifdef USE_TRANSMISSIONMAP
		transmissionFactor *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		thicknessFactor *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,
		attenuationColor, attenuationDistance );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );
	transmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );
#endif`,Jd=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( float roughness, float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef TEXTURE_LOD_EXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {
		if ( attenuationDistance == 0.0 ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,
		vec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,
		vec3 attenuationColor, float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,Qd=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,Kd=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,ep=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,tp=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,np=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,ip=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,sp=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const rp=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,ap=`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,op=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,lp=`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,cp=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,hp=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,up=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,dp=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,pp=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,fp=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	vec4 texColor = texture2D( tEquirect, sampleUV );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,mp=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,gp=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,yp=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,vp=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,xp=`#define LAMBERT
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,_p=`uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>
	#ifdef DOUBLE_SIDED
		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
	#else
		reflectedLight.indirectDiffuse += vIndirectFront;
	#endif
	#include <lightmap_fragment>
	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );
	#ifdef DOUBLE_SIDED
		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
	#else
		reflectedLight.directDiffuse = vLightFront;
	#endif
	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Mp=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,bp=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
		matcapColor = matcapTexelToLinear( matcapColor );
	#else
		vec4 matcapColor = vec4( 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,wp=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,Sp=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
}`,Ep=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Tp=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Cp=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,Ap=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARCOLORMAP
		uniform sampler2D specularColorMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEENCOLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEENROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Lp=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Rp=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Pp=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,Dp=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Ip=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Up=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,Np=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Fp=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,Re={alphamap_fragment:uu,alphamap_pars_fragment:du,alphatest_fragment:pu,alphatest_pars_fragment:fu,aomap_fragment:mu,aomap_pars_fragment:gu,begin_vertex:yu,beginnormal_vertex:vu,bsdfs:xu,bumpmap_pars_fragment:_u,clipping_planes_fragment:Mu,clipping_planes_pars_fragment:bu,clipping_planes_pars_vertex:wu,clipping_planes_vertex:Su,color_fragment:Eu,color_pars_fragment:Tu,color_pars_vertex:Cu,color_vertex:Au,common:Lu,cube_uv_reflection_fragment:Ru,defaultnormal_vertex:Pu,displacementmap_pars_vertex:Du,displacementmap_vertex:Iu,emissivemap_fragment:Uu,emissivemap_pars_fragment:Nu,encodings_fragment:Fu,encodings_pars_fragment:ku,envmap_fragment:Bu,envmap_common_pars_fragment:zu,envmap_pars_fragment:Gu,envmap_pars_vertex:Ou,envmap_physical_pars_fragment:Qu,envmap_vertex:Hu,fog_vertex:Vu,fog_pars_vertex:Wu,fog_fragment:qu,fog_pars_fragment:Xu,gradientmap_pars_fragment:Yu,lightmap_fragment:Zu,lightmap_pars_fragment:$u,lights_lambert_vertex:ju,lights_pars_begin:Ju,lights_toon_fragment:Ku,lights_toon_pars_fragment:ed,lights_phong_fragment:td,lights_phong_pars_fragment:nd,lights_physical_fragment:id,lights_physical_pars_fragment:sd,lights_fragment_begin:rd,lights_fragment_maps:ad,lights_fragment_end:od,logdepthbuf_fragment:ld,logdepthbuf_pars_fragment:cd,logdepthbuf_pars_vertex:hd,logdepthbuf_vertex:ud,map_fragment:dd,map_pars_fragment:pd,map_particle_fragment:fd,map_particle_pars_fragment:md,metalnessmap_fragment:gd,metalnessmap_pars_fragment:yd,morphnormal_vertex:vd,morphtarget_pars_vertex:xd,morphtarget_vertex:_d,normal_fragment_begin:Md,normal_fragment_maps:bd,normal_pars_fragment:wd,normal_pars_vertex:Sd,normal_vertex:Ed,normalmap_pars_fragment:Td,clearcoat_normal_fragment_begin:Cd,clearcoat_normal_fragment_maps:Ad,clearcoat_pars_fragment:Ld,output_fragment:Rd,packing:Pd,premultiplied_alpha_fragment:Dd,project_vertex:Id,dithering_fragment:Ud,dithering_pars_fragment:Nd,roughnessmap_fragment:Fd,roughnessmap_pars_fragment:kd,shadowmap_pars_fragment:Bd,shadowmap_pars_vertex:zd,shadowmap_vertex:Gd,shadowmask_pars_fragment:Od,skinbase_vertex:Hd,skinning_pars_vertex:Vd,skinning_vertex:Wd,skinnormal_vertex:qd,specularmap_fragment:Xd,specularmap_pars_fragment:Yd,tonemapping_fragment:Zd,tonemapping_pars_fragment:$d,transmission_fragment:jd,transmission_pars_fragment:Jd,uv_pars_fragment:Qd,uv_pars_vertex:Kd,uv_vertex:ep,uv2_pars_fragment:tp,uv2_pars_vertex:np,uv2_vertex:ip,worldpos_vertex:sp,background_vert:rp,background_frag:ap,cube_vert:op,cube_frag:lp,depth_vert:cp,depth_frag:hp,distanceRGBA_vert:up,distanceRGBA_frag:dp,equirect_vert:pp,equirect_frag:fp,linedashed_vert:mp,linedashed_frag:gp,meshbasic_vert:yp,meshbasic_frag:vp,meshlambert_vert:xp,meshlambert_frag:_p,meshmatcap_vert:Mp,meshmatcap_frag:bp,meshnormal_vert:wp,meshnormal_frag:Sp,meshphong_vert:Ep,meshphong_frag:Tp,meshphysical_vert:Cp,meshphysical_frag:Ap,meshtoon_vert:Lp,meshtoon_frag:Rp,points_vert:Pp,points_frag:Dp,shadow_vert:Ip,shadow_frag:Up,sprite_vert:Np,sprite_frag:Fp},te={common:{diffuse:{value:new de(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new nt},uv2Transform:{value:new nt},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Y(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new de(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new de(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new nt}},sprite:{diffuse:{value:new de(16777215)},opacity:{value:1},center:{value:new Y(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new nt}}},Pt={basic:{uniforms:ot([te.common,te.specularmap,te.envmap,te.aomap,te.lightmap,te.fog]),vertexShader:Re.meshbasic_vert,fragmentShader:Re.meshbasic_frag},lambert:{uniforms:ot([te.common,te.specularmap,te.envmap,te.aomap,te.lightmap,te.emissivemap,te.fog,te.lights,{emissive:{value:new de(0)}}]),vertexShader:Re.meshlambert_vert,fragmentShader:Re.meshlambert_frag},phong:{uniforms:ot([te.common,te.specularmap,te.envmap,te.aomap,te.lightmap,te.emissivemap,te.bumpmap,te.normalmap,te.displacementmap,te.fog,te.lights,{emissive:{value:new de(0)},specular:{value:new de(1118481)},shininess:{value:30}}]),vertexShader:Re.meshphong_vert,fragmentShader:Re.meshphong_frag},standard:{uniforms:ot([te.common,te.envmap,te.aomap,te.lightmap,te.emissivemap,te.bumpmap,te.normalmap,te.displacementmap,te.roughnessmap,te.metalnessmap,te.fog,te.lights,{emissive:{value:new de(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Re.meshphysical_vert,fragmentShader:Re.meshphysical_frag},toon:{uniforms:ot([te.common,te.aomap,te.lightmap,te.emissivemap,te.bumpmap,te.normalmap,te.displacementmap,te.gradientmap,te.fog,te.lights,{emissive:{value:new de(0)}}]),vertexShader:Re.meshtoon_vert,fragmentShader:Re.meshtoon_frag},matcap:{uniforms:ot([te.common,te.bumpmap,te.normalmap,te.displacementmap,te.fog,{matcap:{value:null}}]),vertexShader:Re.meshmatcap_vert,fragmentShader:Re.meshmatcap_frag},points:{uniforms:ot([te.points,te.fog]),vertexShader:Re.points_vert,fragmentShader:Re.points_frag},dashed:{uniforms:ot([te.common,te.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Re.linedashed_vert,fragmentShader:Re.linedashed_frag},depth:{uniforms:ot([te.common,te.displacementmap]),vertexShader:Re.depth_vert,fragmentShader:Re.depth_frag},normal:{uniforms:ot([te.common,te.bumpmap,te.normalmap,te.displacementmap,{opacity:{value:1}}]),vertexShader:Re.meshnormal_vert,fragmentShader:Re.meshnormal_frag},sprite:{uniforms:ot([te.sprite,te.fog]),vertexShader:Re.sprite_vert,fragmentShader:Re.sprite_frag},background:{uniforms:{uvTransform:{value:new nt},t2D:{value:null}},vertexShader:Re.background_vert,fragmentShader:Re.background_frag},cube:{uniforms:ot([te.envmap,{opacity:{value:1}}]),vertexShader:Re.cube_vert,fragmentShader:Re.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Re.equirect_vert,fragmentShader:Re.equirect_frag},distanceRGBA:{uniforms:ot([te.common,te.displacementmap,{referencePosition:{value:new w},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Re.distanceRGBA_vert,fragmentShader:Re.distanceRGBA_frag},shadow:{uniforms:ot([te.lights,te.fog,{color:{value:new de(0)},opacity:{value:1}}]),vertexShader:Re.shadow_vert,fragmentShader:Re.shadow_frag}};Pt.physical={uniforms:ot([Pt.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Y(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new de(0)},sheenColorMap:{value:null},sheenRoughness:{value:0},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Y},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new de(0)},specularIntensity:{value:0},specularIntensityMap:{value:null},specularColor:{value:new de(1,1,1)},specularColorMap:{value:null}}]),vertexShader:Re.meshphysical_vert,fragmentShader:Re.meshphysical_frag};function kp(a,e,t,n,i){const s=new de(0);let r=0,o,l,c=null,h=0,u=null;function d(g,y){let v=!1,f=y.isScene===!0?y.background:null;f&&f.isTexture&&(f=e.get(f));const m=a.xr,E=m.getSession&&m.getSession();E&&E.environmentBlendMode==="additive"&&(f=null),f===null?p(s,r):f&&f.isColor&&(p(f,1),v=!0),(a.autoClear||v)&&a.clear(a.autoClearColor,a.autoClearDepth,a.autoClearStencil),f&&(f.isCubeTexture||f.mapping===Vs)?(l===void 0&&(l=new oe(new Yi(1,1,1),new Tn({name:"BackgroundCubeMaterial",uniforms:ii(Pt.cube.uniforms),vertexShader:Pt.cube.vertexShader,fragmentShader:Pt.cube.fragmentShader,side:je,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),l.geometry.deleteAttribute("uv"),l.onBeforeRender=function(_,T,C){this.matrixWorld.copyPosition(C.matrixWorld)},Object.defineProperty(l.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(l)),l.material.uniforms.envMap.value=f,l.material.uniforms.flipEnvMap.value=f.isCubeTexture&&f.isRenderTargetTexture===!1?-1:1,(c!==f||h!==f.version||u!==a.toneMapping)&&(l.material.needsUpdate=!0,c=f,h=f.version,u=a.toneMapping),g.unshift(l,l.geometry,l.material,0,0,null)):f&&f.isTexture&&(o===void 0&&(o=new oe(new ft(2,2),new Tn({name:"BackgroundMaterial",uniforms:ii(Pt.background.uniforms),vertexShader:Pt.background.vertexShader,fragmentShader:Pt.background.fragmentShader,side:Bi,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute("normal"),Object.defineProperty(o.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(o)),o.material.uniforms.t2D.value=f,f.matrixAutoUpdate===!0&&f.updateMatrix(),o.material.uniforms.uvTransform.value.copy(f.matrix),(c!==f||h!==f.version||u!==a.toneMapping)&&(o.material.needsUpdate=!0,c=f,h=f.version,u=a.toneMapping),g.unshift(o,o.geometry,o.material,0,0,null))}function p(g,y){t.buffers.color.setClear(g.r,g.g,g.b,y,i)}return{getClearColor:function(){return s},setClearColor:function(g,y=1){s.set(g),r=y,p(s,r)},getClearAlpha:function(){return r},setClearAlpha:function(g){r=g,p(s,r)},render:d}}function Bp(a,e,t,n){const i=a.getParameter(34921),s=n.isWebGL2?null:e.get("OES_vertex_array_object"),r=n.isWebGL2||s!==null,o={},l=y(null);let c=l;function h(I,D,k,U,B){let K=!1;if(r){const le=g(U,k,D);c!==le&&(c=le,d(c.object)),K=v(U,B),K&&f(U,B)}else{const le=D.wireframe===!0;(c.geometry!==U.id||c.program!==k.id||c.wireframe!==le)&&(c.geometry=U.id,c.program=k.id,c.wireframe=le,K=!0)}I.isInstancedMesh===!0&&(K=!0),B!==null&&t.update(B,34963),K&&(x(I,D,k,U),B!==null&&a.bindBuffer(34963,t.get(B).buffer))}function u(){return n.isWebGL2?a.createVertexArray():s.createVertexArrayOES()}function d(I){return n.isWebGL2?a.bindVertexArray(I):s.bindVertexArrayOES(I)}function p(I){return n.isWebGL2?a.deleteVertexArray(I):s.deleteVertexArrayOES(I)}function g(I,D,k){const U=k.wireframe===!0;let B=o[I.id];B===void 0&&(B={},o[I.id]=B);let K=B[D.id];K===void 0&&(K={},B[D.id]=K);let le=K[U];return le===void 0&&(le=y(u()),K[U]=le),le}function y(I){const D=[],k=[],U=[];for(let B=0;B<i;B++)D[B]=0,k[B]=0,U[B]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:D,enabledAttributes:k,attributeDivisors:U,object:I,attributes:{},index:null}}function v(I,D){const k=c.attributes,U=I.attributes;let B=0;for(const K in U){const le=k[K],ye=U[K];if(le===void 0||le.attribute!==ye||le.data!==ye.data)return!0;B++}return c.attributesNum!==B||c.index!==D}function f(I,D){const k={},U=I.attributes;let B=0;for(const K in U){const le=U[K],ye={};ye.attribute=le,le.data&&(ye.data=le.data),k[K]=ye,B++}c.attributes=k,c.attributesNum=B,c.index=D}function m(){const I=c.newAttributes;for(let D=0,k=I.length;D<k;D++)I[D]=0}function E(I){_(I,0)}function _(I,D){const k=c.newAttributes,U=c.enabledAttributes,B=c.attributeDivisors;k[I]=1,U[I]===0&&(a.enableVertexAttribArray(I),U[I]=1),B[I]!==D&&((n.isWebGL2?a:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](I,D),B[I]=D)}function T(){const I=c.newAttributes,D=c.enabledAttributes;for(let k=0,U=D.length;k<U;k++)D[k]!==I[k]&&(a.disableVertexAttribArray(k),D[k]=0)}function C(I,D,k,U,B,K){n.isWebGL2===!0&&(k===5124||k===5125)?a.vertexAttribIPointer(I,D,k,B,K):a.vertexAttribPointer(I,D,k,U,B,K)}function x(I,D,k,U){if(n.isWebGL2===!1&&(I.isInstancedMesh||U.isInstancedBufferGeometry)&&e.get("ANGLE_instanced_arrays")===null)return;m();const B=U.attributes,K=k.getAttributes(),le=D.defaultAttributeValues;for(const ye in K){const se=K[ye];if(se.location>=0){let Ee=B[ye];if(Ee===void 0&&(ye==="instanceMatrix"&&I.instanceMatrix&&(Ee=I.instanceMatrix),ye==="instanceColor"&&I.instanceColor&&(Ee=I.instanceColor)),Ee!==void 0){const X=Ee.normalized,Q=Ee.itemSize,he=t.get(Ee);if(he===void 0)continue;const H=he.buffer,ve=he.type,we=he.bytesPerElement;if(Ee.isInterleavedBufferAttribute){const re=Ee.data,ue=re.stride,Ce=Ee.offset;if(re&&re.isInstancedInterleavedBuffer){for(let O=0;O<se.locationSize;O++)_(se.location+O,re.meshPerAttribute);I.isInstancedMesh!==!0&&U._maxInstanceCount===void 0&&(U._maxInstanceCount=re.meshPerAttribute*re.count)}else for(let O=0;O<se.locationSize;O++)E(se.location+O);a.bindBuffer(34962,H);for(let O=0;O<se.locationSize;O++)C(se.location+O,Q/se.locationSize,ve,X,ue*we,(Ce+Q/se.locationSize*O)*we)}else{if(Ee.isInstancedBufferAttribute){for(let re=0;re<se.locationSize;re++)_(se.location+re,Ee.meshPerAttribute);I.isInstancedMesh!==!0&&U._maxInstanceCount===void 0&&(U._maxInstanceCount=Ee.meshPerAttribute*Ee.count)}else for(let re=0;re<se.locationSize;re++)E(se.location+re);a.bindBuffer(34962,H);for(let re=0;re<se.locationSize;re++)C(se.location+re,Q/se.locationSize,ve,X,Q*we,Q/se.locationSize*re*we)}}else if(le!==void 0){const X=le[ye];if(X!==void 0)switch(X.length){case 2:a.vertexAttrib2fv(se.location,X);break;case 3:a.vertexAttrib3fv(se.location,X);break;case 4:a.vertexAttrib4fv(se.location,X);break;default:a.vertexAttrib1fv(se.location,X)}}}}T()}function R(){A();for(const I in o){const D=o[I];for(const k in D){const U=D[k];for(const B in U)p(U[B].object),delete U[B];delete D[k]}delete o[I]}}function W(I){if(o[I.id]===void 0)return;const D=o[I.id];for(const k in D){const U=D[k];for(const B in U)p(U[B].object),delete U[B];delete D[k]}delete o[I.id]}function N(I){for(const D in o){const k=o[D];if(k[I.id]===void 0)continue;const U=k[I.id];for(const B in U)p(U[B].object),delete U[B];delete k[I.id]}}function A(){$(),c!==l&&(c=l,d(c.object))}function $(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:h,reset:A,resetDefaultState:$,dispose:R,releaseStatesOfGeometry:W,releaseStatesOfProgram:N,initAttributes:m,enableAttribute:E,disableUnusedAttributes:T}}function zp(a,e,t,n){const i=n.isWebGL2;let s;function r(c){s=c}function o(c,h){a.drawArrays(s,c,h),t.update(h,s,1)}function l(c,h,u){if(u===0)return;let d,p;if(i)d=a,p="drawArraysInstanced";else if(d=e.get("ANGLE_instanced_arrays"),p="drawArraysInstancedANGLE",d===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}d[p](s,c,h,u),t.update(h,s,u)}this.setMode=r,this.render=o,this.renderInstances=l}function Gp(a,e,t){let n;function i(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===!0){const x=e.get("EXT_texture_filter_anisotropic");n=a.getParameter(x.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n}function s(x){if(x==="highp"){if(a.getShaderPrecisionFormat(35633,36338).precision>0&&a.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";x="mediump"}return x==="mediump"&&a.getShaderPrecisionFormat(35633,36337).precision>0&&a.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const r=typeof WebGL2RenderingContext<"u"&&a instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext<"u"&&a instanceof WebGL2ComputeRenderingContext;let o=t.precision!==void 0?t.precision:"highp";const l=s(o);l!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",l,"instead."),o=l);const c=r||e.has("WEBGL_draw_buffers"),h=t.logarithmicDepthBuffer===!0,u=a.getParameter(34930),d=a.getParameter(35660),p=a.getParameter(3379),g=a.getParameter(34076),y=a.getParameter(34921),v=a.getParameter(36347),f=a.getParameter(36348),m=a.getParameter(36349),E=d>0,_=r||e.has("OES_texture_float"),T=E&&_,C=r?a.getParameter(36183):0;return{isWebGL2:r,drawBuffers:c,getMaxAnisotropy:i,getMaxPrecision:s,precision:o,logarithmicDepthBuffer:h,maxTextures:u,maxVertexTextures:d,maxTextureSize:p,maxCubemapSize:g,maxAttributes:y,maxVertexUniforms:v,maxVaryings:f,maxFragmentUniforms:m,vertexTextures:E,floatFragmentTextures:_,floatVertexTextures:T,maxSamples:C}}function Op(a){const e=this;let t=null,n=0,i=!1,s=!1;const r=new Vt,o=new nt,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(u,d,p){const g=u.length!==0||d||n!==0||i;return i=d,t=h(u,p,0),n=u.length,g},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1,c()},this.setState=function(u,d,p){const g=u.clippingPlanes,y=u.clipIntersection,v=u.clipShadows,f=a.get(u);if(!i||g===null||g.length===0||s&&!v)s?h(null):c();else{const m=s?0:n,E=m*4;let _=f.clippingState||null;l.value=_,_=h(g,d,E,p);for(let T=0;T!==E;++T)_[T]=t[T];f.clippingState=_,this.numIntersection=y?this.numPlanes:0,this.numPlanes+=m}};function c(){l.value!==t&&(l.value=t,l.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function h(u,d,p,g){const y=u!==null?u.length:0;let v=null;if(y!==0){if(v=l.value,g!==!0||v===null){const f=p+y*4,m=d.matrixWorldInverse;o.getNormalMatrix(m),(v===null||v.length<f)&&(v=new Float32Array(f));for(let E=0,_=p;E!==y;++E,_+=4)r.copy(u[E]).applyMatrix4(m,o),r.normal.toArray(v,_),v[_+3]=r.constant}l.value=v,l.needsUpdate=!0}return e.numPlanes=y,e.numIntersection=0,v}}function Hp(a){let e=new WeakMap;function t(r,o){return o===Vr?r.mapping=qi:o===Wr&&(r.mapping=Xi),r}function n(r){if(r&&r.isTexture&&r.isRenderTargetTexture===!1){const o=r.mapping;if(o===Vr||o===Wr)if(e.has(r)){const l=e.get(r).texture;return t(l,r.mapping)}else{const l=r.image;if(l&&l.height>0){const c=a.getRenderTarget(),h=new gl(l.height/2);return h.fromEquirectangularTexture(a,r),e.set(r,h),a.setRenderTarget(c),r.addEventListener("dispose",i),t(h.texture,r.mapping)}else return null}}return r}function i(r){const o=r.target;o.removeEventListener("dispose",i);const l=e.get(o);l!==void 0&&(e.delete(o),l.dispose())}function s(){e=new WeakMap}return{get:n,dispose:s}}class Zi extends ra{constructor(e=-1,t=1,n=1,i=-1,s=.1,r=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=s,this.far=r,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,s,r){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=r,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-e,r=n+e,o=i+t,l=i-t;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,r=s+c*this.view.width,o-=h*this.view.offsetY,l=o-h*this.view.height}this.projectionMatrix.makeOrthographic(s,r,o,l,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}Zi.prototype.isOrthographicCamera=!0;class Zs extends Tn{constructor(e){super(e),this.type="RawShaderMaterial"}}Zs.prototype.isRawShaderMaterial=!0;const ti=4,rn=8,Rt=Math.pow(2,rn),vl=[.125,.215,.35,.446,.526,.582],xl=rn-ti+1+vl.length,Hn=20,cn={[lt]:0,[Cn]:1,[sa]:2,[ll]:3,[cl]:4,[hl]:5,[ia]:6},Lr=new Zi,{_lodPlanes:Mi,_sizeLods:ro,_sigmas:ys}=qp(),ao=new de;let Rr=null;const Sn=(1+Math.sqrt(5))/2,Vn=1/Sn,oo=[new w(1,1,1),new w(-1,1,1),new w(1,1,-1),new w(-1,1,-1),new w(0,Sn,Vn),new w(0,Sn,-Vn),new w(Vn,0,Sn),new w(-Vn,0,Sn),new w(Sn,Vn,0),new w(-Sn,Vn,0)];class Vp{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._blurMaterial=Xp(Hn),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){Rr=this._renderer.getRenderTarget();const s=this._allocateTargets();return this._sceneToCubeUV(e,n,i,s),t>0&&this._blur(s,0,0,t),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(e){return this._fromTexture(e)}fromCubemap(e){return this._fromTexture(e)}compileCubemapShader(){this._cubemapShader===null&&(this._cubemapShader=ho(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){this._equirectShader===null&&(this._equirectShader=co(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),this._cubemapShader!==null&&this._cubemapShader.dispose(),this._equirectShader!==null&&this._equirectShader.dispose();for(let e=0;e<Mi.length;e++)Mi[e].dispose()}_cleanup(e){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(Rr),e.scissorTest=!1,vs(e,0,0,e.width,e.height)}_fromTexture(e){Rr=this._renderer.getRenderTarget();const t=this._allocateTargets(e);return this._textureToCubeUV(e,t),this._applyPMREM(t),this._cleanup(t),t}_allocateTargets(e){const t={magFilter:et,minFilter:et,generateMipmaps:!1,type:ln,format:jc,encoding:Wp(e)?e.encoding:sa,depthBuffer:!1},n=lo(t);return n.depthBuffer=!e,this._pingPongRenderTarget=lo(t),n}_compileMaterial(e){const t=new oe(Mi[0],e);this._renderer.compile(t,Lr)}_sceneToCubeUV(e,t,n,i){const o=new mt(90,1,t,n),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],h=this._renderer,u=h.autoClear,d=h.outputEncoding,p=h.toneMapping;h.getClearColor(ao),h.toneMapping=En,h.outputEncoding=lt,h.autoClear=!1;const g=new Ae({name:"PMREM.Background",side:je,depthWrite:!1,depthTest:!1}),y=new oe(new Yi,g);let v=!1;const f=e.background;f?f.isColor&&(g.color.copy(f),e.background=null,v=!0):(g.color.copy(ao),v=!0);for(let m=0;m<6;m++){const E=m%3;E==0?(o.up.set(0,l[m],0),o.lookAt(c[m],0,0)):E==1?(o.up.set(0,0,l[m]),o.lookAt(0,c[m],0)):(o.up.set(0,l[m],0),o.lookAt(0,0,c[m])),vs(i,E*Rt,m>2?Rt:0,Rt,Rt),h.setRenderTarget(i),v&&h.render(y,o),h.render(e,o)}y.geometry.dispose(),y.material.dispose(),h.toneMapping=p,h.outputEncoding=d,h.autoClear=u,e.background=f}_setEncoding(e,t){this._renderer.capabilities.isWebGL2===!0&&t.format===ut&&t.type===ln&&t.encoding===Cn?e.value=cn[lt]:e.value=cn[t.encoding]}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===qi||e.mapping===Xi;i?this._cubemapShader==null&&(this._cubemapShader=ho()):this._equirectShader==null&&(this._equirectShader=co());const s=i?this._cubemapShader:this._equirectShader,r=new oe(Mi[0],s),o=s.uniforms;o.envMap.value=e,i||o.texelSize.value.set(1/e.image.width,1/e.image.height),this._setEncoding(o.inputEncoding,e),this._setEncoding(o.outputEncoding,t.texture),vs(t,0,0,3*Rt,2*Rt),n.setRenderTarget(t),n.render(r,Lr)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let i=1;i<xl;i++){const s=Math.sqrt(ys[i]*ys[i]-ys[i-1]*ys[i-1]),r=oo[(i-1)%oo.length];this._blur(e,i-1,i,s,r)}t.autoClear=n}_blur(e,t,n,i,s){const r=this._pingPongRenderTarget;this._halfBlur(e,r,t,n,i,"latitudinal",s),this._halfBlur(r,e,n,n,i,"longitudinal",s)}_halfBlur(e,t,n,i,s,r,o){const l=this._renderer,c=this._blurMaterial;r!=="latitudinal"&&r!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,u=new oe(Mi[i],c),d=c.uniforms,p=ro[n]-1,g=isFinite(s)?Math.PI/(2*p):2*Math.PI/(2*Hn-1),y=s/g,v=isFinite(s)?1+Math.floor(h*y):Hn;v>Hn&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${v} samples when the maximum is set to ${Hn}`);const f=[];let m=0;for(let C=0;C<Hn;++C){const x=C/y,R=Math.exp(-x*x/2);f.push(R),C==0?m+=R:C<v&&(m+=2*R)}for(let C=0;C<f.length;C++)f[C]=f[C]/m;d.envMap.value=e.texture,d.samples.value=v,d.weights.value=f,d.latitudinal.value=r==="latitudinal",o&&(d.poleAxis.value=o),d.dTheta.value=g,d.mipInt.value=rn-n,this._setEncoding(d.inputEncoding,e.texture),this._setEncoding(d.outputEncoding,e.texture);const E=ro[i],_=3*Math.max(0,Rt-2*E),T=(i===0?0:2*Rt)+2*E*(i>rn-ti?i-rn+ti:0);vs(t,_,T,3*E,2*E),l.setRenderTarget(t),l.render(u,Lr)}}function Wp(a){return a===void 0||a.type!==ln?!1:a.encoding===lt||a.encoding===Cn||a.encoding===ia}function qp(){const a=[],e=[],t=[];let n=rn;for(let i=0;i<xl;i++){const s=Math.pow(2,n);e.push(s);let r=1/s;i>rn-ti?r=vl[i-rn+ti-1]:i==0&&(r=0),t.push(r);const o=1/(s-1),l=-o/2,c=1+o/2,h=[l,l,c,l,c,c,l,l,c,c,l,c],u=6,d=6,p=3,g=2,y=1,v=new Float32Array(p*d*u),f=new Float32Array(g*d*u),m=new Float32Array(y*d*u);for(let _=0;_<u;_++){const T=_%3*2/3-1,C=_>2?0:-1,x=[T,C,0,T+2/3,C,0,T+2/3,C+1,0,T,C,0,T+2/3,C+1,0,T,C+1,0];v.set(x,p*d*_),f.set(h,g*d*_);const R=[_,_,_,_,_,_];m.set(R,y*d*_)}const E=new Oe;E.setAttribute("position",new Qe(v,p)),E.setAttribute("uv",new Qe(f,g)),E.setAttribute("faceIndex",new Qe(m,y)),a.push(E),n>ti&&n--}return{_lodPlanes:a,_sizeLods:e,_sigmas:t}}function lo(a){const e=new It(3*Rt,3*Rt,a);return e.texture.mapping=Vs,e.texture.name="PMREM.cubeUv",e.scissorTest=!0,e}function vs(a,e,t,n,i){a.viewport.set(e,t,n,i),a.scissor.set(e,t,n,i)}function Xp(a){const e=new Float32Array(a),t=new w(0,1,0);return new Zs({name:"SphericalGaussianBlur",defines:{n:a},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:e},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:t},inputEncoding:{value:cn[lt]},outputEncoding:{value:cn[lt]}},vertexShader:oa(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${la()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:sn,depthTest:!1,depthWrite:!1})}function co(){const a=new Y(1,1);return new Zs({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:a},inputEncoding:{value:cn[lt]},outputEncoding:{value:cn[lt]}},vertexShader:oa(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${la()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:sn,depthTest:!1,depthWrite:!1})}function ho(){return new Zs({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},inputEncoding:{value:cn[lt]},outputEncoding:{value:cn[lt]}},vertexShader:oa(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${la()}

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;
				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:sn,depthTest:!1,depthWrite:!1})}function oa(){return`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function la(){return`

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`}function Yp(a){let e=new WeakMap,t=null;function n(o){if(o&&o.isTexture&&o.isRenderTargetTexture===!1){const l=o.mapping,c=l===Vr||l===Wr,h=l===qi||l===Xi;if(c||h){if(e.has(o))return e.get(o).texture;{const u=o.image;if(c&&u&&u.height>0||h&&u&&i(u)){const d=a.getRenderTarget();t===null&&(t=new Vp(a));const p=c?t.fromEquirectangular(o):t.fromCubemap(o);return e.set(o,p),a.setRenderTarget(d),o.addEventListener("dispose",s),p.texture}else return null}}}return o}function i(o){let l=0;const c=6;for(let h=0;h<c;h++)o[h]!==void 0&&l++;return l===c}function s(o){const l=o.target;l.removeEventListener("dispose",s);const c=e.get(l);c!==void 0&&(e.delete(l),c.dispose())}function r(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:r}}function Zp(a){const e={};function t(n){if(e[n]!==void 0)return e[n];let i;switch(n){case"WEBGL_depth_texture":i=a.getExtension("WEBGL_depth_texture")||a.getExtension("MOZ_WEBGL_depth_texture")||a.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=a.getExtension(n)}return e[n]=i,i}return{has:function(n){return t(n)!==null},init:function(n){n.isWebGL2?t("EXT_color_buffer_float"):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float")},get:function(n){const i=t(n);return i===null&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function $p(a,e,t,n){const i={},s=new WeakMap;function r(u){const d=u.target;d.index!==null&&e.remove(d.index);for(const g in d.attributes)e.remove(d.attributes[g]);d.removeEventListener("dispose",r),delete i[d.id];const p=s.get(d);p&&(e.remove(p),s.delete(d)),n.releaseStatesOfGeometry(d),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,t.memory.geometries--}function o(u,d){return i[d.id]===!0||(d.addEventListener("dispose",r),i[d.id]=!0,t.memory.geometries++),d}function l(u){const d=u.attributes;for(const g in d)e.update(d[g],34962);const p=u.morphAttributes;for(const g in p){const y=p[g];for(let v=0,f=y.length;v<f;v++)e.update(y[v],34962)}}function c(u){const d=[],p=u.index,g=u.attributes.position;let y=0;if(p!==null){const m=p.array;y=p.version;for(let E=0,_=m.length;E<_;E+=3){const T=m[E+0],C=m[E+1],x=m[E+2];d.push(T,C,C,x,x,T)}}else{const m=g.array;y=g.version;for(let E=0,_=m.length/3-1;E<_;E+=3){const T=E+0,C=E+1,x=E+2;d.push(T,C,C,x,x,T)}}const v=new(ul(d)>65535?ml:fl)(d,1);v.version=y;const f=s.get(u);f&&e.remove(f),s.set(u,v)}function h(u){const d=s.get(u);if(d){const p=u.index;p!==null&&d.version<p.version&&c(u)}else c(u);return s.get(u)}return{get:o,update:l,getWireframeAttribute:h}}function jp(a,e,t,n){const i=n.isWebGL2;let s;function r(d){s=d}let o,l;function c(d){o=d.type,l=d.bytesPerElement}function h(d,p){a.drawElements(s,p,o,d*l),t.update(p,s,1)}function u(d,p,g){if(g===0)return;let y,v;if(i)y=a,v="drawElementsInstanced";else if(y=e.get("ANGLE_instanced_arrays"),v="drawElementsInstancedANGLE",y===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}y[v](s,p,o,d*l,g),t.update(p,s,g)}this.setMode=r,this.setIndex=c,this.render=h,this.renderInstances=u}function Jp(a){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,r,o){switch(t.calls++,r){case 4:t.triangles+=o*(s/3);break;case 1:t.lines+=o*(s/2);break;case 3:t.lines+=o*(s-1);break;case 2:t.lines+=o*s;break;case 0:t.points+=o*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",r);break}}function i(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:i,update:n}}class ca extends st{constructor(e=null,t=1,n=1,i=1){super(null),this.image={data:e,width:t,height:n,depth:i},this.magFilter=et,this.minFilter=et,this.wrapR=xt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}ca.prototype.isDataTexture2DArray=!0;function Qp(a,e){return a[0]-e[0]}function Kp(a,e){return Math.abs(e[1])-Math.abs(a[1])}function uo(a,e){let t=1;const n=e.isInterleavedBufferAttribute?e.data.array:e.array;n instanceof Int8Array?t=127:n instanceof Int16Array?t=32767:n instanceof Int32Array?t=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",n),a.divideScalar(t)}function ef(a,e,t){const n={},i=new Float32Array(8),s=new WeakMap,r=new w,o=[];for(let c=0;c<8;c++)o[c]=[c,0];function l(c,h,u,d){const p=c.morphTargetInfluences;if(e.isWebGL2===!0){const g=h.morphAttributes.position.length;let y=s.get(h);if(y===void 0||y.count!==g){y!==void 0&&y.texture.dispose();const m=h.morphAttributes.normal!==void 0,E=h.morphAttributes.position,_=h.morphAttributes.normal||[],T=h.attributes.position.count,C=m===!0?2:1;let x=T*C,R=1;x>e.maxTextureSize&&(R=Math.ceil(x/e.maxTextureSize),x=e.maxTextureSize);const W=new Float32Array(x*R*4*g),N=new ca(W,x,R,g);N.format=ut,N.type=tn;const A=C*4;for(let $=0;$<g;$++){const I=E[$],D=_[$],k=x*R*4*$;for(let U=0;U<I.count;U++){r.fromBufferAttribute(I,U),I.normalized===!0&&uo(r,I);const B=U*A;W[k+B+0]=r.x,W[k+B+1]=r.y,W[k+B+2]=r.z,W[k+B+3]=0,m===!0&&(r.fromBufferAttribute(D,U),D.normalized===!0&&uo(r,D),W[k+B+4]=r.x,W[k+B+5]=r.y,W[k+B+6]=r.z,W[k+B+7]=0)}}y={count:g,texture:N,size:new Y(x,R)},s.set(h,y)}let v=0;for(let m=0;m<p.length;m++)v+=p[m];const f=h.morphTargetsRelative?1:1-v;d.getUniforms().setValue(a,"morphTargetBaseInfluence",f),d.getUniforms().setValue(a,"morphTargetInfluences",p),d.getUniforms().setValue(a,"morphTargetsTexture",y.texture,t),d.getUniforms().setValue(a,"morphTargetsTextureSize",y.size)}else{const g=p===void 0?0:p.length;let y=n[h.id];if(y===void 0||y.length!==g){y=[];for(let _=0;_<g;_++)y[_]=[_,0];n[h.id]=y}for(let _=0;_<g;_++){const T=y[_];T[0]=_,T[1]=p[_]}y.sort(Kp);for(let _=0;_<8;_++)_<g&&y[_][1]?(o[_][0]=y[_][0],o[_][1]=y[_][1]):(o[_][0]=Number.MAX_SAFE_INTEGER,o[_][1]=0);o.sort(Qp);const v=h.morphAttributes.position,f=h.morphAttributes.normal;let m=0;for(let _=0;_<8;_++){const T=o[_],C=T[0],x=T[1];C!==Number.MAX_SAFE_INTEGER&&x?(v&&h.getAttribute("morphTarget"+_)!==v[C]&&h.setAttribute("morphTarget"+_,v[C]),f&&h.getAttribute("morphNormal"+_)!==f[C]&&h.setAttribute("morphNormal"+_,f[C]),i[_]=x,m+=x):(v&&h.hasAttribute("morphTarget"+_)===!0&&h.deleteAttribute("morphTarget"+_),f&&h.hasAttribute("morphNormal"+_)===!0&&h.deleteAttribute("morphNormal"+_),i[_]=0)}const E=h.morphTargetsRelative?1:1-m;d.getUniforms().setValue(a,"morphTargetBaseInfluence",E),d.getUniforms().setValue(a,"morphTargetInfluences",i)}}return{update:l}}function tf(a,e,t,n){let i=new WeakMap;function s(l){const c=n.render.frame,h=l.geometry,u=e.get(l,h);return i.get(u)!==c&&(e.update(u),i.set(u,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",o)===!1&&l.addEventListener("dispose",o),t.update(l.instanceMatrix,34962),l.instanceColor!==null&&t.update(l.instanceColor,34962)),u}function r(){i=new WeakMap}function o(l){const c=l.target;c.removeEventListener("dispose",o),t.remove(c.instanceMatrix),c.instanceColor!==null&&t.remove(c.instanceColor)}return{update:s,dispose:r}}class _l extends st{constructor(e=null,t=1,n=1,i=1){super(null),this.image={data:e,width:t,height:n,depth:i},this.magFilter=et,this.minFilter=et,this.wrapR=xt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}_l.prototype.isDataTexture3D=!0;const Ml=new st,nf=new ca,sf=new _l,bl=new Xs,po=[],fo=[],mo=new Float32Array(16),go=new Float32Array(9),yo=new Float32Array(4);function ui(a,e,t){const n=a[0];if(n<=0||n>0)return a;const i=e*t;let s=po[i];if(s===void 0&&(s=new Float32Array(i),po[i]=s),e!==0){n.toArray(s,0);for(let r=1,o=0;r!==e;++r)o+=t,a[r].toArray(s,o)}return s}function pt(a,e){if(a.length!==e.length)return!1;for(let t=0,n=a.length;t<n;t++)if(a[t]!==e[t])return!1;return!0}function ct(a,e){for(let t=0,n=e.length;t<n;t++)a[t]=e[t]}function wl(a,e){let t=fo[e];t===void 0&&(t=new Int32Array(e),fo[e]=t);for(let n=0;n!==e;++n)t[n]=a.allocateTextureUnit();return t}function rf(a,e){const t=this.cache;t[0]!==e&&(a.uniform1f(this.addr,e),t[0]=e)}function af(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(a.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(pt(t,e))return;a.uniform2fv(this.addr,e),ct(t,e)}}function of(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(a.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(a.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(pt(t,e))return;a.uniform3fv(this.addr,e),ct(t,e)}}function lf(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(a.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(pt(t,e))return;a.uniform4fv(this.addr,e),ct(t,e)}}function cf(a,e){const t=this.cache,n=e.elements;if(n===void 0){if(pt(t,e))return;a.uniformMatrix2fv(this.addr,!1,e),ct(t,e)}else{if(pt(t,n))return;yo.set(n),a.uniformMatrix2fv(this.addr,!1,yo),ct(t,n)}}function hf(a,e){const t=this.cache,n=e.elements;if(n===void 0){if(pt(t,e))return;a.uniformMatrix3fv(this.addr,!1,e),ct(t,e)}else{if(pt(t,n))return;go.set(n),a.uniformMatrix3fv(this.addr,!1,go),ct(t,n)}}function uf(a,e){const t=this.cache,n=e.elements;if(n===void 0){if(pt(t,e))return;a.uniformMatrix4fv(this.addr,!1,e),ct(t,e)}else{if(pt(t,n))return;mo.set(n),a.uniformMatrix4fv(this.addr,!1,mo),ct(t,n)}}function df(a,e){const t=this.cache;t[0]!==e&&(a.uniform1i(this.addr,e),t[0]=e)}function pf(a,e){const t=this.cache;pt(t,e)||(a.uniform2iv(this.addr,e),ct(t,e))}function ff(a,e){const t=this.cache;pt(t,e)||(a.uniform3iv(this.addr,e),ct(t,e))}function mf(a,e){const t=this.cache;pt(t,e)||(a.uniform4iv(this.addr,e),ct(t,e))}function gf(a,e){const t=this.cache;t[0]!==e&&(a.uniform1ui(this.addr,e),t[0]=e)}function yf(a,e){const t=this.cache;pt(t,e)||(a.uniform2uiv(this.addr,e),ct(t,e))}function vf(a,e){const t=this.cache;pt(t,e)||(a.uniform3uiv(this.addr,e),ct(t,e))}function xf(a,e){const t=this.cache;pt(t,e)||(a.uniform4uiv(this.addr,e),ct(t,e))}function _f(a,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(a.uniform1i(this.addr,i),n[0]=i),t.safeSetTexture2D(e||Ml,i)}function Mf(a,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(a.uniform1i(this.addr,i),n[0]=i),t.setTexture3D(e||sf,i)}function bf(a,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(a.uniform1i(this.addr,i),n[0]=i),t.safeSetTextureCube(e||bl,i)}function wf(a,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(a.uniform1i(this.addr,i),n[0]=i),t.setTexture2DArray(e||nf,i)}function Sf(a){switch(a){case 5126:return rf;case 35664:return af;case 35665:return of;case 35666:return lf;case 35674:return cf;case 35675:return hf;case 35676:return uf;case 5124:case 35670:return df;case 35667:case 35671:return pf;case 35668:case 35672:return ff;case 35669:case 35673:return mf;case 5125:return gf;case 36294:return yf;case 36295:return vf;case 36296:return xf;case 35678:case 36198:case 36298:case 36306:case 35682:return _f;case 35679:case 36299:case 36307:return Mf;case 35680:case 36300:case 36308:case 36293:return bf;case 36289:case 36303:case 36311:case 36292:return wf}}function Ef(a,e){a.uniform1fv(this.addr,e)}function Tf(a,e){const t=ui(e,this.size,2);a.uniform2fv(this.addr,t)}function Cf(a,e){const t=ui(e,this.size,3);a.uniform3fv(this.addr,t)}function Af(a,e){const t=ui(e,this.size,4);a.uniform4fv(this.addr,t)}function Lf(a,e){const t=ui(e,this.size,4);a.uniformMatrix2fv(this.addr,!1,t)}function Rf(a,e){const t=ui(e,this.size,9);a.uniformMatrix3fv(this.addr,!1,t)}function Pf(a,e){const t=ui(e,this.size,16);a.uniformMatrix4fv(this.addr,!1,t)}function Df(a,e){a.uniform1iv(this.addr,e)}function If(a,e){a.uniform2iv(this.addr,e)}function Uf(a,e){a.uniform3iv(this.addr,e)}function Nf(a,e){a.uniform4iv(this.addr,e)}function Ff(a,e){a.uniform1uiv(this.addr,e)}function kf(a,e){a.uniform2uiv(this.addr,e)}function Bf(a,e){a.uniform3uiv(this.addr,e)}function zf(a,e){a.uniform4uiv(this.addr,e)}function Gf(a,e,t){const n=e.length,i=wl(t,n);a.uniform1iv(this.addr,i);for(let s=0;s!==n;++s)t.safeSetTexture2D(e[s]||Ml,i[s])}function Of(a,e,t){const n=e.length,i=wl(t,n);a.uniform1iv(this.addr,i);for(let s=0;s!==n;++s)t.safeSetTextureCube(e[s]||bl,i[s])}function Hf(a){switch(a){case 5126:return Ef;case 35664:return Tf;case 35665:return Cf;case 35666:return Af;case 35674:return Lf;case 35675:return Rf;case 35676:return Pf;case 5124:case 35670:return Df;case 35667:case 35671:return If;case 35668:case 35672:return Uf;case 35669:case 35673:return Nf;case 5125:return Ff;case 36294:return kf;case 36295:return Bf;case 36296:return zf;case 35678:case 36198:case 36298:case 36306:case 35682:return Gf;case 35680:case 36300:case 36308:case 36293:return Of}}function Vf(a,e,t){this.id=a,this.addr=t,this.cache=[],this.setValue=Sf(e.type)}function Sl(a,e,t){this.id=a,this.addr=t,this.cache=[],this.size=e.size,this.setValue=Hf(e.type)}Sl.prototype.updateCache=function(a){const e=this.cache;a instanceof Float32Array&&e.length!==a.length&&(this.cache=new Float32Array(a.length)),ct(e,a)};function El(a){this.id=a,this.seq=[],this.map={}}El.prototype.setValue=function(a,e,t){const n=this.seq;for(let i=0,s=n.length;i!==s;++i){const r=n[i];r.setValue(a,e[r.id],t)}};const Pr=/(\w+)(\])?(\[|\.)?/g;function vo(a,e){a.seq.push(e),a.map[e.id]=e}function Wf(a,e,t){const n=a.name,i=n.length;for(Pr.lastIndex=0;;){const s=Pr.exec(n),r=Pr.lastIndex;let o=s[1];const l=s[2]==="]",c=s[3];if(l&&(o=o|0),c===void 0||c==="["&&r+2===i){vo(t,c===void 0?new Vf(o,a,e):new Sl(o,a,e));break}else{let u=t.map[o];u===void 0&&(u=new El(o),vo(t,u)),t=u}}}function an(a,e){this.seq=[],this.map={};const t=a.getProgramParameter(e,35718);for(let n=0;n<t;++n){const i=a.getActiveUniform(e,n),s=a.getUniformLocation(e,i.name);Wf(i,s,this)}}an.prototype.setValue=function(a,e,t,n){const i=this.map[e];i!==void 0&&i.setValue(a,t,n)};an.prototype.setOptional=function(a,e,t){const n=e[t];n!==void 0&&this.setValue(a,t,n)};an.upload=function(a,e,t,n){for(let i=0,s=e.length;i!==s;++i){const r=e[i],o=t[r.id];o.needsUpdate!==!1&&r.setValue(a,o.value,n)}};an.seqWithValue=function(a,e){const t=[];for(let n=0,i=a.length;n!==i;++n){const s=a[n];s.id in e&&t.push(s)}return t};function xo(a,e,t){const n=a.createShader(e);return a.shaderSource(n,t),a.compileShader(n),n}let qf=0;function Xf(a){const e=a.split(`
`);for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join(`
`)}function Tl(a){switch(a){case lt:return["Linear","( value )"];case Cn:return["sRGB","( value )"];case sa:return["RGBE","( value )"];case ll:return["RGBM","( value, 7.0 )"];case cl:return["RGBM","( value, 16.0 )"];case hl:return["RGBD","( value, 256.0 )"];case ia:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case kh:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",a),["Linear","( value )"]}}function _o(a,e,t){const n=a.getShaderParameter(e,35713),i=a.getShaderInfoLog(e).trim();return n&&i===""?"":t.toUpperCase()+`

`+i+`

`+Xf(a.getShaderSource(e))}function Mn(a,e){const t=Tl(e);return"vec4 "+a+"( vec4 value ) { return "+t[0]+"ToLinear"+t[1]+"; }"}function Yf(a,e){const t=Tl(e);return"vec4 "+a+"( vec4 value ) { return LinearTo"+t[0]+t[1]+"; }"}function Zf(a,e){let t;switch(e){case Nc:t="Linear";break;case Fc:t="Reinhard";break;case kc:t="OptimizedCineon";break;case Bc:t="ACESFilmic";break;case zc:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+a+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function $f(a){return[a.extensionDerivatives||a.envMapCubeUV||a.bumpMap||a.tangentSpaceNormalMap||a.clearcoatNormalMap||a.flatShading||a.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(a.extensionFragDepth||a.logarithmicDepthBuffer)&&a.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",a.extensionDrawBuffers&&a.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(a.extensionShaderTextureLOD||a.envMap||a.transmission)&&a.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Ri).join(`
`)}function jf(a){const e=[];for(const t in a){const n=a[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function Jf(a,e){const t={},n=a.getProgramParameter(e,35721);for(let i=0;i<n;i++){const s=a.getActiveAttrib(e,i),r=s.name;let o=1;s.type===35674&&(o=2),s.type===35675&&(o=3),s.type===35676&&(o=4),t[r]={type:s.type,location:a.getAttribLocation(e,r),locationSize:o}}return t}function Ri(a){return a!==""}function Mo(a,e){return a.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function bo(a,e){return a.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Qf=/^[ \t]*#include +<([\w\d./]+)>/gm;function Zr(a){return a.replace(Qf,Kf)}function Kf(a,e){const t=Re[e];if(t===void 0)throw new Error("Can not resolve #include <"+e+">");return Zr(t)}const em=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,tm=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function wo(a){return a.replace(tm,Cl).replace(em,nm)}function nm(a,e,t,n){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),Cl(a,e,t,n)}function Cl(a,e,t,n){let i="";for(let s=parseInt(e);s<parseInt(t);s++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return i}function So(a){let e="precision "+a.precision+` float;
precision `+a.precision+" int;";return a.precision==="highp"?e+=`
#define HIGH_PRECISION`:a.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:a.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function im(a){let e="SHADOWMAP_TYPE_BASIC";return a.shadowMapType===nl?e="SHADOWMAP_TYPE_PCF":a.shadowMapType===pc?e="SHADOWMAP_TYPE_PCF_SOFT":a.shadowMapType===Li&&(e="SHADOWMAP_TYPE_VSM"),e}function sm(a){let e="ENVMAP_TYPE_CUBE";if(a.envMap)switch(a.envMapMode){case qi:case Xi:e="ENVMAP_TYPE_CUBE";break;case Vs:case ta:e="ENVMAP_TYPE_CUBE_UV";break}return e}function rm(a){let e="ENVMAP_MODE_REFLECTION";if(a.envMap)switch(a.envMapMode){case Xi:case ta:e="ENVMAP_MODE_REFRACTION";break}return e}function am(a){let e="ENVMAP_BLENDING_NONE";if(a.envMap)switch(a.combine){case Hs:e="ENVMAP_BLENDING_MULTIPLY";break;case Ic:e="ENVMAP_BLENDING_MIX";break;case Uc:e="ENVMAP_BLENDING_ADD";break}return e}function om(a,e,t,n){const i=a.getContext(),s=t.defines;let r=t.vertexShader,o=t.fragmentShader;const l=im(t),c=sm(t),h=rm(t),u=am(t),d=a.gammaFactor>0?a.gammaFactor:1,p=t.isWebGL2?"":$f(t),g=jf(s),y=i.createProgram();let v,f,m=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(v=[g].filter(Ri).join(`
`),v.length>0&&(v+=`
`),f=[p,g].filter(Ri).join(`
`),f.length>0&&(f+=`
`)):(v=[So(t),"#define SHADER_NAME "+t.shaderName,g,t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+d,"#define MAX_BONES "+t.maxBones,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+h:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.displacementMap&&t.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",t.specularColorMap?"#define USE_SPECULARCOLORMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEENCOLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.useVertexTexture?"#define BONE_TEXTURE":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphTargets&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargets&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Ri).join(`
`),f=[p,So(t),"#define SHADER_NAME "+t.shaderName,g,"#define GAMMA_FACTOR "+d,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+c:"",t.envMap?"#define "+h:"",t.envMap?"#define "+u:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",t.specularColorMap?"#define USE_SPECULARCOLORMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEENCOLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(t.extensionShaderTextureLOD||t.envMap)&&t.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==En?"#define TONE_MAPPING":"",t.toneMapping!==En?Re.tonemapping_pars_fragment:"",t.toneMapping!==En?Zf("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.format===Kn?"#define OPAQUE":"",Re.encodings_pars_fragment,t.map?Mn("mapTexelToLinear",t.mapEncoding):"",t.matcap?Mn("matcapTexelToLinear",t.matcapEncoding):"",t.envMap?Mn("envMapTexelToLinear",t.envMapEncoding):"",t.emissiveMap?Mn("emissiveMapTexelToLinear",t.emissiveMapEncoding):"",t.specularColorMap?Mn("specularColorMapTexelToLinear",t.specularColorMapEncoding):"",t.sheenColorMap?Mn("sheenColorMapTexelToLinear",t.sheenColorMapEncoding):"",t.lightMap?Mn("lightMapTexelToLinear",t.lightMapEncoding):"",Yf("linearToOutputTexel",t.outputEncoding),t.depthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(Ri).join(`
`)),r=Zr(r),r=Mo(r,t),r=bo(r,t),o=Zr(o),o=Mo(o,t),o=bo(o,t),r=wo(r),o=wo(o),t.isWebGL2&&t.isRawShaderMaterial!==!0&&(m=`#version 300 es
`,v=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+v,f=["#define varying in",t.glslVersion===qa?"":"out highp vec4 pc_fragColor;",t.glslVersion===qa?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+f);const E=m+v+r,_=m+f+o,T=xo(i,35633,E),C=xo(i,35632,_);if(i.attachShader(y,T),i.attachShader(y,C),t.index0AttributeName!==void 0?i.bindAttribLocation(y,0,t.index0AttributeName):t.morphTargets===!0&&i.bindAttribLocation(y,0,"position"),i.linkProgram(y),a.debug.checkShaderErrors){const W=i.getProgramInfoLog(y).trim(),N=i.getShaderInfoLog(T).trim(),A=i.getShaderInfoLog(C).trim();let $=!0,I=!0;if(i.getProgramParameter(y,35714)===!1){$=!1;const D=_o(i,T,"vertex"),k=_o(i,C,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(y,35715)+`

Program Info Log: `+W+`
`+D+`
`+k)}else W!==""?console.warn("THREE.WebGLProgram: Program Info Log:",W):(N===""||A==="")&&(I=!1);I&&(this.diagnostics={runnable:$,programLog:W,vertexShader:{log:N,prefix:v},fragmentShader:{log:A,prefix:f}})}i.deleteShader(T),i.deleteShader(C);let x;this.getUniforms=function(){return x===void 0&&(x=new an(i,y)),x};let R;return this.getAttributes=function(){return R===void 0&&(R=Jf(i,y)),R},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(y),this.program=void 0},this.name=t.shaderName,this.id=qf++,this.cacheKey=e,this.usedTimes=1,this.program=y,this.vertexShader=T,this.fragmentShader=C,this}function lm(a,e,t,n,i,s,r){const o=[],l=i.isWebGL2,c=i.logarithmicDepthBuffer,h=i.floatVertexTextures,u=i.maxVertexUniforms,d=i.vertexTextures;let p=i.precision;const g={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},y=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoat","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap",,"roughnessMap","metalnessMap","gradientMap","alphaMap","alphaTest","combine","vertexColors","vertexAlphas","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","morphTargetsCount","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","format","specularIntensityMap","specularColorMap","specularColorMapEncoding","transmission","transmissionMap","thicknessMap","sheen","sheenColorMap","sheenColorMapEncoding","sheenRoughnessMap"];function v(x){const W=x.skeleton.bones;if(h)return 1024;{const A=Math.floor((u-20)/4),$=Math.min(A,W.length);return $<W.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+W.length+" bones. This GPU supports "+$+"."),0):$}}function f(x){let R;return x&&x.isTexture?R=x.encoding:x&&x.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),R=x.texture.encoding):R=lt,l&&x&&x.isTexture&&x.format===ut&&x.type===ln&&x.encoding===Cn&&(R=lt),R}function m(x,R,W,N,A){const $=N.fog,I=x.isMeshStandardMaterial?N.environment:null,D=(x.isMeshStandardMaterial?t:e).get(x.envMap||I),k=g[x.type],U=A.isSkinnedMesh?v(A):0;x.precision!==null&&(p=i.getMaxPrecision(x.precision),p!==x.precision&&console.warn("THREE.WebGLProgram.getParameters:",x.precision,"not supported, using",p,"instead."));let B,K;if(k){const X=Pt[k];B=X.vertexShader,K=X.fragmentShader}else B=x.vertexShader,K=x.fragmentShader;const le=a.getRenderTarget(),ye=x.alphaTest>0,se=x.clearcoat>0;return{isWebGL2:l,shaderID:k,shaderName:x.type,vertexShader:B,fragmentShader:K,defines:x.defines,isRawShaderMaterial:x.isRawShaderMaterial===!0,glslVersion:x.glslVersion,precision:p,instancing:A.isInstancedMesh===!0,instancingColor:A.isInstancedMesh===!0&&A.instanceColor!==null,supportsVertexTextures:d,outputEncoding:le!==null?f(le.texture):a.outputEncoding,map:!!x.map,mapEncoding:f(x.map),matcap:!!x.matcap,matcapEncoding:f(x.matcap),envMap:!!D,envMapMode:D&&D.mapping,envMapEncoding:f(D),envMapCubeUV:!!D&&(D.mapping===Vs||D.mapping===ta),lightMap:!!x.lightMap,lightMapEncoding:f(x.lightMap),aoMap:!!x.aoMap,emissiveMap:!!x.emissiveMap,emissiveMapEncoding:f(x.emissiveMap),bumpMap:!!x.bumpMap,normalMap:!!x.normalMap,objectSpaceNormalMap:x.normalMapType===Gh,tangentSpaceNormalMap:x.normalMapType===ai,clearcoat:se,clearcoatMap:se&&!!x.clearcoatMap,clearcoatRoughnessMap:se&&!!x.clearcoatRoughnessMap,clearcoatNormalMap:se&&!!x.clearcoatNormalMap,displacementMap:!!x.displacementMap,roughnessMap:!!x.roughnessMap,metalnessMap:!!x.metalnessMap,specularMap:!!x.specularMap,specularIntensityMap:!!x.specularIntensityMap,specularColorMap:!!x.specularColorMap,specularColorMapEncoding:f(x.specularColorMap),alphaMap:!!x.alphaMap,alphaTest:ye,gradientMap:!!x.gradientMap,sheen:x.sheen>0,sheenColorMap:!!x.sheenColorMap,sheenColorMapEncoding:f(x.sheenColorMap),sheenRoughnessMap:!!x.sheenRoughnessMap,transmission:x.transmission>0,transmissionMap:!!x.transmissionMap,thicknessMap:!!x.thicknessMap,combine:x.combine,vertexTangents:!!x.normalMap&&!!A.geometry&&!!A.geometry.attributes.tangent,vertexColors:x.vertexColors,vertexAlphas:x.vertexColors===!0&&!!A.geometry&&!!A.geometry.attributes.color&&A.geometry.attributes.color.itemSize===4,vertexUvs:!!x.map||!!x.bumpMap||!!x.normalMap||!!x.specularMap||!!x.alphaMap||!!x.emissiveMap||!!x.roughnessMap||!!x.metalnessMap||!!x.clearcoatMap||!!x.clearcoatRoughnessMap||!!x.clearcoatNormalMap||!!x.displacementMap||!!x.transmissionMap||!!x.thicknessMap||!!x.specularIntensityMap||!!x.specularColorMap||!!x.sheenColorMap||x.sheenRoughnessMap,uvsVertexOnly:!(x.map||x.bumpMap||x.normalMap||x.specularMap||x.alphaMap||x.emissiveMap||x.roughnessMap||x.metalnessMap||x.clearcoatNormalMap||x.transmission>0||x.transmissionMap||x.thicknessMap||x.specularIntensityMap||x.specularColorMap||!!x.sheen>0||x.sheenColorMap||x.sheenRoughnessMap)&&!!x.displacementMap,fog:!!$,useFog:x.fog,fogExp2:$&&$.isFogExp2,flatShading:!!x.flatShading,sizeAttenuation:x.sizeAttenuation,logarithmicDepthBuffer:c,skinning:A.isSkinnedMesh===!0&&U>0,maxBones:U,useVertexTexture:h,morphTargets:!!A.geometry&&!!A.geometry.morphAttributes.position,morphNormals:!!A.geometry&&!!A.geometry.morphAttributes.normal,morphTargetsCount:A.geometry&&A.geometry.morphAttributes.position?A.geometry.morphAttributes.position.length:0,numDirLights:R.directional.length,numPointLights:R.point.length,numSpotLights:R.spot.length,numRectAreaLights:R.rectArea.length,numHemiLights:R.hemi.length,numDirLightShadows:R.directionalShadowMap.length,numPointLightShadows:R.pointShadowMap.length,numSpotLightShadows:R.spotShadowMap.length,numClippingPlanes:r.numPlanes,numClipIntersection:r.numIntersection,format:x.format,dithering:x.dithering,shadowMapEnabled:a.shadowMap.enabled&&W.length>0,shadowMapType:a.shadowMap.type,toneMapping:x.toneMapped?a.toneMapping:En,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:x.premultipliedAlpha,doubleSided:x.side===ni,flipSided:x.side===je,depthPacking:x.depthPacking!==void 0?x.depthPacking:!1,index0AttributeName:x.index0AttributeName,extensionDerivatives:x.extensions&&x.extensions.derivatives,extensionFragDepth:x.extensions&&x.extensions.fragDepth,extensionDrawBuffers:x.extensions&&x.extensions.drawBuffers,extensionShaderTextureLOD:x.extensions&&x.extensions.shaderTextureLOD,rendererExtensionFragDepth:l||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:l||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:l||n.has("EXT_shader_texture_lod"),customProgramCacheKey:x.customProgramCacheKey()}}function E(x){const R=[];if(x.shaderID?R.push(x.shaderID):(R.push(Ya(x.fragmentShader)),R.push(Ya(x.vertexShader))),x.defines!==void 0)for(const W in x.defines)R.push(W),R.push(x.defines[W]);if(x.isRawShaderMaterial===!1){for(let W=0;W<y.length;W++)R.push(x[y[W]]);R.push(a.outputEncoding),R.push(a.gammaFactor)}return R.push(x.customProgramCacheKey),R.join()}function _(x){const R=g[x.type];let W;if(R){const N=Pt[R];W=ru.clone(N.uniforms)}else W=x.uniforms;return W}function T(x,R){let W;for(let N=0,A=o.length;N<A;N++){const $=o[N];if($.cacheKey===R){W=$,++W.usedTimes;break}}return W===void 0&&(W=new om(a,R,x,s),o.push(W)),W}function C(x){if(--x.usedTimes===0){const R=o.indexOf(x);o[R]=o[o.length-1],o.pop(),x.destroy()}}return{getParameters:m,getProgramCacheKey:E,getUniforms:_,acquireProgram:T,releaseProgram:C,programs:o}}function cm(){let a=new WeakMap;function e(s){let r=a.get(s);return r===void 0&&(r={},a.set(s,r)),r}function t(s){a.delete(s)}function n(s,r,o){a.get(s)[r]=o}function i(){a=new WeakMap}return{get:e,remove:t,update:n,dispose:i}}function hm(a,e){return a.groupOrder!==e.groupOrder?a.groupOrder-e.groupOrder:a.renderOrder!==e.renderOrder?a.renderOrder-e.renderOrder:a.program!==e.program?a.program.id-e.program.id:a.material.id!==e.material.id?a.material.id-e.material.id:a.z!==e.z?a.z-e.z:a.id-e.id}function Eo(a,e){return a.groupOrder!==e.groupOrder?a.groupOrder-e.groupOrder:a.renderOrder!==e.renderOrder?a.renderOrder-e.renderOrder:a.z!==e.z?e.z-a.z:a.id-e.id}function To(a){const e=[];let t=0;const n=[],i=[],s=[],r={id:-1};function o(){t=0,n.length=0,i.length=0,s.length=0}function l(p,g,y,v,f,m){let E=e[t];const _=a.get(y);return E===void 0?(E={id:p.id,object:p,geometry:g,material:y,program:_.program||r,groupOrder:v,renderOrder:p.renderOrder,z:f,group:m},e[t]=E):(E.id=p.id,E.object=p,E.geometry=g,E.material=y,E.program=_.program||r,E.groupOrder=v,E.renderOrder=p.renderOrder,E.z=f,E.group=m),t++,E}function c(p,g,y,v,f,m){const E=l(p,g,y,v,f,m);y.transmission>0?i.push(E):y.transparent===!0?s.push(E):n.push(E)}function h(p,g,y,v,f,m){const E=l(p,g,y,v,f,m);y.transmission>0?i.unshift(E):y.transparent===!0?s.unshift(E):n.unshift(E)}function u(p,g){n.length>1&&n.sort(p||hm),i.length>1&&i.sort(g||Eo),s.length>1&&s.sort(g||Eo)}function d(){for(let p=t,g=e.length;p<g;p++){const y=e[p];if(y.id===null)break;y.id=null,y.object=null,y.geometry=null,y.material=null,y.program=null,y.group=null}}return{opaque:n,transmissive:i,transparent:s,init:o,push:c,unshift:h,finish:d,sort:u}}function um(a){let e=new WeakMap;function t(i,s){let r;return e.has(i)===!1?(r=new To(a),e.set(i,[r])):s>=e.get(i).length?(r=new To(a),e.get(i).push(r)):r=e.get(i)[s],r}function n(){e=new WeakMap}return{get:t,dispose:n}}function dm(){const a={};return{get:function(e){if(a[e.id]!==void 0)return a[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new w,color:new de};break;case"SpotLight":t={position:new w,direction:new w,color:new de,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new w,color:new de,distance:0,decay:0};break;case"HemisphereLight":t={direction:new w,skyColor:new de,groundColor:new de};break;case"RectAreaLight":t={color:new de,position:new w,halfWidth:new w,halfHeight:new w};break}return a[e.id]=t,t}}}function pm(){const a={};return{get:function(e){if(a[e.id]!==void 0)return a[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Y};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Y};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Y,shadowCameraNear:1,shadowCameraFar:1e3};break}return a[e.id]=t,t}}}let fm=0;function mm(a,e){return(e.castShadow?1:0)-(a.castShadow?1:0)}function gm(a,e){const t=new dm,n=pm(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let h=0;h<9;h++)i.probe.push(new w);const s=new w,r=new xe,o=new xe;function l(h,u){let d=0,p=0,g=0;for(let W=0;W<9;W++)i.probe[W].set(0,0,0);let y=0,v=0,f=0,m=0,E=0,_=0,T=0,C=0;h.sort(mm);const x=u!==!0?Math.PI:1;for(let W=0,N=h.length;W<N;W++){const A=h[W],$=A.color,I=A.intensity,D=A.distance,k=A.shadow&&A.shadow.map?A.shadow.map.texture:null;if(A.isAmbientLight)d+=$.r*I*x,p+=$.g*I*x,g+=$.b*I*x;else if(A.isLightProbe)for(let U=0;U<9;U++)i.probe[U].addScaledVector(A.sh.coefficients[U],I);else if(A.isDirectionalLight){const U=t.get(A);if(U.color.copy(A.color).multiplyScalar(A.intensity*x),A.castShadow){const B=A.shadow,K=n.get(A);K.shadowBias=B.bias,K.shadowNormalBias=B.normalBias,K.shadowRadius=B.radius,K.shadowMapSize=B.mapSize,i.directionalShadow[y]=K,i.directionalShadowMap[y]=k,i.directionalShadowMatrix[y]=A.shadow.matrix,_++}i.directional[y]=U,y++}else if(A.isSpotLight){const U=t.get(A);if(U.position.setFromMatrixPosition(A.matrixWorld),U.color.copy($).multiplyScalar(I*x),U.distance=D,U.coneCos=Math.cos(A.angle),U.penumbraCos=Math.cos(A.angle*(1-A.penumbra)),U.decay=A.decay,A.castShadow){const B=A.shadow,K=n.get(A);K.shadowBias=B.bias,K.shadowNormalBias=B.normalBias,K.shadowRadius=B.radius,K.shadowMapSize=B.mapSize,i.spotShadow[f]=K,i.spotShadowMap[f]=k,i.spotShadowMatrix[f]=A.shadow.matrix,C++}i.spot[f]=U,f++}else if(A.isRectAreaLight){const U=t.get(A);U.color.copy($).multiplyScalar(I),U.halfWidth.set(A.width*.5,0,0),U.halfHeight.set(0,A.height*.5,0),i.rectArea[m]=U,m++}else if(A.isPointLight){const U=t.get(A);if(U.color.copy(A.color).multiplyScalar(A.intensity*x),U.distance=A.distance,U.decay=A.decay,A.castShadow){const B=A.shadow,K=n.get(A);K.shadowBias=B.bias,K.shadowNormalBias=B.normalBias,K.shadowRadius=B.radius,K.shadowMapSize=B.mapSize,K.shadowCameraNear=B.camera.near,K.shadowCameraFar=B.camera.far,i.pointShadow[v]=K,i.pointShadowMap[v]=k,i.pointShadowMatrix[v]=A.shadow.matrix,T++}i.point[v]=U,v++}else if(A.isHemisphereLight){const U=t.get(A);U.skyColor.copy(A.color).multiplyScalar(I*x),U.groundColor.copy(A.groundColor).multiplyScalar(I*x),i.hemi[E]=U,E++}}m>0&&(e.isWebGL2||a.has("OES_texture_float_linear")===!0?(i.rectAreaLTC1=te.LTC_FLOAT_1,i.rectAreaLTC2=te.LTC_FLOAT_2):a.has("OES_texture_half_float_linear")===!0?(i.rectAreaLTC1=te.LTC_HALF_1,i.rectAreaLTC2=te.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),i.ambient[0]=d,i.ambient[1]=p,i.ambient[2]=g;const R=i.hash;(R.directionalLength!==y||R.pointLength!==v||R.spotLength!==f||R.rectAreaLength!==m||R.hemiLength!==E||R.numDirectionalShadows!==_||R.numPointShadows!==T||R.numSpotShadows!==C)&&(i.directional.length=y,i.spot.length=f,i.rectArea.length=m,i.point.length=v,i.hemi.length=E,i.directionalShadow.length=_,i.directionalShadowMap.length=_,i.pointShadow.length=T,i.pointShadowMap.length=T,i.spotShadow.length=C,i.spotShadowMap.length=C,i.directionalShadowMatrix.length=_,i.pointShadowMatrix.length=T,i.spotShadowMatrix.length=C,R.directionalLength=y,R.pointLength=v,R.spotLength=f,R.rectAreaLength=m,R.hemiLength=E,R.numDirectionalShadows=_,R.numPointShadows=T,R.numSpotShadows=C,i.version=fm++)}function c(h,u){let d=0,p=0,g=0,y=0,v=0;const f=u.matrixWorldInverse;for(let m=0,E=h.length;m<E;m++){const _=h[m];if(_.isDirectionalLight){const T=i.directional[d];T.direction.setFromMatrixPosition(_.matrixWorld),s.setFromMatrixPosition(_.target.matrixWorld),T.direction.sub(s),T.direction.transformDirection(f),d++}else if(_.isSpotLight){const T=i.spot[g];T.position.setFromMatrixPosition(_.matrixWorld),T.position.applyMatrix4(f),T.direction.setFromMatrixPosition(_.matrixWorld),s.setFromMatrixPosition(_.target.matrixWorld),T.direction.sub(s),T.direction.transformDirection(f),g++}else if(_.isRectAreaLight){const T=i.rectArea[y];T.position.setFromMatrixPosition(_.matrixWorld),T.position.applyMatrix4(f),o.identity(),r.copy(_.matrixWorld),r.premultiply(f),o.extractRotation(r),T.halfWidth.set(_.width*.5,0,0),T.halfHeight.set(0,_.height*.5,0),T.halfWidth.applyMatrix4(o),T.halfHeight.applyMatrix4(o),y++}else if(_.isPointLight){const T=i.point[p];T.position.setFromMatrixPosition(_.matrixWorld),T.position.applyMatrix4(f),p++}else if(_.isHemisphereLight){const T=i.hemi[v];T.direction.setFromMatrixPosition(_.matrixWorld),T.direction.transformDirection(f),T.direction.normalize(),v++}}}return{setup:l,setupView:c,state:i}}function Co(a,e){const t=new gm(a,e),n=[],i=[];function s(){n.length=0,i.length=0}function r(u){n.push(u)}function o(u){i.push(u)}function l(u){t.setup(n,u)}function c(u){t.setupView(n,u)}return{init:s,state:{lightsArray:n,shadowsArray:i,lights:t},setupLights:l,setupLightsView:c,pushLight:r,pushShadow:o}}function ym(a,e){let t=new WeakMap;function n(s,r=0){let o;return t.has(s)===!1?(o=new Co(a,e),t.set(s,[o])):r>=t.get(s).length?(o=new Co(a,e),t.get(s).push(o)):o=t.get(s)[r],o}function i(){t=new WeakMap}return{get:n,dispose:i}}class Al extends ht{constructor(e){super(),this.type="MeshDepthMaterial",this.depthPacking=Bh,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}Al.prototype.isMeshDepthMaterial=!0;class Ll extends ht{constructor(e){super(),this.type="MeshDistanceMaterial",this.referencePosition=new w,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(e)}copy(e){return super.copy(e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}Ll.prototype.isMeshDistanceMaterial=!0;const vm=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,xm=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function Rl(a,e,t){let n=new Ys;const i=new Y,s=new Y,r=new ze,o=new Al({depthPacking:zh}),l=new Ll,c={},h=t.maxTextureSize,u={0:je,1:Bi,2:ni},d=new Tn({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Y},radius:{value:4}},vertexShader:vm,fragmentShader:xm}),p=d.clone();p.defines.HORIZONTAL_PASS=1;const g=new Oe;g.setAttribute("position",new Qe(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const y=new oe(g,d),v=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=nl,this.render=function(_,T,C){if(v.enabled===!1||v.autoUpdate===!1&&v.needsUpdate===!1||_.length===0)return;const x=a.getRenderTarget(),R=a.getActiveCubeFace(),W=a.getActiveMipmapLevel(),N=a.state;N.setBlending(sn),N.buffers.color.setClear(1,1,1,1),N.buffers.depth.setTest(!0),N.setScissorTest(!1);for(let A=0,$=_.length;A<$;A++){const I=_[A],D=I.shadow;if(D===void 0){console.warn("THREE.WebGLShadowMap:",I,"has no shadow.");continue}if(D.autoUpdate===!1&&D.needsUpdate===!1)continue;i.copy(D.mapSize);const k=D.getFrameExtents();if(i.multiply(k),s.copy(D.mapSize),(i.x>h||i.y>h)&&(i.x>h&&(s.x=Math.floor(h/k.x),i.x=s.x*k.x,D.mapSize.x=s.x),i.y>h&&(s.y=Math.floor(h/k.y),i.y=s.y*k.y,D.mapSize.y=s.y)),D.map===null&&!D.isPointLightShadow&&this.type===Li){const B={minFilter:Mt,magFilter:Mt,format:ut};D.map=new It(i.x,i.y,B),D.map.texture.name=I.name+".shadowMap",D.mapPass=new It(i.x,i.y,B),D.camera.updateProjectionMatrix()}if(D.map===null){const B={minFilter:et,magFilter:et,format:ut};D.map=new It(i.x,i.y,B),D.map.texture.name=I.name+".shadowMap",D.camera.updateProjectionMatrix()}a.setRenderTarget(D.map),a.clear();const U=D.getViewportCount();for(let B=0;B<U;B++){const K=D.getViewport(B);r.set(s.x*K.x,s.y*K.y,s.x*K.z,s.y*K.w),N.viewport(r),D.updateMatrices(I,B),n=D.getFrustum(),E(T,C,D.camera,I,this.type)}!D.isPointLightShadow&&this.type===Li&&f(D,C),D.needsUpdate=!1}v.needsUpdate=!1,a.setRenderTarget(x,R,W)};function f(_,T){const C=e.update(y);d.defines.VSM_SAMPLES!==_.blurSamples&&(d.defines.VSM_SAMPLES=_.blurSamples,p.defines.VSM_SAMPLES=_.blurSamples,d.needsUpdate=!0,p.needsUpdate=!0),d.uniforms.shadow_pass.value=_.map.texture,d.uniforms.resolution.value=_.mapSize,d.uniforms.radius.value=_.radius,a.setRenderTarget(_.mapPass),a.clear(),a.renderBufferDirect(T,null,C,d,y,null),p.uniforms.shadow_pass.value=_.mapPass.texture,p.uniforms.resolution.value=_.mapSize,p.uniforms.radius.value=_.radius,a.setRenderTarget(_.map),a.clear(),a.renderBufferDirect(T,null,C,p,y,null)}function m(_,T,C,x,R,W,N){let A=null;const $=x.isPointLight===!0?_.customDistanceMaterial:_.customDepthMaterial;if($!==void 0?A=$:A=x.isPointLight===!0?l:o,a.localClippingEnabled&&C.clipShadows===!0&&C.clippingPlanes.length!==0||C.displacementMap&&C.displacementScale!==0||C.alphaMap&&C.alphaTest>0){const I=A.uuid,D=C.uuid;let k=c[I];k===void 0&&(k={},c[I]=k);let U=k[D];U===void 0&&(U=A.clone(),k[D]=U),A=U}return A.visible=C.visible,A.wireframe=C.wireframe,N===Li?A.side=C.shadowSide!==null?C.shadowSide:C.side:A.side=C.shadowSide!==null?C.shadowSide:u[C.side],A.alphaMap=C.alphaMap,A.alphaTest=C.alphaTest,A.clipShadows=C.clipShadows,A.clippingPlanes=C.clippingPlanes,A.clipIntersection=C.clipIntersection,A.displacementMap=C.displacementMap,A.displacementScale=C.displacementScale,A.displacementBias=C.displacementBias,A.wireframeLinewidth=C.wireframeLinewidth,A.linewidth=C.linewidth,x.isPointLight===!0&&A.isMeshDistanceMaterial===!0&&(A.referencePosition.setFromMatrixPosition(x.matrixWorld),A.nearDistance=R,A.farDistance=W),A}function E(_,T,C,x,R){if(_.visible===!1)return;if(_.layers.test(T.layers)&&(_.isMesh||_.isLine||_.isPoints)&&(_.castShadow||_.receiveShadow&&R===Li)&&(!_.frustumCulled||n.intersectsObject(_))){_.modelViewMatrix.multiplyMatrices(C.matrixWorldInverse,_.matrixWorld);const A=e.update(_),$=_.material;if(Array.isArray($)){const I=A.groups;for(let D=0,k=I.length;D<k;D++){const U=I[D],B=$[U.materialIndex];if(B&&B.visible){const K=m(_,A,B,x,C.near,C.far,R);a.renderBufferDirect(C,null,A,K,_,U)}}}else if($.visible){const I=m(_,A,$,x,C.near,C.far,R);a.renderBufferDirect(C,null,A,I,_,null)}}const N=_.children;for(let A=0,$=N.length;A<$;A++)E(N[A],T,C,x,R)}}function _m(a,e,t){const n=t.isWebGL2;function i(){let L=!1;const ie=new ze;let q=null;const me=new ze(0,0,0,0);return{setMask:function(ce){q!==ce&&!L&&(a.colorMask(ce,ce,ce,ce),q=ce)},setLocked:function(ce){L=ce},setClear:function(ce,Pe,rt,at,Wt){Wt===!0&&(ce*=at,Pe*=at,rt*=at),ie.set(ce,Pe,rt,at),me.equals(ie)===!1&&(a.clearColor(ce,Pe,rt,at),me.copy(ie))},reset:function(){L=!1,q=null,me.set(-1,0,0,0)}}}function s(){let L=!1,ie=null,q=null,me=null;return{setTest:function(ce){ce?Q(2929):he(2929)},setMask:function(ce){ie!==ce&&!L&&(a.depthMask(ce),ie=ce)},setFunc:function(ce){if(q!==ce){if(ce)switch(ce){case Tc:a.depthFunc(512);break;case Cc:a.depthFunc(519);break;case Ac:a.depthFunc(513);break;case Hr:a.depthFunc(515);break;case Lc:a.depthFunc(514);break;case Rc:a.depthFunc(518);break;case Pc:a.depthFunc(516);break;case Dc:a.depthFunc(517);break;default:a.depthFunc(515)}else a.depthFunc(515);q=ce}},setLocked:function(ce){L=ce},setClear:function(ce){me!==ce&&(a.clearDepth(ce),me=ce)},reset:function(){L=!1,ie=null,q=null,me=null}}}function r(){let L=!1,ie=null,q=null,me=null,ce=null,Pe=null,rt=null,at=null,Wt=null;return{setTest:function(Ze){L||(Ze?Q(2960):he(2960))},setMask:function(Ze){ie!==Ze&&!L&&(a.stencilMask(Ze),ie=Ze)},setFunc:function(Ze,Ft,St){(q!==Ze||me!==Ft||ce!==St)&&(a.stencilFunc(Ze,Ft,St),q=Ze,me=Ft,ce=St)},setOp:function(Ze,Ft,St){(Pe!==Ze||rt!==Ft||at!==St)&&(a.stencilOp(Ze,Ft,St),Pe=Ze,rt=Ft,at=St)},setLocked:function(Ze){L=Ze},setClear:function(Ze){Wt!==Ze&&(a.clearStencil(Ze),Wt=Ze)},reset:function(){L=!1,ie=null,q=null,me=null,ce=null,Pe=null,rt=null,at=null,Wt=null}}}const o=new i,l=new s,c=new r;let h={},u=null,d={},p=null,g=!1,y=null,v=null,f=null,m=null,E=null,_=null,T=null,C=!1,x=null,R=null,W=null,N=null,A=null;const $=a.getParameter(35661);let I=!1,D=0;const k=a.getParameter(7938);k.indexOf("WebGL")!==-1?(D=parseFloat(/^WebGL (\d)/.exec(k)[1]),I=D>=1):k.indexOf("OpenGL ES")!==-1&&(D=parseFloat(/^OpenGL ES (\d)/.exec(k)[1]),I=D>=2);let U=null,B={};const K=a.getParameter(3088),le=a.getParameter(2978),ye=new ze().fromArray(K),se=new ze().fromArray(le);function Ee(L,ie,q){const me=new Uint8Array(4),ce=a.createTexture();a.bindTexture(L,ce),a.texParameteri(L,10241,9728),a.texParameteri(L,10240,9728);for(let Pe=0;Pe<q;Pe++)a.texImage2D(ie+Pe,0,6408,1,1,0,6408,5121,me);return ce}const X={};X[3553]=Ee(3553,3553,1),X[34067]=Ee(34067,34069,6),o.setClear(0,0,0,1),l.setClear(1),c.setClear(0),Q(2929),l.setFunc(Hr),Z(!1),ee(Ca),Q(2884),Ce(sn);function Q(L){h[L]!==!0&&(a.enable(L),h[L]=!0)}function he(L){h[L]!==!1&&(a.disable(L),h[L]=!1)}function H(L){L!==u&&(a.bindFramebuffer(36160,L),u=L)}function ve(L,ie){return ie===null&&u!==null&&(ie=u),d[L]!==ie?(a.bindFramebuffer(L,ie),d[L]=ie,n&&(L===36009&&(d[36160]=ie),L===36160&&(d[36009]=ie)),!0):!1}function we(L){return p!==L?(a.useProgram(L),p=L,!0):!1}const re={[Zn]:32774,[mc]:32778,[gc]:32779};if(n)re[Pa]=32775,re[Da]=32776;else{const L=e.get("EXT_blend_minmax");L!==null&&(re[Pa]=L.MIN_EXT,re[Da]=L.MAX_EXT)}const ue={[yc]:0,[vc]:1,[xc]:768,[sl]:770,[Ec]:776,[wc]:774,[Mc]:772,[_c]:769,[rl]:771,[Sc]:775,[bc]:773};function Ce(L,ie,q,me,ce,Pe,rt,at){if(L===sn){g===!0&&(he(3042),g=!1);return}if(g===!1&&(Q(3042),g=!0),L!==fc){if(L!==y||at!==C){if((v!==Zn||E!==Zn)&&(a.blendEquation(32774),v=Zn,E=Zn),at)switch(L){case Di:a.blendFuncSeparate(1,771,1,771);break;case Aa:a.blendFunc(1,1);break;case La:a.blendFuncSeparate(0,0,769,771);break;case Ra:a.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",L);break}else switch(L){case Di:a.blendFuncSeparate(770,771,1,771);break;case Aa:a.blendFunc(770,1);break;case La:a.blendFunc(0,769);break;case Ra:a.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",L);break}f=null,m=null,_=null,T=null,y=L,C=at}return}ce=ce||ie,Pe=Pe||q,rt=rt||me,(ie!==v||ce!==E)&&(a.blendEquationSeparate(re[ie],re[ce]),v=ie,E=ce),(q!==f||me!==m||Pe!==_||rt!==T)&&(a.blendFuncSeparate(ue[q],ue[me],ue[Pe],ue[rt]),f=q,m=me,_=Pe,T=rt),y=L,C=null}function O(L,ie){L.side===ni?he(2884):Q(2884);let q=L.side===je;ie&&(q=!q),Z(q),L.blending===Di&&L.transparent===!1?Ce(sn):Ce(L.blending,L.blendEquation,L.blendSrc,L.blendDst,L.blendEquationAlpha,L.blendSrcAlpha,L.blendDstAlpha,L.premultipliedAlpha),l.setFunc(L.depthFunc),l.setTest(L.depthTest),l.setMask(L.depthWrite),o.setMask(L.colorWrite);const me=L.stencilWrite;c.setTest(me),me&&(c.setMask(L.stencilWriteMask),c.setFunc(L.stencilFunc,L.stencilRef,L.stencilFuncMask),c.setOp(L.stencilFail,L.stencilZFail,L.stencilZPass)),ne(L.polygonOffset,L.polygonOffsetFactor,L.polygonOffsetUnits),L.alphaToCoverage===!0?Q(32926):he(32926)}function Z(L){x!==L&&(L?a.frontFace(2304):a.frontFace(2305),x=L)}function ee(L){L!==uc?(Q(2884),L!==R&&(L===Ca?a.cullFace(1029):L===dc?a.cullFace(1028):a.cullFace(1032))):he(2884),R=L}function pe(L){L!==W&&(I&&a.lineWidth(L),W=L)}function ne(L,ie,q){L?(Q(32823),(N!==ie||A!==q)&&(a.polygonOffset(ie,q),N=ie,A=q)):he(32823)}function S(L){L?Q(3089):he(3089)}function M(L){L===void 0&&(L=33984+$-1),U!==L&&(a.activeTexture(L),U=L)}function G(L,ie){U===null&&M();let q=B[U];q===void 0&&(q={type:void 0,texture:void 0},B[U]=q),(q.type!==L||q.texture!==ie)&&(a.bindTexture(L,ie||X[L]),q.type=L,q.texture=ie)}function j(){const L=B[U];L!==void 0&&L.type!==void 0&&(a.bindTexture(L.type,null),L.type=void 0,L.texture=void 0)}function J(){try{a.compressedTexImage2D.apply(a,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function ae(){try{a.texImage2D.apply(a,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function Me(){try{a.texImage3D.apply(a,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function ge(L){ye.equals(L)===!1&&(a.scissor(L.x,L.y,L.z,L.w),ye.copy(L))}function Se(L){se.equals(L)===!1&&(a.viewport(L.x,L.y,L.z,L.w),se.copy(L))}function fe(){a.disable(3042),a.disable(2884),a.disable(2929),a.disable(32823),a.disable(3089),a.disable(2960),a.disable(32926),a.blendEquation(32774),a.blendFunc(1,0),a.blendFuncSeparate(1,0,1,0),a.colorMask(!0,!0,!0,!0),a.clearColor(0,0,0,0),a.depthMask(!0),a.depthFunc(513),a.clearDepth(1),a.stencilMask(4294967295),a.stencilFunc(519,0,4294967295),a.stencilOp(7680,7680,7680),a.clearStencil(0),a.cullFace(1029),a.frontFace(2305),a.polygonOffset(0,0),a.activeTexture(33984),a.bindFramebuffer(36160,null),n===!0&&(a.bindFramebuffer(36009,null),a.bindFramebuffer(36008,null)),a.useProgram(null),a.lineWidth(1),a.scissor(0,0,a.canvas.width,a.canvas.height),a.viewport(0,0,a.canvas.width,a.canvas.height),h={},U=null,B={},u=null,d={},p=null,g=!1,y=null,v=null,f=null,m=null,E=null,_=null,T=null,C=!1,x=null,R=null,W=null,N=null,A=null,ye.set(0,0,a.canvas.width,a.canvas.height),se.set(0,0,a.canvas.width,a.canvas.height),o.reset(),l.reset(),c.reset()}return{buffers:{color:o,depth:l,stencil:c},enable:Q,disable:he,bindFramebuffer:ve,bindXRFramebuffer:H,useProgram:we,setBlending:Ce,setMaterial:O,setFlipSided:Z,setCullFace:ee,setLineWidth:pe,setPolygonOffset:ne,setScissorTest:S,activeTexture:M,bindTexture:G,unbindTexture:j,compressedTexImage2D:J,texImage2D:ae,texImage3D:Me,scissor:ge,viewport:Se,reset:fe}}function Mm(a,e,t,n,i,s,r){const o=i.isWebGL2,l=i.maxTextures,c=i.maxCubemapSize,h=i.maxTextureSize,u=i.maxSamples,d=new WeakMap;let p,g=!1;try{g=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function y(S,M){return g?new OffscreenCanvas(S,M):qs("canvas")}function v(S,M,G,j){let J=1;if((S.width>j||S.height>j)&&(J=j/Math.max(S.width,S.height)),J<1||M===!0)if(typeof HTMLImageElement<"u"&&S instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&S instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&S instanceof ImageBitmap){const ae=M?Wh:Math.floor,Me=ae(J*S.width),ge=ae(J*S.height);p===void 0&&(p=y(Me,ge));const Se=G?y(Me,ge):p;return Se.width=Me,Se.height=ge,Se.getContext("2d").drawImage(S,0,0,Me,ge),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+S.width+"x"+S.height+") to ("+Me+"x"+ge+")."),Se}else return"data"in S&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+S.width+"x"+S.height+")."),S;return S}function f(S){return Xa(S.width)&&Xa(S.height)}function m(S){return o?!1:S.wrapS!==xt||S.wrapT!==xt||S.minFilter!==et&&S.minFilter!==Mt}function E(S,M){return S.generateMipmaps&&M&&S.minFilter!==et&&S.minFilter!==Mt}function _(S,M,G,j,J=1){a.generateMipmap(S);const ae=n.get(M);ae.__maxMipLevel=Math.log2(Math.max(G,j,J))}function T(S,M,G,j){if(o===!1)return M;if(S!==null){if(a[S]!==void 0)return a[S];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+S+"'")}let J=M;return M===6403&&(G===5126&&(J=33326),G===5131&&(J=33325),G===5121&&(J=33321)),M===6407&&(G===5126&&(J=34837),G===5131&&(J=34843),G===5121&&(J=32849)),M===6408&&(G===5126&&(J=34836),G===5131&&(J=34842),G===5121&&(J=j===Cn?35907:32856)),(J===33325||J===33326||J===34842||J===34836)&&e.get("EXT_color_buffer_float"),J}function C(S){return S===et||S===Ia||S===Ua?9728:9729}function x(S){const M=S.target;M.removeEventListener("dispose",x),W(M),M.isVideoTexture&&d.delete(M),r.memory.textures--}function R(S){const M=S.target;M.removeEventListener("dispose",R),N(M)}function W(S){const M=n.get(S);M.__webglInit!==void 0&&(a.deleteTexture(M.__webglTexture),n.remove(S))}function N(S){const M=S.texture,G=n.get(S),j=n.get(M);if(S){if(j.__webglTexture!==void 0&&(a.deleteTexture(j.__webglTexture),r.memory.textures--),S.depthTexture&&S.depthTexture.dispose(),S.isWebGLCubeRenderTarget)for(let J=0;J<6;J++)a.deleteFramebuffer(G.__webglFramebuffer[J]),G.__webglDepthbuffer&&a.deleteRenderbuffer(G.__webglDepthbuffer[J]);else a.deleteFramebuffer(G.__webglFramebuffer),G.__webglDepthbuffer&&a.deleteRenderbuffer(G.__webglDepthbuffer),G.__webglMultisampledFramebuffer&&a.deleteFramebuffer(G.__webglMultisampledFramebuffer),G.__webglColorRenderbuffer&&a.deleteRenderbuffer(G.__webglColorRenderbuffer),G.__webglDepthRenderbuffer&&a.deleteRenderbuffer(G.__webglDepthRenderbuffer);if(S.isWebGLMultipleRenderTargets)for(let J=0,ae=M.length;J<ae;J++){const Me=n.get(M[J]);Me.__webglTexture&&(a.deleteTexture(Me.__webglTexture),r.memory.textures--),n.remove(M[J])}n.remove(M),n.remove(S)}}let A=0;function $(){A=0}function I(){const S=A;return S>=l&&console.warn("THREE.WebGLTextures: Trying to use "+S+" texture units while this GPU supports only "+l),A+=1,S}function D(S,M){const G=n.get(S);if(S.isVideoTexture&&O(S),S.version>0&&G.__version!==S.version){const j=S.image;if(j===void 0)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if(j.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{Ee(G,S,M);return}}t.activeTexture(33984+M),t.bindTexture(3553,G.__webglTexture)}function k(S,M){const G=n.get(S);if(S.version>0&&G.__version!==S.version){Ee(G,S,M);return}t.activeTexture(33984+M),t.bindTexture(35866,G.__webglTexture)}function U(S,M){const G=n.get(S);if(S.version>0&&G.__version!==S.version){Ee(G,S,M);return}t.activeTexture(33984+M),t.bindTexture(32879,G.__webglTexture)}function B(S,M){const G=n.get(S);if(S.version>0&&G.__version!==S.version){X(G,S,M);return}t.activeTexture(33984+M),t.bindTexture(34067,G.__webglTexture)}const K={[qr]:10497,[xt]:33071,[Xr]:33648},le={[et]:9728,[Ia]:9984,[Ua]:9986,[Mt]:9729,[Gc]:9985,[Ws]:9987};function ye(S,M,G){if(G?(a.texParameteri(S,10242,K[M.wrapS]),a.texParameteri(S,10243,K[M.wrapT]),(S===32879||S===35866)&&a.texParameteri(S,32882,K[M.wrapR]),a.texParameteri(S,10240,le[M.magFilter]),a.texParameteri(S,10241,le[M.minFilter])):(a.texParameteri(S,10242,33071),a.texParameteri(S,10243,33071),(S===32879||S===35866)&&a.texParameteri(S,32882,33071),(M.wrapS!==xt||M.wrapT!==xt)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),a.texParameteri(S,10240,C(M.magFilter)),a.texParameteri(S,10241,C(M.minFilter)),M.minFilter!==et&&M.minFilter!==Mt&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),e.has("EXT_texture_filter_anisotropic")===!0){const j=e.get("EXT_texture_filter_anisotropic");if(M.type===tn&&e.has("OES_texture_float_linear")===!1||o===!1&&M.type===Qn&&e.has("OES_texture_half_float_linear")===!1)return;(M.anisotropy>1||n.get(M).__currentAnisotropy)&&(a.texParameterf(S,j.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(M.anisotropy,i.getMaxAnisotropy())),n.get(M).__currentAnisotropy=M.anisotropy)}}function se(S,M){S.__webglInit===void 0&&(S.__webglInit=!0,M.addEventListener("dispose",x),S.__webglTexture=a.createTexture(),r.memory.textures++)}function Ee(S,M,G){let j=3553;M.isDataTexture2DArray&&(j=35866),M.isDataTexture3D&&(j=32879),se(S,M),t.activeTexture(33984+G),t.bindTexture(j,S.__webglTexture),a.pixelStorei(37440,M.flipY),a.pixelStorei(37441,M.premultiplyAlpha),a.pixelStorei(3317,M.unpackAlignment),a.pixelStorei(37443,0);const J=m(M)&&f(M.image)===!1,ae=v(M.image,J,!1,h),Me=f(ae)||o,ge=s.convert(M.format);let Se=s.convert(M.type),fe=T(M.internalFormat,ge,Se,M.encoding);ye(j,M,Me);let L;const ie=M.mipmaps;if(M.isDepthTexture)fe=6402,o?M.type===tn?fe=36012:M.type===Ds?fe=33190:M.type===Ii?fe=35056:fe=33189:M.type===tn&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),M.format===ei&&fe===6402&&M.type!==Is&&M.type!==Ds&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),M.type=Is,Se=s.convert(M.type)),M.format===zi&&fe===6402&&(fe=34041,M.type!==Ii&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),M.type=Ii,Se=s.convert(M.type))),t.texImage2D(3553,0,fe,ae.width,ae.height,0,ge,Se,null);else if(M.isDataTexture)if(ie.length>0&&Me){for(let q=0,me=ie.length;q<me;q++)L=ie[q],t.texImage2D(3553,q,fe,L.width,L.height,0,ge,Se,L.data);M.generateMipmaps=!1,S.__maxMipLevel=ie.length-1}else t.texImage2D(3553,0,fe,ae.width,ae.height,0,ge,Se,ae.data),S.__maxMipLevel=0;else if(M.isCompressedTexture){for(let q=0,me=ie.length;q<me;q++)L=ie[q],M.format!==ut&&M.format!==Kn?ge!==null?t.compressedTexImage2D(3553,q,fe,L.width,L.height,0,L.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):t.texImage2D(3553,q,fe,L.width,L.height,0,ge,Se,L.data);S.__maxMipLevel=ie.length-1}else if(M.isDataTexture2DArray)t.texImage3D(35866,0,fe,ae.width,ae.height,ae.depth,0,ge,Se,ae.data),S.__maxMipLevel=0;else if(M.isDataTexture3D)t.texImage3D(32879,0,fe,ae.width,ae.height,ae.depth,0,ge,Se,ae.data),S.__maxMipLevel=0;else if(ie.length>0&&Me){for(let q=0,me=ie.length;q<me;q++)L=ie[q],t.texImage2D(3553,q,fe,ge,Se,L);M.generateMipmaps=!1,S.__maxMipLevel=ie.length-1}else t.texImage2D(3553,0,fe,ge,Se,ae),S.__maxMipLevel=0;E(M,Me)&&_(j,M,ae.width,ae.height),S.__version=M.version,M.onUpdate&&M.onUpdate(M)}function X(S,M,G){if(M.image.length!==6)return;se(S,M),t.activeTexture(33984+G),t.bindTexture(34067,S.__webglTexture),a.pixelStorei(37440,M.flipY),a.pixelStorei(37441,M.premultiplyAlpha),a.pixelStorei(3317,M.unpackAlignment),a.pixelStorei(37443,0);const j=M&&(M.isCompressedTexture||M.image[0].isCompressedTexture),J=M.image[0]&&M.image[0].isDataTexture,ae=[];for(let q=0;q<6;q++)!j&&!J?ae[q]=v(M.image[q],!1,!0,c):ae[q]=J?M.image[q].image:M.image[q];const Me=ae[0],ge=f(Me)||o,Se=s.convert(M.format),fe=s.convert(M.type),L=T(M.internalFormat,Se,fe,M.encoding);ye(34067,M,ge);let ie;if(j){for(let q=0;q<6;q++){ie=ae[q].mipmaps;for(let me=0;me<ie.length;me++){const ce=ie[me];M.format!==ut&&M.format!==Kn?Se!==null?t.compressedTexImage2D(34069+q,me,L,ce.width,ce.height,0,ce.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):t.texImage2D(34069+q,me,L,ce.width,ce.height,0,Se,fe,ce.data)}}S.__maxMipLevel=ie.length-1}else{ie=M.mipmaps;for(let q=0;q<6;q++)if(J){t.texImage2D(34069+q,0,L,ae[q].width,ae[q].height,0,Se,fe,ae[q].data);for(let me=0;me<ie.length;me++){const Pe=ie[me].image[q].image;t.texImage2D(34069+q,me+1,L,Pe.width,Pe.height,0,Se,fe,Pe.data)}}else{t.texImage2D(34069+q,0,L,Se,fe,ae[q]);for(let me=0;me<ie.length;me++){const ce=ie[me];t.texImage2D(34069+q,me+1,L,Se,fe,ce.image[q])}}S.__maxMipLevel=ie.length}E(M,ge)&&_(34067,M,Me.width,Me.height),S.__version=M.version,M.onUpdate&&M.onUpdate(M)}function Q(S,M,G,j,J){const ae=s.convert(G.format),Me=s.convert(G.type),ge=T(G.internalFormat,ae,Me,G.encoding);J===32879||J===35866?t.texImage3D(J,0,ge,M.width,M.height,M.depth,0,ae,Me,null):t.texImage2D(J,0,ge,M.width,M.height,0,ae,Me,null),t.bindFramebuffer(36160,S),a.framebufferTexture2D(36160,j,J,n.get(G).__webglTexture,0),t.bindFramebuffer(36160,null)}function he(S,M,G){if(a.bindRenderbuffer(36161,S),M.depthBuffer&&!M.stencilBuffer){let j=33189;if(G){const J=M.depthTexture;J&&J.isDepthTexture&&(J.type===tn?j=36012:J.type===Ds&&(j=33190));const ae=Ce(M);a.renderbufferStorageMultisample(36161,ae,j,M.width,M.height)}else a.renderbufferStorage(36161,j,M.width,M.height);a.framebufferRenderbuffer(36160,36096,36161,S)}else if(M.depthBuffer&&M.stencilBuffer){if(G){const j=Ce(M);a.renderbufferStorageMultisample(36161,j,35056,M.width,M.height)}else a.renderbufferStorage(36161,34041,M.width,M.height);a.framebufferRenderbuffer(36160,33306,36161,S)}else{const j=M.isWebGLMultipleRenderTargets===!0?M.texture[0]:M.texture,J=s.convert(j.format),ae=s.convert(j.type),Me=T(j.internalFormat,J,ae,j.encoding);if(G){const ge=Ce(M);a.renderbufferStorageMultisample(36161,ge,Me,M.width,M.height)}else a.renderbufferStorage(36161,Me,M.width,M.height)}a.bindRenderbuffer(36161,null)}function H(S,M){if(M&&M.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,S),!(M.depthTexture&&M.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(M.depthTexture).__webglTexture||M.depthTexture.image.width!==M.width||M.depthTexture.image.height!==M.height)&&(M.depthTexture.image.width=M.width,M.depthTexture.image.height=M.height,M.depthTexture.needsUpdate=!0),D(M.depthTexture,0);const j=n.get(M.depthTexture).__webglTexture;if(M.depthTexture.format===ei)a.framebufferTexture2D(36160,36096,3553,j,0);else if(M.depthTexture.format===zi)a.framebufferTexture2D(36160,33306,3553,j,0);else throw new Error("Unknown depthTexture format")}function ve(S){const M=n.get(S),G=S.isWebGLCubeRenderTarget===!0;if(S.depthTexture){if(G)throw new Error("target.depthTexture not supported in Cube render targets");H(M.__webglFramebuffer,S)}else if(G){M.__webglDepthbuffer=[];for(let j=0;j<6;j++)t.bindFramebuffer(36160,M.__webglFramebuffer[j]),M.__webglDepthbuffer[j]=a.createRenderbuffer(),he(M.__webglDepthbuffer[j],S,!1)}else t.bindFramebuffer(36160,M.__webglFramebuffer),M.__webglDepthbuffer=a.createRenderbuffer(),he(M.__webglDepthbuffer,S,!1);t.bindFramebuffer(36160,null)}function we(S){const M=S.texture,G=n.get(S),j=n.get(M);S.addEventListener("dispose",R),S.isWebGLMultipleRenderTargets!==!0&&(j.__webglTexture=a.createTexture(),j.__version=M.version,r.memory.textures++);const J=S.isWebGLCubeRenderTarget===!0,ae=S.isWebGLMultipleRenderTargets===!0,Me=S.isWebGLMultisampleRenderTarget===!0,ge=M.isDataTexture3D||M.isDataTexture2DArray,Se=f(S)||o;if(o&&M.format===Kn&&(M.type===tn||M.type===Qn)&&(M.format=ut,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),J){G.__webglFramebuffer=[];for(let fe=0;fe<6;fe++)G.__webglFramebuffer[fe]=a.createFramebuffer()}else if(G.__webglFramebuffer=a.createFramebuffer(),ae)if(i.drawBuffers){const fe=S.texture;for(let L=0,ie=fe.length;L<ie;L++){const q=n.get(fe[L]);q.__webglTexture===void 0&&(q.__webglTexture=a.createTexture(),r.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(Me)if(o){G.__webglMultisampledFramebuffer=a.createFramebuffer(),G.__webglColorRenderbuffer=a.createRenderbuffer(),a.bindRenderbuffer(36161,G.__webglColorRenderbuffer);const fe=s.convert(M.format),L=s.convert(M.type),ie=T(M.internalFormat,fe,L,M.encoding),q=Ce(S);a.renderbufferStorageMultisample(36161,q,ie,S.width,S.height),t.bindFramebuffer(36160,G.__webglMultisampledFramebuffer),a.framebufferRenderbuffer(36160,36064,36161,G.__webglColorRenderbuffer),a.bindRenderbuffer(36161,null),S.depthBuffer&&(G.__webglDepthRenderbuffer=a.createRenderbuffer(),he(G.__webglDepthRenderbuffer,S,!0)),t.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(J){t.bindTexture(34067,j.__webglTexture),ye(34067,M,Se);for(let fe=0;fe<6;fe++)Q(G.__webglFramebuffer[fe],S,M,36064,34069+fe);E(M,Se)&&_(34067,M,S.width,S.height),t.unbindTexture()}else if(ae){const fe=S.texture;for(let L=0,ie=fe.length;L<ie;L++){const q=fe[L],me=n.get(q);t.bindTexture(3553,me.__webglTexture),ye(3553,q,Se),Q(G.__webglFramebuffer,S,q,36064+L,3553),E(q,Se)&&_(3553,q,S.width,S.height)}t.unbindTexture()}else{let fe=3553;ge&&(o?fe=M.isDataTexture3D?32879:35866:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),t.bindTexture(fe,j.__webglTexture),ye(fe,M,Se),Q(G.__webglFramebuffer,S,M,36064,fe),E(M,Se)&&_(fe,M,S.width,S.height,S.depth),t.unbindTexture()}S.depthBuffer&&ve(S)}function re(S){const M=f(S)||o,G=S.isWebGLMultipleRenderTargets===!0?S.texture:[S.texture];for(let j=0,J=G.length;j<J;j++){const ae=G[j];if(E(ae,M)){const Me=S.isWebGLCubeRenderTarget?34067:3553,ge=n.get(ae).__webglTexture;t.bindTexture(Me,ge),_(Me,ae,S.width,S.height),t.unbindTexture()}}}function ue(S){if(S.isWebGLMultisampleRenderTarget)if(o){const M=S.width,G=S.height;let j=16384;S.depthBuffer&&(j|=256),S.stencilBuffer&&(j|=1024);const J=n.get(S);t.bindFramebuffer(36008,J.__webglMultisampledFramebuffer),t.bindFramebuffer(36009,J.__webglFramebuffer),a.blitFramebuffer(0,0,M,G,0,0,M,G,j,9728),t.bindFramebuffer(36008,null),t.bindFramebuffer(36009,J.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")}function Ce(S){return o&&S.isWebGLMultisampleRenderTarget?Math.min(u,S.samples):0}function O(S){const M=r.render.frame;d.get(S)!==M&&(d.set(S,M),S.update())}let Z=!1,ee=!1;function pe(S,M){S&&S.isWebGLRenderTarget&&(Z===!1&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),Z=!0),S=S.texture),D(S,M)}function ne(S,M){S&&S.isWebGLCubeRenderTarget&&(ee===!1&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),ee=!0),S=S.texture),B(S,M)}this.allocateTextureUnit=I,this.resetTextureUnits=$,this.setTexture2D=D,this.setTexture2DArray=k,this.setTexture3D=U,this.setTextureCube=B,this.setupRenderTarget=we,this.updateRenderTargetMipmap=re,this.updateMultisampleRenderTarget=ue,this.safeSetTexture2D=pe,this.safeSetTextureCube=ne}function bm(a,e,t){const n=t.isWebGL2;function i(s){let r;if(s===ln)return 5121;if(s===Wc)return 32819;if(s===qc)return 32820;if(s===Xc)return 33635;if(s===Oc)return 5120;if(s===Hc)return 5122;if(s===Is)return 5123;if(s===Vc)return 5124;if(s===Ds)return 5125;if(s===tn)return 5126;if(s===Qn)return n?5131:(r=e.get("OES_texture_half_float"),r!==null?r.HALF_FLOAT_OES:null);if(s===Yc)return 6406;if(s===Kn)return 6407;if(s===ut)return 6408;if(s===Zc)return 6409;if(s===$c)return 6410;if(s===ei)return 6402;if(s===zi)return 34041;if(s===Jc)return 6403;if(s===Qc)return 36244;if(s===Kc)return 33319;if(s===eh)return 33320;if(s===th)return 36248;if(s===nh)return 36249;if(s===Na||s===Fa||s===ka||s===Ba)if(r=e.get("WEBGL_compressed_texture_s3tc"),r!==null){if(s===Na)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(s===Fa)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(s===ka)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(s===Ba)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(s===za||s===Ga||s===Oa||s===Ha)if(r=e.get("WEBGL_compressed_texture_pvrtc"),r!==null){if(s===za)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(s===Ga)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(s===Oa)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(s===Ha)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(s===ih)return r=e.get("WEBGL_compressed_texture_etc1"),r!==null?r.COMPRESSED_RGB_ETC1_WEBGL:null;if((s===Va||s===Wa)&&(r=e.get("WEBGL_compressed_texture_etc"),r!==null)){if(s===Va)return r.COMPRESSED_RGB8_ETC2;if(s===Wa)return r.COMPRESSED_RGBA8_ETC2_EAC}if(s===sh||s===rh||s===ah||s===oh||s===lh||s===ch||s===hh||s===uh||s===dh||s===ph||s===fh||s===mh||s===gh||s===yh||s===xh||s===_h||s===Mh||s===bh||s===wh||s===Sh||s===Eh||s===Th||s===Ch||s===Ah||s===Lh||s===Rh||s===Ph||s===Dh)return r=e.get("WEBGL_compressed_texture_astc"),r!==null?s:null;if(s===vh)return r=e.get("EXT_texture_compression_bptc"),r!==null?s:null;if(s===Ii)return n?34042:(r=e.get("WEBGL_depth_texture"),r!==null?r.UNSIGNED_INT_24_8_WEBGL:null)}return{convert:i}}class Pl extends mt{constructor(e=[]){super(),this.cameras=e}}Pl.prototype.isArrayCamera=!0;class bt extends Ne{constructor(){super(),this.type="Group"}}bt.prototype.isGroup=!0;const wm={type:"move"};class Dr{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new bt,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new bt,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new w,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new w),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new bt,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new w,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new w),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let i=null,s=null,r=null;const o=this._targetRay,l=this._grip,c=this._hand;if(e&&t.session.visibilityState!=="visible-blurred")if(o!==null&&(i=t.getPose(e.targetRaySpace,n),i!==null&&(o.matrix.fromArray(i.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),i.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(i.linearVelocity)):o.hasLinearVelocity=!1,i.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(i.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(wm))),c&&e.hand){r=!0;for(const y of e.hand.values()){const v=t.getJointPose(y,n);if(c.joints[y.jointName]===void 0){const m=new bt;m.matrixAutoUpdate=!1,m.visible=!1,c.joints[y.jointName]=m,c.add(m)}const f=c.joints[y.jointName];v!==null&&(f.matrix.fromArray(v.transform.matrix),f.matrix.decompose(f.position,f.rotation,f.scale),f.jointRadius=v.radius),f.visible=v!==null}const h=c.joints["index-finger-tip"],u=c.joints["thumb-tip"],d=h.position.distanceTo(u.position),p=.02,g=.005;c.inputState.pinching&&d>p+g?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!c.inputState.pinching&&d<=p-g&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else l!==null&&e.gripSpace&&(s=t.getPose(e.gripSpace,n),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));return o!==null&&(o.visible=i!==null),l!==null&&(l.visible=s!==null),c!==null&&(c.visible=r!==null),this}}class Sm extends An{constructor(e,t){super();const n=this,i=e.state;let s=null,r=1,o=null,l="local-floor",c=null,h=null,u=null,d=null,p=null,g=!1,y=null,v=null,f=null,m=null,E=null,_=null;const T=[],C=new Map,x=new mt;x.layers.enable(1),x.viewport=new ze;const R=new mt;R.layers.enable(2),R.viewport=new ze;const W=[x,R],N=new Pl;N.layers.enable(1),N.layers.enable(2);let A=null,$=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(X){let Q=T[X];return Q===void 0&&(Q=new Dr,T[X]=Q),Q.getTargetRaySpace()},this.getControllerGrip=function(X){let Q=T[X];return Q===void 0&&(Q=new Dr,T[X]=Q),Q.getGripSpace()},this.getHand=function(X){let Q=T[X];return Q===void 0&&(Q=new Dr,T[X]=Q),Q.getHandSpace()};function I(X){const Q=C.get(X.inputSource);Q&&Q.dispatchEvent({type:X.type,data:X.inputSource})}function D(){C.forEach(function(X,Q){X.disconnect(Q)}),C.clear(),A=null,$=null,i.bindXRFramebuffer(null),e.setRenderTarget(e.getRenderTarget()),u&&t.deleteFramebuffer(u),y&&t.deleteFramebuffer(y),v&&t.deleteRenderbuffer(v),f&&t.deleteRenderbuffer(f),u=null,y=null,v=null,f=null,p=null,d=null,h=null,s=null,Ee.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(X){r=X,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(X){l=X,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return o},this.getBaseLayer=function(){return d!==null?d:p},this.getBinding=function(){return h},this.getFrame=function(){return m},this.getSession=function(){return s},this.setSession=async function(X){if(s=X,s!==null){s.addEventListener("select",I),s.addEventListener("selectstart",I),s.addEventListener("selectend",I),s.addEventListener("squeeze",I),s.addEventListener("squeezestart",I),s.addEventListener("squeezeend",I),s.addEventListener("end",D),s.addEventListener("inputsourceschange",k);const Q=t.getContextAttributes();if(Q.xrCompatible!==!0&&await t.makeXRCompatible(),s.renderState.layers===void 0){const he={antialias:Q.antialias,alpha:Q.alpha,depth:Q.depth,stencil:Q.stencil,framebufferScaleFactor:r};p=new XRWebGLLayer(s,t,he),s.updateRenderState({baseLayer:p})}else if(t instanceof WebGLRenderingContext){const he={antialias:!0,alpha:Q.alpha,depth:Q.depth,stencil:Q.stencil,framebufferScaleFactor:r};p=new XRWebGLLayer(s,t,he),s.updateRenderState({layers:[p]})}else{g=Q.antialias;let he=null;Q.depth&&(_=256,Q.stencil&&(_|=1024),E=Q.stencil?33306:36096,he=Q.stencil?35056:33190);const H={colorFormat:Q.alpha?32856:32849,depthFormat:he,scaleFactor:r};h=new XRWebGLBinding(s,t),d=h.createProjectionLayer(H),u=t.createFramebuffer(),s.updateRenderState({layers:[d]}),g&&(y=t.createFramebuffer(),v=t.createRenderbuffer(),t.bindRenderbuffer(36161,v),t.renderbufferStorageMultisample(36161,4,32856,d.textureWidth,d.textureHeight),i.bindFramebuffer(36160,y),t.framebufferRenderbuffer(36160,36064,36161,v),t.bindRenderbuffer(36161,null),he!==null&&(f=t.createRenderbuffer(),t.bindRenderbuffer(36161,f),t.renderbufferStorageMultisample(36161,4,he,d.textureWidth,d.textureHeight),t.framebufferRenderbuffer(36160,E,36161,f),t.bindRenderbuffer(36161,null)),i.bindFramebuffer(36160,null))}o=await s.requestReferenceSpace(l),Ee.setContext(s),Ee.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};function k(X){const Q=s.inputSources;for(let he=0;he<T.length;he++)C.set(Q[he],T[he]);for(let he=0;he<X.removed.length;he++){const H=X.removed[he],ve=C.get(H);ve&&(ve.dispatchEvent({type:"disconnected",data:H}),C.delete(H))}for(let he=0;he<X.added.length;he++){const H=X.added[he],ve=C.get(H);ve&&ve.dispatchEvent({type:"connected",data:H})}}const U=new w,B=new w;function K(X,Q,he){U.setFromMatrixPosition(Q.matrixWorld),B.setFromMatrixPosition(he.matrixWorld);const H=U.distanceTo(B),ve=Q.projectionMatrix.elements,we=he.projectionMatrix.elements,re=ve[14]/(ve[10]-1),ue=ve[14]/(ve[10]+1),Ce=(ve[9]+1)/ve[5],O=(ve[9]-1)/ve[5],Z=(ve[8]-1)/ve[0],ee=(we[8]+1)/we[0],pe=re*Z,ne=re*ee,S=H/(-Z+ee),M=S*-Z;Q.matrixWorld.decompose(X.position,X.quaternion,X.scale),X.translateX(M),X.translateZ(S),X.matrixWorld.compose(X.position,X.quaternion,X.scale),X.matrixWorldInverse.copy(X.matrixWorld).invert();const G=re+S,j=ue+S,J=pe-M,ae=ne+(H-M),Me=Ce*ue/j*G,ge=O*ue/j*G;X.projectionMatrix.makePerspective(J,ae,Me,ge,G,j)}function le(X,Q){Q===null?X.matrixWorld.copy(X.matrix):X.matrixWorld.multiplyMatrices(Q.matrixWorld,X.matrix),X.matrixWorldInverse.copy(X.matrixWorld).invert()}this.updateCamera=function(X){if(s===null)return;N.near=R.near=x.near=X.near,N.far=R.far=x.far=X.far,(A!==N.near||$!==N.far)&&(s.updateRenderState({depthNear:N.near,depthFar:N.far}),A=N.near,$=N.far);const Q=X.parent,he=N.cameras;le(N,Q);for(let ve=0;ve<he.length;ve++)le(he[ve],Q);N.matrixWorld.decompose(N.position,N.quaternion,N.scale),X.position.copy(N.position),X.quaternion.copy(N.quaternion),X.scale.copy(N.scale),X.matrix.copy(N.matrix),X.matrixWorld.copy(N.matrixWorld);const H=X.children;for(let ve=0,we=H.length;ve<we;ve++)H[ve].updateMatrixWorld(!0);he.length===2?K(N,x,R):N.projectionMatrix.copy(x.projectionMatrix)},this.getCamera=function(){return N},this.getFoveation=function(){if(d!==null)return d.fixedFoveation;if(p!==null)return p.fixedFoveation},this.setFoveation=function(X){d!==null&&(d.fixedFoveation=X),p!==null&&p.fixedFoveation!==void 0&&(p.fixedFoveation=X)};let ye=null;function se(X,Q){if(c=Q.getViewerPose(o),m=Q,c!==null){const H=c.views;p!==null&&i.bindXRFramebuffer(p.framebuffer);let ve=!1;H.length!==N.cameras.length&&(N.cameras.length=0,ve=!0);for(let we=0;we<H.length;we++){const re=H[we];let ue=null;if(p!==null)ue=p.getViewport(re);else{const O=h.getViewSubImage(d,re);i.bindXRFramebuffer(u),O.depthStencilTexture!==void 0&&t.framebufferTexture2D(36160,E,3553,O.depthStencilTexture,0),t.framebufferTexture2D(36160,36064,3553,O.colorTexture,0),ue=O.viewport}const Ce=W[we];Ce.matrix.fromArray(re.transform.matrix),Ce.projectionMatrix.fromArray(re.projectionMatrix),Ce.viewport.set(ue.x,ue.y,ue.width,ue.height),we===0&&N.matrix.copy(Ce.matrix),ve===!0&&N.cameras.push(Ce)}g&&(i.bindXRFramebuffer(y),_!==null&&t.clear(_))}const he=s.inputSources;for(let H=0;H<T.length;H++){const ve=T[H],we=he[H];ve.update(we,Q,o)}if(ye&&ye(X,Q),g){const H=d.textureWidth,ve=d.textureHeight;i.bindFramebuffer(36008,y),i.bindFramebuffer(36009,u),t.invalidateFramebuffer(36008,[E]),t.invalidateFramebuffer(36009,[E]),t.blitFramebuffer(0,0,H,ve,0,0,H,ve,16384,9728),t.invalidateFramebuffer(36008,[36064]),i.bindFramebuffer(36008,null),i.bindFramebuffer(36009,null),i.bindFramebuffer(36160,y)}m=null}const Ee=new yl;Ee.setAnimationLoop(se),this.setAnimationLoop=function(X){ye=X},this.dispose=function(){}}}function Em(a){function e(f,m){f.fogColor.value.copy(m.color),m.isFog?(f.fogNear.value=m.near,f.fogFar.value=m.far):m.isFogExp2&&(f.fogDensity.value=m.density)}function t(f,m,E,_,T){m.isMeshBasicMaterial?n(f,m):m.isMeshLambertMaterial?(n(f,m),l(f,m)):m.isMeshToonMaterial?(n(f,m),h(f,m)):m.isMeshPhongMaterial?(n(f,m),c(f,m)):m.isMeshStandardMaterial?(n(f,m),m.isMeshPhysicalMaterial?d(f,m,T):u(f,m)):m.isMeshMatcapMaterial?(n(f,m),p(f,m)):m.isMeshDepthMaterial?(n(f,m),g(f,m)):m.isMeshDistanceMaterial?(n(f,m),y(f,m)):m.isMeshNormalMaterial?(n(f,m),v(f,m)):m.isLineBasicMaterial?(i(f,m),m.isLineDashedMaterial&&s(f,m)):m.isPointsMaterial?r(f,m,E,_):m.isSpriteMaterial?o(f,m):m.isShadowMaterial?(f.color.value.copy(m.color),f.opacity.value=m.opacity):m.isShaderMaterial&&(m.uniformsNeedUpdate=!1)}function n(f,m){f.opacity.value=m.opacity,m.color&&f.diffuse.value.copy(m.color),m.emissive&&f.emissive.value.copy(m.emissive).multiplyScalar(m.emissiveIntensity),m.map&&(f.map.value=m.map),m.alphaMap&&(f.alphaMap.value=m.alphaMap),m.specularMap&&(f.specularMap.value=m.specularMap),m.alphaTest>0&&(f.alphaTest.value=m.alphaTest);const E=a.get(m).envMap;if(E){f.envMap.value=E,f.flipEnvMap.value=E.isCubeTexture&&E.isRenderTargetTexture===!1?-1:1,f.reflectivity.value=m.reflectivity,f.ior.value=m.ior,f.refractionRatio.value=m.refractionRatio;const C=a.get(E).__maxMipLevel;C!==void 0&&(f.maxMipLevel.value=C)}m.lightMap&&(f.lightMap.value=m.lightMap,f.lightMapIntensity.value=m.lightMapIntensity),m.aoMap&&(f.aoMap.value=m.aoMap,f.aoMapIntensity.value=m.aoMapIntensity);let _;m.map?_=m.map:m.specularMap?_=m.specularMap:m.displacementMap?_=m.displacementMap:m.normalMap?_=m.normalMap:m.bumpMap?_=m.bumpMap:m.roughnessMap?_=m.roughnessMap:m.metalnessMap?_=m.metalnessMap:m.alphaMap?_=m.alphaMap:m.emissiveMap?_=m.emissiveMap:m.clearcoatMap?_=m.clearcoatMap:m.clearcoatNormalMap?_=m.clearcoatNormalMap:m.clearcoatRoughnessMap?_=m.clearcoatRoughnessMap:m.specularIntensityMap?_=m.specularIntensityMap:m.specularColorMap?_=m.specularColorMap:m.transmissionMap?_=m.transmissionMap:m.thicknessMap?_=m.thicknessMap:m.sheenColorMap?_=m.sheenColorMap:m.sheenRoughnessMap&&(_=m.sheenRoughnessMap),_!==void 0&&(_.isWebGLRenderTarget&&(_=_.texture),_.matrixAutoUpdate===!0&&_.updateMatrix(),f.uvTransform.value.copy(_.matrix));let T;m.aoMap?T=m.aoMap:m.lightMap&&(T=m.lightMap),T!==void 0&&(T.isWebGLRenderTarget&&(T=T.texture),T.matrixAutoUpdate===!0&&T.updateMatrix(),f.uv2Transform.value.copy(T.matrix))}function i(f,m){f.diffuse.value.copy(m.color),f.opacity.value=m.opacity}function s(f,m){f.dashSize.value=m.dashSize,f.totalSize.value=m.dashSize+m.gapSize,f.scale.value=m.scale}function r(f,m,E,_){f.diffuse.value.copy(m.color),f.opacity.value=m.opacity,f.size.value=m.size*E,f.scale.value=_*.5,m.map&&(f.map.value=m.map),m.alphaMap&&(f.alphaMap.value=m.alphaMap),m.alphaTest>0&&(f.alphaTest.value=m.alphaTest);let T;m.map?T=m.map:m.alphaMap&&(T=m.alphaMap),T!==void 0&&(T.matrixAutoUpdate===!0&&T.updateMatrix(),f.uvTransform.value.copy(T.matrix))}function o(f,m){f.diffuse.value.copy(m.color),f.opacity.value=m.opacity,f.rotation.value=m.rotation,m.map&&(f.map.value=m.map),m.alphaMap&&(f.alphaMap.value=m.alphaMap),m.alphaTest>0&&(f.alphaTest.value=m.alphaTest);let E;m.map?E=m.map:m.alphaMap&&(E=m.alphaMap),E!==void 0&&(E.matrixAutoUpdate===!0&&E.updateMatrix(),f.uvTransform.value.copy(E.matrix))}function l(f,m){m.emissiveMap&&(f.emissiveMap.value=m.emissiveMap)}function c(f,m){f.specular.value.copy(m.specular),f.shininess.value=Math.max(m.shininess,1e-4),m.emissiveMap&&(f.emissiveMap.value=m.emissiveMap),m.bumpMap&&(f.bumpMap.value=m.bumpMap,f.bumpScale.value=m.bumpScale,m.side===je&&(f.bumpScale.value*=-1)),m.normalMap&&(f.normalMap.value=m.normalMap,f.normalScale.value.copy(m.normalScale),m.side===je&&f.normalScale.value.negate()),m.displacementMap&&(f.displacementMap.value=m.displacementMap,f.displacementScale.value=m.displacementScale,f.displacementBias.value=m.displacementBias)}function h(f,m){m.gradientMap&&(f.gradientMap.value=m.gradientMap),m.emissiveMap&&(f.emissiveMap.value=m.emissiveMap),m.bumpMap&&(f.bumpMap.value=m.bumpMap,f.bumpScale.value=m.bumpScale,m.side===je&&(f.bumpScale.value*=-1)),m.normalMap&&(f.normalMap.value=m.normalMap,f.normalScale.value.copy(m.normalScale),m.side===je&&f.normalScale.value.negate()),m.displacementMap&&(f.displacementMap.value=m.displacementMap,f.displacementScale.value=m.displacementScale,f.displacementBias.value=m.displacementBias)}function u(f,m){f.roughness.value=m.roughness,f.metalness.value=m.metalness,m.roughnessMap&&(f.roughnessMap.value=m.roughnessMap),m.metalnessMap&&(f.metalnessMap.value=m.metalnessMap),m.emissiveMap&&(f.emissiveMap.value=m.emissiveMap),m.bumpMap&&(f.bumpMap.value=m.bumpMap,f.bumpScale.value=m.bumpScale,m.side===je&&(f.bumpScale.value*=-1)),m.normalMap&&(f.normalMap.value=m.normalMap,f.normalScale.value.copy(m.normalScale),m.side===je&&f.normalScale.value.negate()),m.displacementMap&&(f.displacementMap.value=m.displacementMap,f.displacementScale.value=m.displacementScale,f.displacementBias.value=m.displacementBias),a.get(m).envMap&&(f.envMapIntensity.value=m.envMapIntensity)}function d(f,m,E){u(f,m),f.ior.value=m.ior,m.sheen>0&&(f.sheenColor.value.copy(m.sheenColor).multiplyScalar(m.sheen),f.sheenRoughness.value=m.sheenRoughness,m.sheenColorMap&&(f.sheenColorMap.value=m.sheenColorMap),m.sheenRoughnessMap&&(f.sheenRoughnessMap.value=m.sheenRoughnessMap)),m.clearcoat>0&&(f.clearcoat.value=m.clearcoat,f.clearcoatRoughness.value=m.clearcoatRoughness,m.clearcoatMap&&(f.clearcoatMap.value=m.clearcoatMap),m.clearcoatRoughnessMap&&(f.clearcoatRoughnessMap.value=m.clearcoatRoughnessMap),m.clearcoatNormalMap&&(f.clearcoatNormalScale.value.copy(m.clearcoatNormalScale),f.clearcoatNormalMap.value=m.clearcoatNormalMap,m.side===je&&f.clearcoatNormalScale.value.negate())),m.transmission>0&&(f.transmission.value=m.transmission,f.transmissionSamplerMap.value=E.texture,f.transmissionSamplerSize.value.set(E.width,E.height),m.transmissionMap&&(f.transmissionMap.value=m.transmissionMap),f.thickness.value=m.thickness,m.thicknessMap&&(f.thicknessMap.value=m.thicknessMap),f.attenuationDistance.value=m.attenuationDistance,f.attenuationColor.value.copy(m.attenuationColor)),f.specularIntensity.value=m.specularIntensity,f.specularColor.value.copy(m.specularColor),m.specularIntensityMap&&(f.specularIntensityMap.value=m.specularIntensityMap),m.specularColorMap&&(f.specularColorMap.value=m.specularColorMap)}function p(f,m){m.matcap&&(f.matcap.value=m.matcap),m.bumpMap&&(f.bumpMap.value=m.bumpMap,f.bumpScale.value=m.bumpScale,m.side===je&&(f.bumpScale.value*=-1)),m.normalMap&&(f.normalMap.value=m.normalMap,f.normalScale.value.copy(m.normalScale),m.side===je&&f.normalScale.value.negate()),m.displacementMap&&(f.displacementMap.value=m.displacementMap,f.displacementScale.value=m.displacementScale,f.displacementBias.value=m.displacementBias)}function g(f,m){m.displacementMap&&(f.displacementMap.value=m.displacementMap,f.displacementScale.value=m.displacementScale,f.displacementBias.value=m.displacementBias)}function y(f,m){m.displacementMap&&(f.displacementMap.value=m.displacementMap,f.displacementScale.value=m.displacementScale,f.displacementBias.value=m.displacementBias),f.referencePosition.value.copy(m.referencePosition),f.nearDistance.value=m.nearDistance,f.farDistance.value=m.farDistance}function v(f,m){m.bumpMap&&(f.bumpMap.value=m.bumpMap,f.bumpScale.value=m.bumpScale,m.side===je&&(f.bumpScale.value*=-1)),m.normalMap&&(f.normalMap.value=m.normalMap,f.normalScale.value.copy(m.normalScale),m.side===je&&f.normalScale.value.negate()),m.displacementMap&&(f.displacementMap.value=m.displacementMap,f.displacementScale.value=m.displacementScale,f.displacementBias.value=m.displacementBias)}return{refreshFogUniforms:e,refreshMaterialUniforms:t}}function Tm(){const a=qs("canvas");return a.style.display="block",a}function Fe(a={}){const e=a.canvas!==void 0?a.canvas:Tm(),t=a.context!==void 0?a.context:null,n=a.alpha!==void 0?a.alpha:!1,i=a.depth!==void 0?a.depth:!0,s=a.stencil!==void 0?a.stencil:!0,r=a.antialias!==void 0?a.antialias:!1,o=a.premultipliedAlpha!==void 0?a.premultipliedAlpha:!0,l=a.preserveDrawingBuffer!==void 0?a.preserveDrawingBuffer:!1,c=a.powerPreference!==void 0?a.powerPreference:"default",h=a.failIfMajorPerformanceCaveat!==void 0?a.failIfMajorPerformanceCaveat:!1;let u=null,d=null;const p=[],g=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=lt,this.physicallyCorrectLights=!1,this.toneMapping=En,this.toneMappingExposure=1;const y=this;let v=!1,f=0,m=0,E=null,_=-1,T=null;const C=new ze,x=new ze;let R=null,W=e.width,N=e.height,A=1,$=null,I=null;const D=new ze(0,0,W,N),k=new ze(0,0,W,N);let U=!1;const B=[],K=new Ys;let le=!1,ye=!1,se=null;const Ee=new xe,X=new w,Q={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function he(){return E===null?A:1}let H=t;function ve(b,P){for(let z=0;z<b.length;z++){const F=b[z],V=e.getContext(F,P);if(V!==null)return V}return null}try{const b={alpha:n,depth:i,stencil:s,antialias:r,premultipliedAlpha:o,preserveDrawingBuffer:l,powerPreference:c,failIfMajorPerformanceCaveat:h};if(e.addEventListener("webglcontextlost",rt,!1),e.addEventListener("webglcontextrestored",at,!1),H===null){const P=["webgl2","webgl","experimental-webgl"];if(y.isWebGL1Renderer===!0&&P.shift(),H=ve(P,b),H===null)throw ve(P)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}H.getShaderPrecisionFormat===void 0&&(H.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(b){throw console.error("THREE.WebGLRenderer: "+b.message),b}let we,re,ue,Ce,O,Z,ee,pe,ne,S,M,G,j,J,ae,Me,ge,Se,fe,L,ie,q,me;function ce(){we=new Zp(H),re=new Gp(H,we,a),we.init(re),q=new bm(H,we,re),ue=new _m(H,we,re),B[0]=1029,Ce=new Jp,O=new cm,Z=new Mm(H,we,ue,O,re,q,Ce),ee=new Hp(y),pe=new Yp(y),ne=new hu(H,re),me=new Bp(H,we,ne,re),S=new $p(H,ne,Ce,me),M=new tf(H,S,ne,Ce),fe=new ef(H,re,Z),Me=new Op(O),G=new lm(y,ee,pe,we,re,me,Me),j=new Em(O),J=new um(O),ae=new ym(we,re),Se=new kp(y,ee,ue,M,o),ge=new Rl(y,M,re),L=new zp(H,we,Ce,re),ie=new jp(H,we,Ce,re),Ce.programs=G.programs,y.capabilities=re,y.extensions=we,y.properties=O,y.renderLists=J,y.shadowMap=ge,y.state=ue,y.info=Ce}ce();const Pe=new Sm(y,H);this.xr=Pe,this.getContext=function(){return H},this.getContextAttributes=function(){return H.getContextAttributes()},this.forceContextLoss=function(){const b=we.get("WEBGL_lose_context");b&&b.loseContext()},this.forceContextRestore=function(){const b=we.get("WEBGL_lose_context");b&&b.restoreContext()},this.getPixelRatio=function(){return A},this.setPixelRatio=function(b){b!==void 0&&(A=b,this.setSize(W,N,!1))},this.getSize=function(b){return b.set(W,N)},this.setSize=function(b,P,z){if(Pe.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}W=b,N=P,e.width=Math.floor(b*A),e.height=Math.floor(P*A),z!==!1&&(e.style.width=b+"px",e.style.height=P+"px"),this.setViewport(0,0,b,P)},this.getDrawingBufferSize=function(b){return b.set(W*A,N*A).floor()},this.setDrawingBufferSize=function(b,P,z){W=b,N=P,A=z,e.width=Math.floor(b*z),e.height=Math.floor(P*z),this.setViewport(0,0,b,P)},this.getCurrentViewport=function(b){return b.copy(C)},this.getViewport=function(b){return b.copy(D)},this.setViewport=function(b,P,z,F){b.isVector4?D.set(b.x,b.y,b.z,b.w):D.set(b,P,z,F),ue.viewport(C.copy(D).multiplyScalar(A).floor())},this.getScissor=function(b){return b.copy(k)},this.setScissor=function(b,P,z,F){b.isVector4?k.set(b.x,b.y,b.z,b.w):k.set(b,P,z,F),ue.scissor(x.copy(k).multiplyScalar(A).floor())},this.getScissorTest=function(){return U},this.setScissorTest=function(b){ue.setScissorTest(U=b)},this.setOpaqueSort=function(b){$=b},this.setTransparentSort=function(b){I=b},this.getClearColor=function(b){return b.copy(Se.getClearColor())},this.setClearColor=function(){Se.setClearColor.apply(Se,arguments)},this.getClearAlpha=function(){return Se.getClearAlpha()},this.setClearAlpha=function(){Se.setClearAlpha.apply(Se,arguments)},this.clear=function(b,P,z){let F=0;(b===void 0||b)&&(F|=16384),(P===void 0||P)&&(F|=256),(z===void 0||z)&&(F|=1024),H.clear(F)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",rt,!1),e.removeEventListener("webglcontextrestored",at,!1),J.dispose(),ae.dispose(),O.dispose(),ee.dispose(),pe.dispose(),M.dispose(),me.dispose(),Pe.dispose(),Pe.removeEventListener("sessionstart",ba),Pe.removeEventListener("sessionend",wa),se&&(se.dispose(),se=null),fn.stop()};function rt(b){b.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),v=!0}function at(){console.log("THREE.WebGLRenderer: Context Restored."),v=!1;const b=Ce.autoReset,P=ge.enabled,z=ge.autoUpdate,F=ge.needsUpdate,V=ge.type;ce(),Ce.autoReset=b,ge.enabled=P,ge.autoUpdate=z,ge.needsUpdate=F,ge.type=V}function Wt(b){const P=b.target;P.removeEventListener("dispose",Wt),Ze(P)}function Ze(b){Ft(b),O.remove(b)}function Ft(b){const P=O.get(b).programs;P!==void 0&&P.forEach(function(z){G.releaseProgram(z)})}this.renderBufferDirect=function(b,P,z,F,V,Te){P===null&&(P=Q);const be=V.isMesh&&V.matrixWorld.determinant()<0,_e=lc(b,P,z,F,V);ue.setMaterial(F,be);let Le=z.index;const ke=z.attributes.position;if(Le===null){if(ke===void 0||ke.count===0)return}else if(Le.count===0)return;let De=1;F.wireframe===!0&&(Le=S.getWireframeAttribute(z),De=2),me.setup(V,F,_e,z,Le);let Ie,Xe=L;Le!==null&&(Ie=ne.get(Le),Xe=ie,Xe.setIndex(Ie));const mn=Le!==null?Le.count:ke.count,Ue=z.drawRange.start*De,mi=z.drawRange.count*De,Ve=Te!==null?Te.start*De:0,gn=Te!==null?Te.count*De:1/0,yn=Math.max(Ue,Ve),vn=Math.min(mn,Ue+mi,Ve+gn)-1,qt=Math.max(0,vn-yn+1);if(qt!==0){if(V.isMesh)F.wireframe===!0?(ue.setLineWidth(F.wireframeLinewidth*he()),Xe.setMode(1)):Xe.setMode(4);else if(V.isLine){let Ye=F.linewidth;Ye===void 0&&(Ye=1),ue.setLineWidth(Ye*he()),V.isLineSegments?Xe.setMode(1):V.isLineLoop?Xe.setMode(2):Xe.setMode(3)}else V.isPoints?Xe.setMode(0):V.isSprite&&Xe.setMode(4);if(V.isInstancedMesh)Xe.renderInstances(yn,qt,V.count);else if(z.isInstancedBufferGeometry){const Ye=Math.min(z.instanceCount,z._maxInstanceCount);Xe.renderInstances(yn,qt,Ye)}else Xe.render(yn,qt)}},this.compile=function(b,P){d=ae.get(b),d.init(),g.push(d),b.traverseVisible(function(z){z.isLight&&z.layers.test(P.layers)&&(d.pushLight(z),z.castShadow&&d.pushShadow(z))}),d.setupLights(y.physicallyCorrectLights),b.traverse(function(z){const F=z.material;if(F)if(Array.isArray(F))for(let V=0;V<F.length;V++){const Te=F[V];tr(Te,b,z)}else tr(F,b,z)}),g.pop(),d=null};let St=null;function rc(b){St&&St(b)}function ba(){fn.stop()}function wa(){fn.start()}const fn=new yl;fn.setAnimationLoop(rc),typeof window<"u"&&fn.setContext(window),this.setAnimationLoop=function(b){St=b,Pe.setAnimationLoop(b),b===null?fn.stop():fn.start()},Pe.addEventListener("sessionstart",ba),Pe.addEventListener("sessionend",wa),this.render=function(b,P){if(P!==void 0&&P.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(v===!0)return;b.autoUpdate===!0&&b.updateMatrixWorld(),P.parent===null&&P.updateMatrixWorld(),Pe.enabled===!0&&Pe.isPresenting===!0&&(Pe.cameraAutoUpdate===!0&&Pe.updateCamera(P),P=Pe.getCamera()),b.isScene===!0&&b.onBeforeRender(y,b,P,E),d=ae.get(b,g.length),d.init(),g.push(d),Ee.multiplyMatrices(P.projectionMatrix,P.matrixWorldInverse),K.setFromProjectionMatrix(Ee),ye=this.localClippingEnabled,le=Me.init(this.clippingPlanes,ye,P),u=J.get(b,p.length),u.init(),p.push(u),Sa(b,P,0,y.sortObjects),u.finish(),y.sortObjects===!0&&u.sort($,I),le===!0&&Me.beginShadows();const z=d.state.shadowsArray;if(ge.render(z,b,P),le===!0&&Me.endShadows(),this.info.autoReset===!0&&this.info.reset(),Se.render(u,b),d.setupLights(y.physicallyCorrectLights),P.isArrayCamera){const F=P.cameras;for(let V=0,Te=F.length;V<Te;V++){const be=F[V];Ea(u,b,be,be.viewport)}}else Ea(u,b,P);E!==null&&(Z.updateMultisampleRenderTarget(E),Z.updateRenderTargetMipmap(E)),b.isScene===!0&&b.onAfterRender(y,b,P),ue.buffers.depth.setTest(!0),ue.buffers.depth.setMask(!0),ue.buffers.color.setMask(!0),ue.setPolygonOffset(!1),me.resetDefaultState(),_=-1,T=null,g.pop(),g.length>0?d=g[g.length-1]:d=null,p.pop(),p.length>0?u=p[p.length-1]:u=null};function Sa(b,P,z,F){if(b.visible===!1)return;if(b.layers.test(P.layers)){if(b.isGroup)z=b.renderOrder;else if(b.isLOD)b.autoUpdate===!0&&b.update(P);else if(b.isLight)d.pushLight(b),b.castShadow&&d.pushShadow(b);else if(b.isSprite){if(!b.frustumCulled||K.intersectsSprite(b)){F&&X.setFromMatrixPosition(b.matrixWorld).applyMatrix4(Ee);const be=M.update(b),_e=b.material;_e.visible&&u.push(b,be,_e,z,X.z,null)}}else if((b.isMesh||b.isLine||b.isPoints)&&(b.isSkinnedMesh&&b.skeleton.frame!==Ce.render.frame&&(b.skeleton.update(),b.skeleton.frame=Ce.render.frame),!b.frustumCulled||K.intersectsObject(b))){F&&X.setFromMatrixPosition(b.matrixWorld).applyMatrix4(Ee);const be=M.update(b),_e=b.material;if(Array.isArray(_e)){const Le=be.groups;for(let ke=0,De=Le.length;ke<De;ke++){const Ie=Le[ke],Xe=_e[Ie.materialIndex];Xe&&Xe.visible&&u.push(b,be,Xe,z,X.z,Ie)}}else _e.visible&&u.push(b,be,_e,z,X.z,null)}}const Te=b.children;for(let be=0,_e=Te.length;be<_e;be++)Sa(Te[be],P,z,F)}function Ea(b,P,z,F){const V=b.opaque,Te=b.transmissive,be=b.transparent;d.setupLightsView(z),Te.length>0&&ac(V,P,z),F&&ue.viewport(C.copy(F)),V.length>0&&Ki(V,P,z),Te.length>0&&Ki(Te,P,z),be.length>0&&Ki(be,P,z)}function ac(b,P,z){if(se===null){const be=r===!0&&re.isWebGL2===!0?dl:It;se=new be(1024,1024,{generateMipmaps:!0,type:q.convert(Qn)!==null?Qn:ln,minFilter:Ws,magFilter:et,wrapS:xt,wrapT:xt})}const F=y.getRenderTarget();y.setRenderTarget(se),y.clear();const V=y.toneMapping;y.toneMapping=En,Ki(b,P,z),y.toneMapping=V,Z.updateMultisampleRenderTarget(se),Z.updateRenderTargetMipmap(se),y.setRenderTarget(F)}function Ki(b,P,z){const F=P.isScene===!0?P.overrideMaterial:null;for(let V=0,Te=b.length;V<Te;V++){const be=b[V],_e=be.object,Le=be.geometry,ke=F===null?be.material:F,De=be.group;_e.layers.test(z.layers)&&oc(_e,P,z,Le,ke,De)}}function oc(b,P,z,F,V,Te){b.onBeforeRender(y,P,z,F,V,Te),b.modelViewMatrix.multiplyMatrices(z.matrixWorldInverse,b.matrixWorld),b.normalMatrix.getNormalMatrix(b.modelViewMatrix),V.onBeforeRender(y,P,z,F,b,Te),V.transparent===!0&&V.side===ni?(V.side=je,V.needsUpdate=!0,y.renderBufferDirect(z,P,F,V,b,Te),V.side=Bi,V.needsUpdate=!0,y.renderBufferDirect(z,P,F,V,b,Te),V.side=ni):y.renderBufferDirect(z,P,F,V,b,Te),b.onAfterRender(y,P,z,F,V,Te)}function tr(b,P,z){P.isScene!==!0&&(P=Q);const F=O.get(b),V=d.state.lights,Te=d.state.shadowsArray,be=V.state.version,_e=G.getParameters(b,V.state,Te,P,z),Le=G.getProgramCacheKey(_e);let ke=F.programs;F.environment=b.isMeshStandardMaterial?P.environment:null,F.fog=P.fog,F.envMap=(b.isMeshStandardMaterial?pe:ee).get(b.envMap||F.environment),ke===void 0&&(b.addEventListener("dispose",Wt),ke=new Map,F.programs=ke);let De=ke.get(Le);if(De!==void 0){if(F.currentProgram===De&&F.lightsStateVersion===be)return Ta(b,_e),De}else _e.uniforms=G.getUniforms(b),b.onBuild(z,_e,y),b.onBeforeCompile(_e,y),De=G.acquireProgram(_e,Le),ke.set(Le,De),F.uniforms=_e.uniforms;const Ie=F.uniforms;(!b.isShaderMaterial&&!b.isRawShaderMaterial||b.clipping===!0)&&(Ie.clippingPlanes=Me.uniform),Ta(b,_e),F.needsLights=hc(b),F.lightsStateVersion=be,F.needsLights&&(Ie.ambientLightColor.value=V.state.ambient,Ie.lightProbe.value=V.state.probe,Ie.directionalLights.value=V.state.directional,Ie.directionalLightShadows.value=V.state.directionalShadow,Ie.spotLights.value=V.state.spot,Ie.spotLightShadows.value=V.state.spotShadow,Ie.rectAreaLights.value=V.state.rectArea,Ie.ltc_1.value=V.state.rectAreaLTC1,Ie.ltc_2.value=V.state.rectAreaLTC2,Ie.pointLights.value=V.state.point,Ie.pointLightShadows.value=V.state.pointShadow,Ie.hemisphereLights.value=V.state.hemi,Ie.directionalShadowMap.value=V.state.directionalShadowMap,Ie.directionalShadowMatrix.value=V.state.directionalShadowMatrix,Ie.spotShadowMap.value=V.state.spotShadowMap,Ie.spotShadowMatrix.value=V.state.spotShadowMatrix,Ie.pointShadowMap.value=V.state.pointShadowMap,Ie.pointShadowMatrix.value=V.state.pointShadowMatrix);const Xe=De.getUniforms(),mn=an.seqWithValue(Xe.seq,Ie);return F.currentProgram=De,F.uniformsList=mn,De}function Ta(b,P){const z=O.get(b);z.outputEncoding=P.outputEncoding,z.instancing=P.instancing,z.skinning=P.skinning,z.morphTargets=P.morphTargets,z.morphNormals=P.morphNormals,z.morphTargetsCount=P.morphTargetsCount,z.numClippingPlanes=P.numClippingPlanes,z.numIntersection=P.numClipIntersection,z.vertexAlphas=P.vertexAlphas,z.vertexTangents=P.vertexTangents}function lc(b,P,z,F,V){P.isScene!==!0&&(P=Q),Z.resetTextureUnits();const Te=P.fog,be=F.isMeshStandardMaterial?P.environment:null,_e=E===null?y.outputEncoding:E.texture.encoding,Le=(F.isMeshStandardMaterial?pe:ee).get(F.envMap||be),ke=F.vertexColors===!0&&!!z.attributes.color&&z.attributes.color.itemSize===4,De=!!F.normalMap&&!!z.attributes.tangent,Ie=!!z.morphAttributes.position,Xe=!!z.morphAttributes.normal,mn=z.morphAttributes.position?z.morphAttributes.position.length:0,Ue=O.get(F),mi=d.state.lights;if(le===!0&&(ye===!0||b!==T)){const Et=b===T&&F.id===_;Me.setState(F,b,Et)}let Ve=!1;F.version===Ue.__version?(Ue.needsLights&&Ue.lightsStateVersion!==mi.state.version||Ue.outputEncoding!==_e||V.isInstancedMesh&&Ue.instancing===!1||!V.isInstancedMesh&&Ue.instancing===!0||V.isSkinnedMesh&&Ue.skinning===!1||!V.isSkinnedMesh&&Ue.skinning===!0||Ue.envMap!==Le||F.fog&&Ue.fog!==Te||Ue.numClippingPlanes!==void 0&&(Ue.numClippingPlanes!==Me.numPlanes||Ue.numIntersection!==Me.numIntersection)||Ue.vertexAlphas!==ke||Ue.vertexTangents!==De||Ue.morphTargets!==Ie||Ue.morphNormals!==Xe||re.isWebGL2===!0&&Ue.morphTargetsCount!==mn)&&(Ve=!0):(Ve=!0,Ue.__version=F.version);let gn=Ue.currentProgram;Ve===!0&&(gn=tr(F,P,V));let yn=!1,vn=!1,qt=!1;const Ye=gn.getUniforms(),gi=Ue.uniforms;if(ue.useProgram(gn.program)&&(yn=!0,vn=!0,qt=!0),F.id!==_&&(_=F.id,vn=!0),yn||T!==b){if(Ye.setValue(H,"projectionMatrix",b.projectionMatrix),re.logarithmicDepthBuffer&&Ye.setValue(H,"logDepthBufFC",2/(Math.log(b.far+1)/Math.LN2)),T!==b&&(T=b,vn=!0,qt=!0),F.isShaderMaterial||F.isMeshPhongMaterial||F.isMeshToonMaterial||F.isMeshStandardMaterial||F.envMap){const Et=Ye.map.cameraPosition;Et!==void 0&&Et.setValue(H,X.setFromMatrixPosition(b.matrixWorld))}(F.isMeshPhongMaterial||F.isMeshToonMaterial||F.isMeshLambertMaterial||F.isMeshBasicMaterial||F.isMeshStandardMaterial||F.isShaderMaterial)&&Ye.setValue(H,"isOrthographic",b.isOrthographicCamera===!0),(F.isMeshPhongMaterial||F.isMeshToonMaterial||F.isMeshLambertMaterial||F.isMeshBasicMaterial||F.isMeshStandardMaterial||F.isShaderMaterial||F.isShadowMaterial||V.isSkinnedMesh)&&Ye.setValue(H,"viewMatrix",b.matrixWorldInverse)}if(V.isSkinnedMesh){Ye.setOptional(H,V,"bindMatrix"),Ye.setOptional(H,V,"bindMatrixInverse");const Et=V.skeleton;Et&&(re.floatVertexTextures?(Et.boneTexture===null&&Et.computeBoneTexture(),Ye.setValue(H,"boneTexture",Et.boneTexture,Z),Ye.setValue(H,"boneTextureSize",Et.boneTextureSize)):Ye.setOptional(H,Et,"boneMatrices"))}return z&&(z.morphAttributes.position!==void 0||z.morphAttributes.normal!==void 0)&&fe.update(V,z,F,gn),(vn||Ue.receiveShadow!==V.receiveShadow)&&(Ue.receiveShadow=V.receiveShadow,Ye.setValue(H,"receiveShadow",V.receiveShadow)),vn&&(Ye.setValue(H,"toneMappingExposure",y.toneMappingExposure),Ue.needsLights&&cc(gi,qt),Te&&F.fog&&j.refreshFogUniforms(gi,Te),j.refreshMaterialUniforms(gi,F,A,N,se),an.upload(H,Ue.uniformsList,gi,Z)),F.isShaderMaterial&&F.uniformsNeedUpdate===!0&&(an.upload(H,Ue.uniformsList,gi,Z),F.uniformsNeedUpdate=!1),F.isSpriteMaterial&&Ye.setValue(H,"center",V.center),Ye.setValue(H,"modelViewMatrix",V.modelViewMatrix),Ye.setValue(H,"normalMatrix",V.normalMatrix),Ye.setValue(H,"modelMatrix",V.matrixWorld),gn}function cc(b,P){b.ambientLightColor.needsUpdate=P,b.lightProbe.needsUpdate=P,b.directionalLights.needsUpdate=P,b.directionalLightShadows.needsUpdate=P,b.pointLights.needsUpdate=P,b.pointLightShadows.needsUpdate=P,b.spotLights.needsUpdate=P,b.spotLightShadows.needsUpdate=P,b.rectAreaLights.needsUpdate=P,b.hemisphereLights.needsUpdate=P}function hc(b){return b.isMeshLambertMaterial||b.isMeshToonMaterial||b.isMeshPhongMaterial||b.isMeshStandardMaterial||b.isShadowMaterial||b.isShaderMaterial&&b.lights===!0}this.getActiveCubeFace=function(){return f},this.getActiveMipmapLevel=function(){return m},this.getRenderTarget=function(){return E},this.setRenderTarget=function(b,P=0,z=0){E=b,f=P,m=z,b&&O.get(b).__webglFramebuffer===void 0&&Z.setupRenderTarget(b);let F=null,V=!1,Te=!1;if(b){const _e=b.texture;(_e.isDataTexture3D||_e.isDataTexture2DArray)&&(Te=!0);const Le=O.get(b).__webglFramebuffer;b.isWebGLCubeRenderTarget?(F=Le[P],V=!0):b.isWebGLMultisampleRenderTarget?F=O.get(b).__webglMultisampledFramebuffer:F=Le,C.copy(b.viewport),x.copy(b.scissor),R=b.scissorTest}else C.copy(D).multiplyScalar(A).floor(),x.copy(k).multiplyScalar(A).floor(),R=U;if(ue.bindFramebuffer(36160,F)&&re.drawBuffers){let _e=!1;if(b)if(b.isWebGLMultipleRenderTargets){const Le=b.texture;if(B.length!==Le.length||B[0]!==36064){for(let ke=0,De=Le.length;ke<De;ke++)B[ke]=36064+ke;B.length=Le.length,_e=!0}}else(B.length!==1||B[0]!==36064)&&(B[0]=36064,B.length=1,_e=!0);else(B.length!==1||B[0]!==1029)&&(B[0]=1029,B.length=1,_e=!0);_e&&(re.isWebGL2?H.drawBuffers(B):we.get("WEBGL_draw_buffers").drawBuffersWEBGL(B))}if(ue.viewport(C),ue.scissor(x),ue.setScissorTest(R),V){const _e=O.get(b.texture);H.framebufferTexture2D(36160,36064,34069+P,_e.__webglTexture,z)}else if(Te){const _e=O.get(b.texture),Le=P||0;H.framebufferTextureLayer(36160,36064,_e.__webglTexture,z||0,Le)}_=-1},this.readRenderTargetPixels=function(b,P,z,F,V,Te,be){if(!(b&&b.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let _e=O.get(b).__webglFramebuffer;if(b.isWebGLCubeRenderTarget&&be!==void 0&&(_e=_e[be]),_e){ue.bindFramebuffer(36160,_e);try{const Le=b.texture,ke=Le.format,De=Le.type;if(ke!==ut&&q.convert(ke)!==H.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const Ie=De===Qn&&(we.has("EXT_color_buffer_half_float")||re.isWebGL2&&we.has("EXT_color_buffer_float"));if(De!==ln&&q.convert(De)!==H.getParameter(35738)&&!(De===tn&&(re.isWebGL2||we.has("OES_texture_float")||we.has("WEBGL_color_buffer_float")))&&!Ie){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}H.checkFramebufferStatus(36160)===36053?P>=0&&P<=b.width-F&&z>=0&&z<=b.height-V&&H.readPixels(P,z,F,V,q.convert(ke),q.convert(De),Te):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const Le=E!==null?O.get(E).__webglFramebuffer:null;ue.bindFramebuffer(36160,Le)}}},this.copyFramebufferToTexture=function(b,P,z=0){const F=Math.pow(2,-z),V=Math.floor(P.image.width*F),Te=Math.floor(P.image.height*F);let be=q.convert(P.format);re.isWebGL2&&(be===6407&&(be=32849),be===6408&&(be=32856)),Z.setTexture2D(P,0),H.copyTexImage2D(3553,z,be,b.x,b.y,V,Te,0),ue.unbindTexture()},this.copyTextureToTexture=function(b,P,z,F=0){const V=P.image.width,Te=P.image.height,be=q.convert(z.format),_e=q.convert(z.type);Z.setTexture2D(z,0),H.pixelStorei(37440,z.flipY),H.pixelStorei(37441,z.premultiplyAlpha),H.pixelStorei(3317,z.unpackAlignment),P.isDataTexture?H.texSubImage2D(3553,F,b.x,b.y,V,Te,be,_e,P.image.data):P.isCompressedTexture?H.compressedTexSubImage2D(3553,F,b.x,b.y,P.mipmaps[0].width,P.mipmaps[0].height,be,P.mipmaps[0].data):H.texSubImage2D(3553,F,b.x,b.y,be,_e,P.image),F===0&&z.generateMipmaps&&H.generateMipmap(3553),ue.unbindTexture()},this.copyTextureToTexture3D=function(b,P,z,F,V=0){if(y.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const Te=b.max.x-b.min.x+1,be=b.max.y-b.min.y+1,_e=b.max.z-b.min.z+1,Le=q.convert(F.format),ke=q.convert(F.type);let De;if(F.isDataTexture3D)Z.setTexture3D(F,0),De=32879;else if(F.isDataTexture2DArray)Z.setTexture2DArray(F,0),De=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}H.pixelStorei(37440,F.flipY),H.pixelStorei(37441,F.premultiplyAlpha),H.pixelStorei(3317,F.unpackAlignment);const Ie=H.getParameter(3314),Xe=H.getParameter(32878),mn=H.getParameter(3316),Ue=H.getParameter(3315),mi=H.getParameter(32877),Ve=z.isCompressedTexture?z.mipmaps[0]:z.image;H.pixelStorei(3314,Ve.width),H.pixelStorei(32878,Ve.height),H.pixelStorei(3316,b.min.x),H.pixelStorei(3315,b.min.y),H.pixelStorei(32877,b.min.z),z.isDataTexture||z.isDataTexture3D?H.texSubImage3D(De,V,P.x,P.y,P.z,Te,be,_e,Le,ke,Ve.data):z.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),H.compressedTexSubImage3D(De,V,P.x,P.y,P.z,Te,be,_e,Le,Ve.data)):H.texSubImage3D(De,V,P.x,P.y,P.z,Te,be,_e,Le,ke,Ve),H.pixelStorei(3314,Ie),H.pixelStorei(32878,Xe),H.pixelStorei(3316,mn),H.pixelStorei(3315,Ue),H.pixelStorei(32877,mi),V===0&&F.generateMipmaps&&H.generateMipmap(De),ue.unbindTexture()},this.initTexture=function(b){Z.setTexture2D(b,0),ue.unbindTexture()},this.resetState=function(){f=0,m=0,E=null,ue.reset(),me.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}Fe.prototype.isWebGLRenderer=!0;class Cm extends Fe{}Cm.prototype.isWebGL1Renderer=!0;class $s extends Ne{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),t}}$s.prototype.isScene=!0;class $i{constructor(e,t){this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=Gi,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Dt()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let i=0,s=this.stride;i<s;i++)this.array[e+i]=t.array[n+i];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Dt()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Dt()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}$i.prototype.isInterleavedBuffer=!0;const $e=new w;class Oi{constructor(e,t,n,i=!1){this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=i===!0}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)$e.x=this.getX(t),$e.y=this.getY(t),$e.z=this.getZ(t),$e.applyMatrix4(e),this.setXYZ(t,$e.x,$e.y,$e.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)$e.x=this.getX(t),$e.y=this.getY(t),$e.z=this.getZ(t),$e.applyNormalMatrix(e),this.setXYZ(t,$e.x,$e.y,$e.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)$e.x=this.getX(t),$e.y=this.getY(t),$e.z=this.getZ(t),$e.transformDirection(e),this.setXYZ(t,$e.x,$e.y,$e.z);return this}setX(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){return this.data.array[e*this.data.stride+this.offset]}getY(e){return this.data.array[e*this.data.stride+this.offset+1]}getZ(e){return this.data.array[e*this.data.stride+this.offset+2]}getW(e){return this.data.array[e*this.data.stride+this.offset+3]}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=s,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return new Qe(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new Oi(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}Oi.prototype.isInterleavedBufferAttribute=!0;class si extends ht{constructor(e){super(),this.type="SpriteMaterial",this.color=new de(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this}}si.prototype.isSpriteMaterial=!0;let Wn;const bi=new w,qn=new w,Xn=new w,Yn=new Y,wi=new Y,Dl=new xe,xs=new w,Si=new w,_s=new w,Ao=new Y,Ir=new Y,Lo=new Y;class nn extends Ne{constructor(e){if(super(),this.type="Sprite",Wn===void 0){Wn=new Oe;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),n=new $i(t,5);Wn.setIndex([0,1,2,0,2,3]),Wn.setAttribute("position",new Oi(n,3,0,!1)),Wn.setAttribute("uv",new Oi(n,2,3,!1))}this.geometry=Wn,this.material=e!==void 0?e:new si,this.center=new Y(.5,.5)}raycast(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),qn.setFromMatrixScale(this.matrixWorld),Dl.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),Xn.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&qn.multiplyScalar(-Xn.z);const n=this.material.rotation;let i,s;n!==0&&(s=Math.cos(n),i=Math.sin(n));const r=this.center;Ms(xs.set(-.5,-.5,0),Xn,r,qn,i,s),Ms(Si.set(.5,-.5,0),Xn,r,qn,i,s),Ms(_s.set(.5,.5,0),Xn,r,qn,i,s),Ao.set(0,0),Ir.set(1,0),Lo.set(1,1);let o=e.ray.intersectTriangle(xs,Si,_s,!1,bi);if(o===null&&(Ms(Si.set(-.5,.5,0),Xn,r,qn,i,s),Ir.set(0,1),o=e.ray.intersectTriangle(xs,_s,Si,!1,bi),o===null))return;const l=e.ray.origin.distanceTo(bi);l<e.near||l>e.far||t.push({distance:l,point:bi.clone(),uv:Je.getUV(bi,xs,Si,_s,Ao,Ir,Lo,new Y),face:null,object:this})}copy(e){return super.copy(e),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}nn.prototype.isSprite=!0;function Ms(a,e,t,n,i,s){Yn.subVectors(a,t).addScalar(.5).multiply(n),i!==void 0?(wi.x=s*Yn.x-i*Yn.y,wi.y=i*Yn.x+s*Yn.y):wi.copy(Yn),a.copy(e),a.x+=wi.x,a.y+=wi.y,a.applyMatrix4(Dl)}const Ro=new w,Po=new ze,Do=new ze,Am=new w,Io=new xe;class Il extends oe{constructor(e,t){super(e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new xe,this.bindMatrixInverse=new xe}copy(e){return super.copy(e),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,this}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new ze,t=this.geometry.attributes.skinWeight;for(let n=0,i=t.count;n<i;n++){e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.w=t.getW(n);const s=1/e.manhattanLength();s!==1/0?e.multiplyScalar(s):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode==="attached"?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode==="detached"?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(e,t){const n=this.skeleton,i=this.geometry;Po.fromBufferAttribute(i.attributes.skinIndex,e),Do.fromBufferAttribute(i.attributes.skinWeight,e),Ro.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let s=0;s<4;s++){const r=Do.getComponent(s);if(r!==0){const o=Po.getComponent(s);Io.multiplyMatrices(n.bones[o].matrixWorld,n.boneInverses[o]),t.addScaledVector(Am.copy(Ro).applyMatrix4(Io),r)}}return t.applyMatrix4(this.bindMatrixInverse)}}Il.prototype.isSkinnedMesh=!0;class Lm extends Ne{constructor(){super(),this.type="Bone"}}Lm.prototype.isBone=!0;class Rm extends st{constructor(e=null,t=1,n=1,i,s,r,o,l,c=et,h=et,u,d){super(null,r,o,l,c,h,i,s,u,d),this.image={data:e,width:t,height:n},this.magFilter=c,this.minFilter=h,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}Rm.prototype.isDataTexture=!0;class $r extends Qe{constructor(e,t,n,i=1){typeof n=="number"&&(i=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(e,t,n),this.meshPerAttribute=i}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}$r.prototype.isInstancedBufferAttribute=!0;const Uo=new xe,No=new xe,bs=[],Ei=new oe;class Pm extends oe{constructor(e,t,n){super(e,t),this.instanceMatrix=new $r(new Float32Array(n*16),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(e){return super.copy(e),this.instanceMatrix.copy(e.instanceMatrix),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}raycast(e,t){const n=this.matrixWorld,i=this.count;if(Ei.geometry=this.geometry,Ei.material=this.material,Ei.material!==void 0)for(let s=0;s<i;s++){this.getMatrixAt(s,Uo),No.multiplyMatrices(n,Uo),Ei.matrixWorld=No,Ei.raycast(e,bs);for(let r=0,o=bs.length;r<o;r++){const l=bs[r];l.instanceId=s,l.object=this,t.push(l)}bs.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new $r(new Float32Array(this.instanceMatrix.count*3),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}Pm.prototype.isInstancedMesh=!0;class ji extends ht{constructor(e){super(),this.type="LineBasicMaterial",this.color=new de(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this}}ji.prototype.isLineBasicMaterial=!0;const Fo=new w,ko=new w,Bo=new xe,Ur=new ci,ws=new li;class ha extends Ne{constructor(e=new Oe,t=new ji){super(),this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),this.material=e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.isBufferGeometry)if(e.index===null){const t=e.attributes.position,n=[0];for(let i=1,s=t.count;i<s;i++)Fo.fromBufferAttribute(t,i-1),ko.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=Fo.distanceTo(ko);e.setAttribute("lineDistance",new Ge(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else e.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Line.threshold,r=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),ws.copy(n.boundingSphere),ws.applyMatrix4(i),ws.radius+=s,e.ray.intersectsSphere(ws)===!1)return;Bo.copy(i).invert(),Ur.copy(e.ray).applyMatrix4(Bo);const o=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o,c=new w,h=new w,u=new w,d=new w,p=this.isLineSegments?2:1;if(n.isBufferGeometry){const g=n.index,v=n.attributes.position;if(g!==null){const f=Math.max(0,r.start),m=Math.min(g.count,r.start+r.count);for(let E=f,_=m-1;E<_;E+=p){const T=g.getX(E),C=g.getX(E+1);if(c.fromBufferAttribute(v,T),h.fromBufferAttribute(v,C),Ur.distanceSqToSegment(c,h,d,u)>l)continue;d.applyMatrix4(this.matrixWorld);const R=e.ray.origin.distanceTo(d);R<e.near||R>e.far||t.push({distance:R,point:u.clone().applyMatrix4(this.matrixWorld),index:E,face:null,faceIndex:null,object:this})}}else{const f=Math.max(0,r.start),m=Math.min(v.count,r.start+r.count);for(let E=f,_=m-1;E<_;E+=p){if(c.fromBufferAttribute(v,E),h.fromBufferAttribute(v,E+1),Ur.distanceSqToSegment(c,h,d,u)>l)continue;d.applyMatrix4(this.matrixWorld);const C=e.ray.origin.distanceTo(d);C<e.near||C>e.far||t.push({distance:C,point:u.clone().applyMatrix4(this.matrixWorld),index:E,face:null,faceIndex:null,object:this})}}}else n.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,r=i.length;s<r;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}ha.prototype.isLine=!0;const zo=new w,Go=new w;class ua extends ha{constructor(e,t){super(e,t),this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.isBufferGeometry)if(e.index===null){const t=e.attributes.position,n=[];for(let i=0,s=t.count;i<s;i+=2)zo.fromBufferAttribute(t,i),Go.fromBufferAttribute(t,i+1),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+zo.distanceTo(Go);e.setAttribute("lineDistance",new Ge(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else e.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}ua.prototype.isLineSegments=!0;class Dm extends ha{constructor(e,t){super(e,t),this.type="LineLoop"}}Dm.prototype.isLineLoop=!0;class Ul extends ht{constructor(e){super(),this.type="PointsMaterial",this.color=new de(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this}}Ul.prototype.isPointsMaterial=!0;const Oo=new xe,jr=new ci,Ss=new li,Es=new w;class Im extends Ne{constructor(e=new Oe,t=new Ul){super(),this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),this.material=e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Points.threshold,r=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),Ss.copy(n.boundingSphere),Ss.applyMatrix4(i),Ss.radius+=s,e.ray.intersectsSphere(Ss)===!1)return;Oo.copy(i).invert(),jr.copy(e.ray).applyMatrix4(Oo);const o=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o;if(n.isBufferGeometry){const c=n.index,u=n.attributes.position;if(c!==null){const d=Math.max(0,r.start),p=Math.min(c.count,r.start+r.count);for(let g=d,y=p;g<y;g++){const v=c.getX(g);Es.fromBufferAttribute(u,v),Ho(Es,v,l,i,e,t,this)}}else{const d=Math.max(0,r.start),p=Math.min(u.count,r.start+r.count);for(let g=d,y=p;g<y;g++)Es.fromBufferAttribute(u,g),Ho(Es,g,l,i,e,t,this)}}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,r=i.length;s<r;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}Im.prototype.isPoints=!0;function Ho(a,e,t,n,i,s,r){const o=jr.distanceSqToPoint(a);if(o<t){const l=new w;jr.closestPointToPoint(a,l),l.applyMatrix4(n);const c=i.ray.origin.distanceTo(l);if(c<i.near||c>i.far)return;s.push({distance:c,distanceToRay:Math.sqrt(o),point:l,index:e,face:null,object:r})}}class Um extends st{constructor(e,t,n,i,s,r,o,l,c){super(e,t,n,i,s,r,o,l,c),this.format=o!==void 0?o:Kn,this.minFilter=r!==void 0?r:Mt,this.magFilter=s!==void 0?s:Mt,this.generateMipmaps=!1;const h=this;function u(){h.needsUpdate=!0,e.requestVideoFrameCallback(u)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(u)}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;"requestVideoFrameCallback"in e===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}Um.prototype.isVideoTexture=!0;class Nm extends st{constructor(e,t,n,i,s,r,o,l,c,h,u,d){super(null,r,o,l,c,h,i,s,u,d),this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}Nm.prototype.isCompressedTexture=!0;class Ui extends st{constructor(e,t,n,i,s,r,o,l,c){super(e,t,n,i,s,r,o,l,c),this.needsUpdate=!0}}Ui.prototype.isCanvasTexture=!0;class Fm extends st{constructor(e,t,n,i,s,r,o,l,c,h){if(h=h!==void 0?h:ei,h!==ei&&h!==zi)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&h===ei&&(n=Is),n===void 0&&h===zi&&(n=Ii),super(null,i,s,r,o,l,h,n,c),this.image={width:e,height:t},this.magFilter=o!==void 0?o:et,this.minFilter=l!==void 0?l:et,this.flipY=!1,this.generateMipmaps=!1}}Fm.prototype.isDepthTexture=!0;class da extends Oe{constructor(e=1,t=8,n=0,i=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:i},t=Math.max(3,t);const s=[],r=[],o=[],l=[],c=new w,h=new Y;r.push(0,0,0),o.push(0,0,1),l.push(.5,.5);for(let u=0,d=3;u<=t;u++,d+=3){const p=n+u/t*i;c.x=e*Math.cos(p),c.y=e*Math.sin(p),r.push(c.x,c.y,c.z),o.push(0,0,1),h.x=(r[d]/e+1)/2,h.y=(r[d+1]/e+1)/2,l.push(h.x,h.y)}for(let u=1;u<=t;u++)s.push(u,u+1,0);this.setIndex(s),this.setAttribute("position",new Ge(r,3)),this.setAttribute("normal",new Ge(o,3)),this.setAttribute("uv",new Ge(l,2))}static fromJSON(e){return new da(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class hn extends Oe{constructor(e=1,t=1,n=1,i=8,s=1,r=!1,o=0,l=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:s,openEnded:r,thetaStart:o,thetaLength:l};const c=this;i=Math.floor(i),s=Math.floor(s);const h=[],u=[],d=[],p=[];let g=0;const y=[],v=n/2;let f=0;m(),r===!1&&(e>0&&E(!0),t>0&&E(!1)),this.setIndex(h),this.setAttribute("position",new Ge(u,3)),this.setAttribute("normal",new Ge(d,3)),this.setAttribute("uv",new Ge(p,2));function m(){const _=new w,T=new w;let C=0;const x=(t-e)/n;for(let R=0;R<=s;R++){const W=[],N=R/s,A=N*(t-e)+e;for(let $=0;$<=i;$++){const I=$/i,D=I*l+o,k=Math.sin(D),U=Math.cos(D);T.x=A*k,T.y=-N*n+v,T.z=A*U,u.push(T.x,T.y,T.z),_.set(k,x,U).normalize(),d.push(_.x,_.y,_.z),p.push(I,1-N),W.push(g++)}y.push(W)}for(let R=0;R<i;R++)for(let W=0;W<s;W++){const N=y[W][R],A=y[W+1][R],$=y[W+1][R+1],I=y[W][R+1];h.push(N,A,I),h.push(A,$,I),C+=6}c.addGroup(f,C,0),f+=C}function E(_){const T=g,C=new Y,x=new w;let R=0;const W=_===!0?e:t,N=_===!0?1:-1;for(let $=1;$<=i;$++)u.push(0,v*N,0),d.push(0,N,0),p.push(.5,.5),g++;const A=g;for(let $=0;$<=i;$++){const D=$/i*l+o,k=Math.cos(D),U=Math.sin(D);x.x=W*U,x.y=v*N,x.z=W*k,u.push(x.x,x.y,x.z),d.push(0,N,0),C.x=k*.5+.5,C.y=U*.5*N+.5,p.push(C.x,C.y),g++}for(let $=0;$<i;$++){const I=T+$,D=A+$;_===!0?h.push(D,D+1,I):h.push(D+1,D,I),R+=3}c.addGroup(f,R,_===!0?1:2),f+=R}}static fromJSON(e){return new hn(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class js extends hn{constructor(e=1,t=1,n=8,i=1,s=!1,r=0,o=Math.PI*2){super(0,e,t,n,i,s,r,o),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:i,openEnded:s,thetaStart:r,thetaLength:o}}static fromJSON(e){return new js(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class wt{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let n,i=this.getPoint(0),s=0;t.push(0);for(let r=1;r<=e;r++)n=this.getPoint(r/e),s+=n.distanceTo(i),t.push(s),i=n;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const n=this.getLengths();let i=0;const s=n.length;let r;t?r=t:r=e*n[s-1];let o=0,l=s-1,c;for(;o<=l;)if(i=Math.floor(o+(l-o)/2),c=n[i]-r,c<0)o=i+1;else if(c>0)l=i-1;else{l=i;break}if(i=l,n[i]===r)return i/(s-1);const h=n[i],d=n[i+1]-h,p=(r-h)/d;return(i+p)/(s-1)}getTangent(e,t){let i=e-1e-4,s=e+1e-4;i<0&&(i=0),s>1&&(s=1);const r=this.getPoint(i),o=this.getPoint(s),l=t||(r.isVector2?new Y:new w);return l.copy(o).sub(r).normalize(),l}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,t){const n=new w,i=[],s=[],r=[],o=new w,l=new xe;for(let p=0;p<=e;p++){const g=p/e;i[p]=this.getTangentAt(g,new w)}s[0]=new w,r[0]=new w;let c=Number.MAX_VALUE;const h=Math.abs(i[0].x),u=Math.abs(i[0].y),d=Math.abs(i[0].z);h<=c&&(c=h,n.set(1,0,0)),u<=c&&(c=u,n.set(0,1,0)),d<=c&&n.set(0,0,1),o.crossVectors(i[0],n).normalize(),s[0].crossVectors(i[0],o),r[0].crossVectors(i[0],s[0]);for(let p=1;p<=e;p++){if(s[p]=s[p-1].clone(),r[p]=r[p-1].clone(),o.crossVectors(i[p-1],i[p]),o.length()>Number.EPSILON){o.normalize();const g=Math.acos(vt(i[p-1].dot(i[p]),-1,1));s[p].applyMatrix4(l.makeRotationAxis(o,g))}r[p].crossVectors(i[p],s[p])}if(t===!0){let p=Math.acos(vt(s[0].dot(s[e]),-1,1));p/=e,i[0].dot(o.crossVectors(s[0],s[e]))>0&&(p=-p);for(let g=1;g<=e;g++)s[g].applyMatrix4(l.makeRotationAxis(i[g],p*g)),r[g].crossVectors(i[g],s[g])}return{tangents:i,normals:s,binormals:r}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class Js extends wt{constructor(e=0,t=0,n=1,i=1,s=0,r=Math.PI*2,o=!1,l=0){super(),this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=n,this.yRadius=i,this.aStartAngle=s,this.aEndAngle=r,this.aClockwise=o,this.aRotation=l}getPoint(e,t){const n=t||new Y,i=Math.PI*2;let s=this.aEndAngle-this.aStartAngle;const r=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=i;for(;s>i;)s-=i;s<Number.EPSILON&&(r?s=0:s=i),this.aClockwise===!0&&!r&&(s===i?s=-i:s=s-i);const o=this.aStartAngle+e*s;let l=this.aX+this.xRadius*Math.cos(o),c=this.aY+this.yRadius*Math.sin(o);if(this.aRotation!==0){const h=Math.cos(this.aRotation),u=Math.sin(this.aRotation),d=l-this.aX,p=c-this.aY;l=d*h-p*u+this.aX,c=d*u+p*h+this.aY}return n.set(l,c)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}Js.prototype.isEllipseCurve=!0;class Nl extends Js{constructor(e,t,n,i,s,r){super(e,t,n,n,i,s,r),this.type="ArcCurve"}}Nl.prototype.isArcCurve=!0;function pa(){let a=0,e=0,t=0,n=0;function i(s,r,o,l){a=s,e=o,t=-3*s+3*r-2*o-l,n=2*s-2*r+o+l}return{initCatmullRom:function(s,r,o,l,c){i(r,o,c*(o-s),c*(l-r))},initNonuniformCatmullRom:function(s,r,o,l,c,h,u){let d=(r-s)/c-(o-s)/(c+h)+(o-r)/h,p=(o-r)/h-(l-r)/(h+u)+(l-o)/u;d*=h,p*=h,i(r,o,d,p)},calc:function(s){const r=s*s,o=r*s;return a+e*s+t*r+n*o}}}const Ts=new w,Nr=new pa,Fr=new pa,kr=new pa;class Fl extends wt{constructor(e=[],t=!1,n="centripetal",i=.5){super(),this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=n,this.tension=i}getPoint(e,t=new w){const n=t,i=this.points,s=i.length,r=(s-(this.closed?0:1))*e;let o=Math.floor(r),l=r-o;this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/s)+1)*s:l===0&&o===s-1&&(o=s-2,l=1);let c,h;this.closed||o>0?c=i[(o-1)%s]:(Ts.subVectors(i[0],i[1]).add(i[0]),c=Ts);const u=i[o%s],d=i[(o+1)%s];if(this.closed||o+2<s?h=i[(o+2)%s]:(Ts.subVectors(i[s-1],i[s-2]).add(i[s-1]),h=Ts),this.curveType==="centripetal"||this.curveType==="chordal"){const p=this.curveType==="chordal"?.5:.25;let g=Math.pow(c.distanceToSquared(u),p),y=Math.pow(u.distanceToSquared(d),p),v=Math.pow(d.distanceToSquared(h),p);y<1e-4&&(y=1),g<1e-4&&(g=y),v<1e-4&&(v=y),Nr.initNonuniformCatmullRom(c.x,u.x,d.x,h.x,g,y,v),Fr.initNonuniformCatmullRom(c.y,u.y,d.y,h.y,g,y,v),kr.initNonuniformCatmullRom(c.z,u.z,d.z,h.z,g,y,v)}else this.curveType==="catmullrom"&&(Nr.initCatmullRom(c.x,u.x,d.x,h.x,this.tension),Fr.initCatmullRom(c.y,u.y,d.y,h.y,this.tension),kr.initCatmullRom(c.z,u.z,d.z,h.z,this.tension));return n.set(Nr.calc(l),Fr.calc(l),kr.calc(l)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new w().fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}Fl.prototype.isCatmullRomCurve3=!0;function Vo(a,e,t,n,i){const s=(n-e)*.5,r=(i-t)*.5,o=a*a,l=a*o;return(2*t-2*n+s+r)*l+(-3*t+3*n-2*s-r)*o+s*a+t}function km(a,e){const t=1-a;return t*t*e}function Bm(a,e){return 2*(1-a)*a*e}function zm(a,e){return a*a*e}function Ni(a,e,t,n){return km(a,e)+Bm(a,t)+zm(a,n)}function Gm(a,e){const t=1-a;return t*t*t*e}function Om(a,e){const t=1-a;return 3*t*t*a*e}function Hm(a,e){return 3*(1-a)*a*a*e}function Vm(a,e){return a*a*a*e}function Fi(a,e,t,n,i){return Gm(a,e)+Om(a,t)+Hm(a,n)+Vm(a,i)}class fa extends wt{constructor(e=new Y,t=new Y,n=new Y,i=new Y){super(),this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new Y){const n=t,i=this.v0,s=this.v1,r=this.v2,o=this.v3;return n.set(Fi(e,i.x,s.x,r.x,o.x),Fi(e,i.y,s.y,r.y,o.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}fa.prototype.isCubicBezierCurve=!0;class kl extends wt{constructor(e=new w,t=new w,n=new w,i=new w){super(),this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new w){const n=t,i=this.v0,s=this.v1,r=this.v2,o=this.v3;return n.set(Fi(e,i.x,s.x,r.x,o.x),Fi(e,i.y,s.y,r.y,o.y),Fi(e,i.z,s.z,r.z,o.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}kl.prototype.isCubicBezierCurve3=!0;class Qs extends wt{constructor(e=new Y,t=new Y){super(),this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new Y){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t){const n=t||new Y;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}Qs.prototype.isLineCurve=!0;class Wm extends wt{constructor(e=new w,t=new w){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=e,this.v2=t}getPoint(e,t=new w){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class ma extends wt{constructor(e=new Y,t=new Y,n=new Y){super(),this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new Y){const n=t,i=this.v0,s=this.v1,r=this.v2;return n.set(Ni(e,i.x,s.x,r.x),Ni(e,i.y,s.y,r.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}ma.prototype.isQuadraticBezierCurve=!0;class Bl extends wt{constructor(e=new w,t=new w,n=new w){super(),this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new w){const n=t,i=this.v0,s=this.v1,r=this.v2;return n.set(Ni(e,i.x,s.x,r.x),Ni(e,i.y,s.y,r.y),Ni(e,i.z,s.z,r.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}Bl.prototype.isQuadraticBezierCurve3=!0;class ga extends wt{constructor(e=[]){super(),this.type="SplineCurve",this.points=e}getPoint(e,t=new Y){const n=t,i=this.points,s=(i.length-1)*e,r=Math.floor(s),o=s-r,l=i[r===0?r:r-1],c=i[r],h=i[r>i.length-2?i.length-1:r+1],u=i[r>i.length-3?i.length-1:r+2];return n.set(Vo(o,l.x,c.x,h.x,u.x),Vo(o,l.y,c.y,h.y,u.y)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new Y().fromArray(i))}return this}}ga.prototype.isSplineCurve=!0;var zl=Object.freeze({__proto__:null,ArcCurve:Nl,CatmullRomCurve3:Fl,CubicBezierCurve:fa,CubicBezierCurve3:kl,EllipseCurve:Js,LineCurve:Qs,LineCurve3:Wm,QuadraticBezierCurve:ma,QuadraticBezierCurve3:Bl,SplineCurve:ga});class qm extends wt{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new Qs(t,e))}getPoint(e,t){const n=e*this.getLength(),i=this.getCurveLengths();let s=0;for(;s<i.length;){if(i[s]>=n){const r=i[s]-n,o=this.curves[s],l=o.getLength(),c=l===0?0:1-r/l;return o.getPointAt(c,t)}s++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let n;for(let i=0,s=this.curves;i<s.length;i++){const r=s[i],o=r&&r.isEllipseCurve?e*2:r&&(r.isLineCurve||r.isLineCurve3)?1:r&&r.isSplineCurve?e*r.points.length:e,l=r.getPoints(o);for(let c=0;c<l.length;c++){const h=l[c];n&&n.equals(h)||(t.push(h),n=h)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const i=this.curves[t];e.curves.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(new zl[i.type]().fromJSON(i))}return this}}class Jr extends qm{constructor(e){super(),this.type="Path",this.currentPoint=new Y,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const n=new Qs(this.currentPoint.clone(),new Y(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,n,i){const s=new ma(this.currentPoint.clone(),new Y(e,t),new Y(n,i));return this.curves.push(s),this.currentPoint.set(n,i),this}bezierCurveTo(e,t,n,i,s,r){const o=new fa(this.currentPoint.clone(),new Y(e,t),new Y(n,i),new Y(s,r));return this.curves.push(o),this.currentPoint.set(s,r),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),n=new ga(t);return this.curves.push(n),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,n,i,s,r){const o=this.currentPoint.x,l=this.currentPoint.y;return this.absarc(e+o,t+l,n,i,s,r),this}absarc(e,t,n,i,s,r){return this.absellipse(e,t,n,n,i,s,r),this}ellipse(e,t,n,i,s,r,o,l){const c=this.currentPoint.x,h=this.currentPoint.y;return this.absellipse(e+c,t+h,n,i,s,r,o,l),this}absellipse(e,t,n,i,s,r,o,l){const c=new Js(e,t,n,i,s,r,o,l);if(this.curves.length>0){const u=c.getPoint(0);u.equals(this.currentPoint)||this.lineTo(u.x,u.y)}this.curves.push(c);const h=c.getPoint(1);return this.currentPoint.copy(h),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class Ji extends Jr{constructor(e){super(e),this.uuid=Dt(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let n=0,i=this.holes.length;n<i;n++)t[n]=this.holes[n].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,n=this.holes.length;t<n;t++){const i=this.holes[t];e.holes.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(new Jr().fromJSON(i))}return this}}const Xm={triangulate:function(a,e,t=2){const n=e&&e.length,i=n?e[0]*t:a.length;let s=Gl(a,0,i,t,!0);const r=[];if(!s||s.next===s.prev)return r;let o,l,c,h,u,d,p;if(n&&(s=Jm(a,e,s,t)),a.length>80*t){o=c=a[0],l=h=a[1];for(let g=t;g<i;g+=t)u=a[g],d=a[g+1],u<o&&(o=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);p=Math.max(c-o,h-l),p=p!==0?1/p:0}return Hi(s,r,t,o,l,p),r}};function Gl(a,e,t,n,i){let s,r;if(i===lg(a,e,t,n)>0)for(s=e;s<t;s+=n)r=Wo(s,a[s],a[s+1],r);else for(s=t-n;s>=e;s-=n)r=Wo(s,a[s],a[s+1],r);return r&&Ks(r,r.next)&&(Wi(r),r=r.next),r}function un(a,e){if(!a)return a;e||(e=a);let t=a,n;do if(n=!1,!t.steiner&&(Ks(t,t.next)||qe(t.prev,t,t.next)===0)){if(Wi(t),t=e=t.prev,t===t.next)break;n=!0}else t=t.next;while(n||t!==e);return e}function Hi(a,e,t,n,i,s,r){if(!a)return;!r&&s&&ng(a,n,i,s);let o=a,l,c;for(;a.prev!==a.next;){if(l=a.prev,c=a.next,s?Zm(a,n,i,s):Ym(a)){e.push(l.i/t),e.push(a.i/t),e.push(c.i/t),Wi(a),a=c.next,o=c.next;continue}if(a=c,a===o){r?r===1?(a=$m(un(a),e,t),Hi(a,e,t,n,i,s,2)):r===2&&jm(a,e,t,n,i,s):Hi(un(a),e,t,n,i,s,1);break}}}function Ym(a){const e=a.prev,t=a,n=a.next;if(qe(e,t,n)>=0)return!1;let i=a.next.next;for(;i!==a.prev;){if(Jn(e.x,e.y,t.x,t.y,n.x,n.y,i.x,i.y)&&qe(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function Zm(a,e,t,n){const i=a.prev,s=a,r=a.next;if(qe(i,s,r)>=0)return!1;const o=i.x<s.x?i.x<r.x?i.x:r.x:s.x<r.x?s.x:r.x,l=i.y<s.y?i.y<r.y?i.y:r.y:s.y<r.y?s.y:r.y,c=i.x>s.x?i.x>r.x?i.x:r.x:s.x>r.x?s.x:r.x,h=i.y>s.y?i.y>r.y?i.y:r.y:s.y>r.y?s.y:r.y,u=Qr(o,l,e,t,n),d=Qr(c,h,e,t,n);let p=a.prevZ,g=a.nextZ;for(;p&&p.z>=u&&g&&g.z<=d;){if(p!==a.prev&&p!==a.next&&Jn(i.x,i.y,s.x,s.y,r.x,r.y,p.x,p.y)&&qe(p.prev,p,p.next)>=0||(p=p.prevZ,g!==a.prev&&g!==a.next&&Jn(i.x,i.y,s.x,s.y,r.x,r.y,g.x,g.y)&&qe(g.prev,g,g.next)>=0))return!1;g=g.nextZ}for(;p&&p.z>=u;){if(p!==a.prev&&p!==a.next&&Jn(i.x,i.y,s.x,s.y,r.x,r.y,p.x,p.y)&&qe(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;g&&g.z<=d;){if(g!==a.prev&&g!==a.next&&Jn(i.x,i.y,s.x,s.y,r.x,r.y,g.x,g.y)&&qe(g.prev,g,g.next)>=0)return!1;g=g.nextZ}return!0}function $m(a,e,t){let n=a;do{const i=n.prev,s=n.next.next;!Ks(i,s)&&Ol(i,n,n.next,s)&&Vi(i,s)&&Vi(s,i)&&(e.push(i.i/t),e.push(n.i/t),e.push(s.i/t),Wi(n),Wi(n.next),n=a=s),n=n.next}while(n!==a);return un(n)}function jm(a,e,t,n,i,s){let r=a;do{let o=r.next.next;for(;o!==r.prev;){if(r.i!==o.i&&rg(r,o)){let l=Hl(r,o);r=un(r,r.next),l=un(l,l.next),Hi(r,e,t,n,i,s),Hi(l,e,t,n,i,s);return}o=o.next}r=r.next}while(r!==a)}function Jm(a,e,t,n){const i=[];let s,r,o,l,c;for(s=0,r=e.length;s<r;s++)o=e[s]*n,l=s<r-1?e[s+1]*n:a.length,c=Gl(a,o,l,n,!1),c===c.next&&(c.steiner=!0),i.push(sg(c));for(i.sort(Qm),s=0;s<i.length;s++)Km(i[s],t),t=un(t,t.next);return t}function Qm(a,e){return a.x-e.x}function Km(a,e){if(e=eg(a,e),e){const t=Hl(e,a);un(e,e.next),un(t,t.next)}}function eg(a,e){let t=e;const n=a.x,i=a.y;let s=-1/0,r;do{if(i<=t.y&&i>=t.next.y&&t.next.y!==t.y){const d=t.x+(i-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(d<=n&&d>s){if(s=d,d===n){if(i===t.y)return t;if(i===t.next.y)return t.next}r=t.x<t.next.x?t:t.next}}t=t.next}while(t!==e);if(!r)return null;if(n===s)return r;const o=r,l=r.x,c=r.y;let h=1/0,u;t=r;do n>=t.x&&t.x>=l&&n!==t.x&&Jn(i<c?n:s,i,l,c,i<c?s:n,i,t.x,t.y)&&(u=Math.abs(i-t.y)/(n-t.x),Vi(t,a)&&(u<h||u===h&&(t.x>r.x||t.x===r.x&&tg(r,t)))&&(r=t,h=u)),t=t.next;while(t!==o);return r}function tg(a,e){return qe(a.prev,a,e.prev)<0&&qe(e.next,a,a.next)<0}function ng(a,e,t,n){let i=a;do i.z===null&&(i.z=Qr(i.x,i.y,e,t,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next;while(i!==a);i.prevZ.nextZ=null,i.prevZ=null,ig(i)}function ig(a){let e,t,n,i,s,r,o,l,c=1;do{for(t=a,a=null,s=null,r=0;t;){for(r++,n=t,o=0,e=0;e<c&&(o++,n=n.nextZ,!!n);e++);for(l=c;o>0||l>0&&n;)o!==0&&(l===0||!n||t.z<=n.z)?(i=t,t=t.nextZ,o--):(i=n,n=n.nextZ,l--),s?s.nextZ=i:a=i,i.prevZ=s,s=i;t=n}s.nextZ=null,c*=2}while(r>1);return a}function Qr(a,e,t,n,i){return a=32767*(a-t)*i,e=32767*(e-n)*i,a=(a|a<<8)&16711935,a=(a|a<<4)&252645135,a=(a|a<<2)&858993459,a=(a|a<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,a|e<<1}function sg(a){let e=a,t=a;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==a);return t}function Jn(a,e,t,n,i,s,r,o){return(i-r)*(e-o)-(a-r)*(s-o)>=0&&(a-r)*(n-o)-(t-r)*(e-o)>=0&&(t-r)*(s-o)-(i-r)*(n-o)>=0}function rg(a,e){return a.next.i!==e.i&&a.prev.i!==e.i&&!ag(a,e)&&(Vi(a,e)&&Vi(e,a)&&og(a,e)&&(qe(a.prev,a,e.prev)||qe(a,e.prev,e))||Ks(a,e)&&qe(a.prev,a,a.next)>0&&qe(e.prev,e,e.next)>0)}function qe(a,e,t){return(e.y-a.y)*(t.x-e.x)-(e.x-a.x)*(t.y-e.y)}function Ks(a,e){return a.x===e.x&&a.y===e.y}function Ol(a,e,t,n){const i=As(qe(a,e,t)),s=As(qe(a,e,n)),r=As(qe(t,n,a)),o=As(qe(t,n,e));return!!(i!==s&&r!==o||i===0&&Cs(a,t,e)||s===0&&Cs(a,n,e)||r===0&&Cs(t,a,n)||o===0&&Cs(t,e,n))}function Cs(a,e,t){return e.x<=Math.max(a.x,t.x)&&e.x>=Math.min(a.x,t.x)&&e.y<=Math.max(a.y,t.y)&&e.y>=Math.min(a.y,t.y)}function As(a){return a>0?1:a<0?-1:0}function ag(a,e){let t=a;do{if(t.i!==a.i&&t.next.i!==a.i&&t.i!==e.i&&t.next.i!==e.i&&Ol(t,t.next,a,e))return!0;t=t.next}while(t!==a);return!1}function Vi(a,e){return qe(a.prev,a,a.next)<0?qe(a,e,a.next)>=0&&qe(a,a.prev,e)>=0:qe(a,e,a.prev)<0||qe(a,a.next,e)<0}function og(a,e){let t=a,n=!1;const i=(a.x+e.x)/2,s=(a.y+e.y)/2;do t.y>s!=t.next.y>s&&t.next.y!==t.y&&i<(t.next.x-t.x)*(s-t.y)/(t.next.y-t.y)+t.x&&(n=!n),t=t.next;while(t!==a);return n}function Hl(a,e){const t=new Kr(a.i,a.x,a.y),n=new Kr(e.i,e.x,e.y),i=a.next,s=e.prev;return a.next=e,e.prev=a,t.next=i,i.prev=t,n.next=t,t.prev=n,s.next=n,n.prev=s,n}function Wo(a,e,t,n){const i=new Kr(a,e,t);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function Wi(a){a.next.prev=a.prev,a.prev.next=a.next,a.prevZ&&(a.prevZ.nextZ=a.nextZ),a.nextZ&&(a.nextZ.prevZ=a.prevZ)}function Kr(a,e,t){this.i=a,this.x=e,this.y=t,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function lg(a,e,t,n){let i=0;for(let s=e,r=t-n;s<t;s+=n)i+=(a[r]-a[s])*(a[s+1]+a[r+1]),r=s;return i}class on{static area(e){const t=e.length;let n=0;for(let i=t-1,s=0;s<t;i=s++)n+=e[i].x*e[s].y-e[s].x*e[i].y;return n*.5}static isClockWise(e){return on.area(e)<0}static triangulateShape(e,t){const n=[],i=[],s=[];qo(e),Xo(n,e);let r=e.length;t.forEach(qo);for(let l=0;l<t.length;l++)i.push(r),r+=t[l].length,Xo(n,t[l]);const o=Xm.triangulate(n,i);for(let l=0;l<o.length;l+=3)s.push(o.slice(l,l+3));return s}}function qo(a){const e=a.length;e>2&&a[e-1].equals(a[0])&&a.pop()}function Xo(a,e){for(let t=0;t<e.length;t++)a.push(e[t].x),a.push(e[t].y)}class di extends Oe{constructor(e=new Ji([new Y(.5,.5),new Y(-.5,.5),new Y(-.5,-.5),new Y(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const n=this,i=[],s=[];for(let o=0,l=e.length;o<l;o++){const c=e[o];r(c)}this.setAttribute("position",new Ge(i,3)),this.setAttribute("uv",new Ge(s,2)),this.computeVertexNormals();function r(o){const l=[],c=t.curveSegments!==void 0?t.curveSegments:12,h=t.steps!==void 0?t.steps:1;let u=t.depth!==void 0?t.depth:1,d=t.bevelEnabled!==void 0?t.bevelEnabled:!0,p=t.bevelThickness!==void 0?t.bevelThickness:.2,g=t.bevelSize!==void 0?t.bevelSize:p-.1,y=t.bevelOffset!==void 0?t.bevelOffset:0,v=t.bevelSegments!==void 0?t.bevelSegments:3;const f=t.extrudePath,m=t.UVGenerator!==void 0?t.UVGenerator:cg;t.amount!==void 0&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),u=t.amount);let E,_=!1,T,C,x,R;f&&(E=f.getSpacedPoints(h),_=!0,d=!1,T=f.computeFrenetFrames(h,!1),C=new w,x=new w,R=new w),d||(v=0,p=0,g=0,y=0);const W=o.extractPoints(c);let N=W.shape;const A=W.holes;if(!on.isClockWise(N)){N=N.reverse();for(let O=0,Z=A.length;O<Z;O++){const ee=A[O];on.isClockWise(ee)&&(A[O]=ee.reverse())}}const I=on.triangulateShape(N,A),D=N;for(let O=0,Z=A.length;O<Z;O++){const ee=A[O];N=N.concat(ee)}function k(O,Z,ee){return Z||console.error("THREE.ExtrudeGeometry: vec does not exist"),Z.clone().multiplyScalar(ee).add(O)}const U=N.length,B=I.length;function K(O,Z,ee){let pe,ne,S;const M=O.x-Z.x,G=O.y-Z.y,j=ee.x-O.x,J=ee.y-O.y,ae=M*M+G*G,Me=M*J-G*j;if(Math.abs(Me)>Number.EPSILON){const ge=Math.sqrt(ae),Se=Math.sqrt(j*j+J*J),fe=Z.x-G/ge,L=Z.y+M/ge,ie=ee.x-J/Se,q=ee.y+j/Se,me=((ie-fe)*J-(q-L)*j)/(M*J-G*j);pe=fe+M*me-O.x,ne=L+G*me-O.y;const ce=pe*pe+ne*ne;if(ce<=2)return new Y(pe,ne);S=Math.sqrt(ce/2)}else{let ge=!1;M>Number.EPSILON?j>Number.EPSILON&&(ge=!0):M<-Number.EPSILON?j<-Number.EPSILON&&(ge=!0):Math.sign(G)===Math.sign(J)&&(ge=!0),ge?(pe=-G,ne=M,S=Math.sqrt(ae)):(pe=M,ne=G,S=Math.sqrt(ae/2))}return new Y(pe/S,ne/S)}const le=[];for(let O=0,Z=D.length,ee=Z-1,pe=O+1;O<Z;O++,ee++,pe++)ee===Z&&(ee=0),pe===Z&&(pe=0),le[O]=K(D[O],D[ee],D[pe]);const ye=[];let se,Ee=le.concat();for(let O=0,Z=A.length;O<Z;O++){const ee=A[O];se=[];for(let pe=0,ne=ee.length,S=ne-1,M=pe+1;pe<ne;pe++,S++,M++)S===ne&&(S=0),M===ne&&(M=0),se[pe]=K(ee[pe],ee[S],ee[M]);ye.push(se),Ee=Ee.concat(se)}for(let O=0;O<v;O++){const Z=O/v,ee=p*Math.cos(Z*Math.PI/2),pe=g*Math.sin(Z*Math.PI/2)+y;for(let ne=0,S=D.length;ne<S;ne++){const M=k(D[ne],le[ne],pe);ve(M.x,M.y,-ee)}for(let ne=0,S=A.length;ne<S;ne++){const M=A[ne];se=ye[ne];for(let G=0,j=M.length;G<j;G++){const J=k(M[G],se[G],pe);ve(J.x,J.y,-ee)}}}const X=g+y;for(let O=0;O<U;O++){const Z=d?k(N[O],Ee[O],X):N[O];_?(x.copy(T.normals[0]).multiplyScalar(Z.x),C.copy(T.binormals[0]).multiplyScalar(Z.y),R.copy(E[0]).add(x).add(C),ve(R.x,R.y,R.z)):ve(Z.x,Z.y,0)}for(let O=1;O<=h;O++)for(let Z=0;Z<U;Z++){const ee=d?k(N[Z],Ee[Z],X):N[Z];_?(x.copy(T.normals[O]).multiplyScalar(ee.x),C.copy(T.binormals[O]).multiplyScalar(ee.y),R.copy(E[O]).add(x).add(C),ve(R.x,R.y,R.z)):ve(ee.x,ee.y,u/h*O)}for(let O=v-1;O>=0;O--){const Z=O/v,ee=p*Math.cos(Z*Math.PI/2),pe=g*Math.sin(Z*Math.PI/2)+y;for(let ne=0,S=D.length;ne<S;ne++){const M=k(D[ne],le[ne],pe);ve(M.x,M.y,u+ee)}for(let ne=0,S=A.length;ne<S;ne++){const M=A[ne];se=ye[ne];for(let G=0,j=M.length;G<j;G++){const J=k(M[G],se[G],pe);_?ve(J.x,J.y+E[h-1].y,E[h-1].x+ee):ve(J.x,J.y,u+ee)}}}Q(),he();function Q(){const O=i.length/3;if(d){let Z=0,ee=U*Z;for(let pe=0;pe<B;pe++){const ne=I[pe];we(ne[2]+ee,ne[1]+ee,ne[0]+ee)}Z=h+v*2,ee=U*Z;for(let pe=0;pe<B;pe++){const ne=I[pe];we(ne[0]+ee,ne[1]+ee,ne[2]+ee)}}else{for(let Z=0;Z<B;Z++){const ee=I[Z];we(ee[2],ee[1],ee[0])}for(let Z=0;Z<B;Z++){const ee=I[Z];we(ee[0]+U*h,ee[1]+U*h,ee[2]+U*h)}}n.addGroup(O,i.length/3-O,0)}function he(){const O=i.length/3;let Z=0;H(D,Z),Z+=D.length;for(let ee=0,pe=A.length;ee<pe;ee++){const ne=A[ee];H(ne,Z),Z+=ne.length}n.addGroup(O,i.length/3-O,1)}function H(O,Z){let ee=O.length;for(;--ee>=0;){const pe=ee;let ne=ee-1;ne<0&&(ne=O.length-1);for(let S=0,M=h+v*2;S<M;S++){const G=U*S,j=U*(S+1),J=Z+pe+G,ae=Z+ne+G,Me=Z+ne+j,ge=Z+pe+j;re(J,ae,Me,ge)}}}function ve(O,Z,ee){l.push(O),l.push(Z),l.push(ee)}function we(O,Z,ee){ue(O),ue(Z),ue(ee);const pe=i.length/3,ne=m.generateTopUV(n,i,pe-3,pe-2,pe-1);Ce(ne[0]),Ce(ne[1]),Ce(ne[2])}function re(O,Z,ee,pe){ue(O),ue(Z),ue(pe),ue(Z),ue(ee),ue(pe);const ne=i.length/3,S=m.generateSideWallUV(n,i,ne-6,ne-3,ne-2,ne-1);Ce(S[0]),Ce(S[1]),Ce(S[3]),Ce(S[1]),Ce(S[2]),Ce(S[3])}function ue(O){i.push(l[O*3+0]),i.push(l[O*3+1]),i.push(l[O*3+2])}function Ce(O){s.push(O.x),s.push(O.y)}}}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,n=this.parameters.options;return hg(t,n,e)}static fromJSON(e,t){const n=[];for(let s=0,r=e.shapes.length;s<r;s++){const o=t[e.shapes[s]];n.push(o)}const i=e.options.extrudePath;return i!==void 0&&(e.options.extrudePath=new zl[i.type]().fromJSON(i)),new di(n,e.options)}}const cg={generateTopUV:function(a,e,t,n,i){const s=e[t*3],r=e[t*3+1],o=e[n*3],l=e[n*3+1],c=e[i*3],h=e[i*3+1];return[new Y(s,r),new Y(o,l),new Y(c,h)]},generateSideWallUV:function(a,e,t,n,i,s){const r=e[t*3],o=e[t*3+1],l=e[t*3+2],c=e[n*3],h=e[n*3+1],u=e[n*3+2],d=e[i*3],p=e[i*3+1],g=e[i*3+2],y=e[s*3],v=e[s*3+1],f=e[s*3+2];return Math.abs(o-h)<Math.abs(r-c)?[new Y(r,1-l),new Y(c,1-u),new Y(d,1-g),new Y(y,1-f)]:[new Y(o,1-l),new Y(h,1-u),new Y(p,1-g),new Y(v,1-f)]}};function hg(a,e,t){if(t.shapes=[],Array.isArray(a))for(let n=0,i=a.length;n<i;n++){const s=a[n];t.shapes.push(s.uuid)}else t.shapes.push(a.uuid);return e.extrudePath!==void 0&&(t.options.extrudePath=e.extrudePath.toJSON()),t}class ya extends Oe{constructor(e=new Ji([new Y(0,.5),new Y(-.5,-.5),new Y(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const n=[],i=[],s=[],r=[];let o=0,l=0;if(Array.isArray(e)===!1)c(e);else for(let h=0;h<e.length;h++)c(e[h]),this.addGroup(o,l,h),o+=l,l=0;this.setIndex(n),this.setAttribute("position",new Ge(i,3)),this.setAttribute("normal",new Ge(s,3)),this.setAttribute("uv",new Ge(r,2));function c(h){const u=i.length/3,d=h.extractPoints(t);let p=d.shape;const g=d.holes;on.isClockWise(p)===!1&&(p=p.reverse());for(let v=0,f=g.length;v<f;v++){const m=g[v];on.isClockWise(m)===!0&&(g[v]=m.reverse())}const y=on.triangulateShape(p,g);for(let v=0,f=g.length;v<f;v++){const m=g[v];p=p.concat(m)}for(let v=0,f=p.length;v<f;v++){const m=p[v];i.push(m.x,m.y,0),s.push(0,0,1),r.push(m.x,m.y)}for(let v=0,f=y.length;v<f;v++){const m=y[v],E=m[0]+u,_=m[1]+u,T=m[2]+u;n.push(E,_,T),l+=3}}}toJSON(){const e=super.toJSON(),t=this.parameters.shapes;return ug(t,e)}static fromJSON(e,t){const n=[];for(let i=0,s=e.shapes.length;i<s;i++){const r=t[e.shapes[i]];n.push(r)}return new ya(n,e.curveSegments)}}function ug(a,e){if(e.shapes=[],Array.isArray(a))for(let t=0,n=a.length;t<n;t++){const i=a[t];e.shapes.push(i.uuid)}else e.shapes.push(a.uuid);return e}class it extends Oe{constructor(e=1,t=32,n=16,i=0,s=Math.PI*2,r=0,o=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:s,thetaStart:r,thetaLength:o},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const l=Math.min(r+o,Math.PI);let c=0;const h=[],u=new w,d=new w,p=[],g=[],y=[],v=[];for(let f=0;f<=n;f++){const m=[],E=f/n;let _=0;f==0&&r==0?_=.5/t:f==n&&l==Math.PI&&(_=-.5/t);for(let T=0;T<=t;T++){const C=T/t;u.x=-e*Math.cos(i+C*s)*Math.sin(r+E*o),u.y=e*Math.cos(r+E*o),u.z=e*Math.sin(i+C*s)*Math.sin(r+E*o),g.push(u.x,u.y,u.z),d.copy(u).normalize(),y.push(d.x,d.y,d.z),v.push(C+_,1-E),m.push(c++)}h.push(m)}for(let f=0;f<n;f++)for(let m=0;m<t;m++){const E=h[f][m+1],_=h[f][m],T=h[f+1][m],C=h[f+1][m+1];(f!==0||r>0)&&p.push(E,_,C),(f!==n-1||l<Math.PI)&&p.push(_,T,C)}this.setIndex(p),this.setAttribute("position",new Ge(g,3)),this.setAttribute("normal",new Ge(y,3)),this.setAttribute("uv",new Ge(v,2))}static fromJSON(e){return new it(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class dg extends ht{constructor(e){super(),this.type="ShadowMaterial",this.color=new de(0),this.transparent=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this}}dg.prototype.isShadowMaterial=!0;class Vl extends ht{constructor(e){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new de(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new de(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ai,this.normalScale=new Y(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this}}Vl.prototype.isMeshStandardMaterial=!0;class pg extends Vl{constructor(e){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Y(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return vt(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.sheenColor=new de(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new de(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new de(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._transmission=0,this.setValues(e)}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.ior=e.ior,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}pg.prototype.isMeshPhysicalMaterial=!0;class fg extends ht{constructor(e){super(),this.type="MeshPhongMaterial",this.color=new de(16777215),this.specular=new de(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new de(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ai,this.normalScale=new Y(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Hs,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this}}fg.prototype.isMeshPhongMaterial=!0;class mg extends ht{constructor(e){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new de(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new de(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ai,this.normalScale=new Y(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this}}mg.prototype.isMeshToonMaterial=!0;class gg extends ht{constructor(e){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ai,this.normalScale=new Y(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}gg.prototype.isMeshNormalMaterial=!0;class yg extends ht{constructor(e){super(),this.type="MeshLambertMaterial",this.color=new de(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new de(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Hs,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this}}yg.prototype.isMeshLambertMaterial=!0;class vg extends ht{constructor(e){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new de(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ai,this.normalScale=new Y(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this}}vg.prototype.isMeshMatcapMaterial=!0;class xg extends ji{constructor(e){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}xg.prototype.isLineDashedMaterial=!0;const We={arraySlice:function(a,e,t){return We.isTypedArray(a)?new a.constructor(a.subarray(e,t!==void 0?t:a.length)):a.slice(e,t)},convertArray:function(a,e,t){return!a||!t&&a.constructor===e?a:typeof e.BYTES_PER_ELEMENT=="number"?new e(a):Array.prototype.slice.call(a)},isTypedArray:function(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)},getKeyframeOrder:function(a){function e(i,s){return a[i]-a[s]}const t=a.length,n=new Array(t);for(let i=0;i!==t;++i)n[i]=i;return n.sort(e),n},sortedArray:function(a,e,t){const n=a.length,i=new a.constructor(n);for(let s=0,r=0;r!==n;++s){const o=t[s]*e;for(let l=0;l!==e;++l)i[r++]=a[o+l]}return i},flattenJSON:function(a,e,t,n){let i=1,s=a[0];for(;s!==void 0&&s[n]===void 0;)s=a[i++];if(s===void 0)return;let r=s[n];if(r!==void 0)if(Array.isArray(r))do r=s[n],r!==void 0&&(e.push(s.time),t.push.apply(t,r)),s=a[i++];while(s!==void 0);else if(r.toArray!==void 0)do r=s[n],r!==void 0&&(e.push(s.time),r.toArray(t,t.length)),s=a[i++];while(s!==void 0);else do r=s[n],r!==void 0&&(e.push(s.time),t.push(r)),s=a[i++];while(s!==void 0)},subclip:function(a,e,t,n,i=30){const s=a.clone();s.name=e;const r=[];for(let l=0;l<s.tracks.length;++l){const c=s.tracks[l],h=c.getValueSize(),u=[],d=[];for(let p=0;p<c.times.length;++p){const g=c.times[p]*i;if(!(g<t||g>=n)){u.push(c.times[p]);for(let y=0;y<h;++y)d.push(c.values[p*h+y])}}u.length!==0&&(c.times=We.convertArray(u,c.times.constructor),c.values=We.convertArray(d,c.values.constructor),r.push(c))}s.tracks=r;let o=1/0;for(let l=0;l<s.tracks.length;++l)o>s.tracks[l].times[0]&&(o=s.tracks[l].times[0]);for(let l=0;l<s.tracks.length;++l)s.tracks[l].shift(-1*o);return s.resetDuration(),s},makeClipAdditive:function(a,e=0,t=a,n=30){n<=0&&(n=30);const i=t.tracks.length,s=e/n;for(let r=0;r<i;++r){const o=t.tracks[r],l=o.ValueTypeName;if(l==="bool"||l==="string")continue;const c=a.tracks.find(function(f){return f.name===o.name&&f.ValueTypeName===l});if(c===void 0)continue;let h=0;const u=o.getValueSize();o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(h=u/3);let d=0;const p=c.getValueSize();c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(d=p/3);const g=o.times.length-1;let y;if(s<=o.times[0]){const f=h,m=u-h;y=We.arraySlice(o.values,f,m)}else if(s>=o.times[g]){const f=g*u+h,m=f+u-h;y=We.arraySlice(o.values,f,m)}else{const f=o.createInterpolant(),m=h,E=u-h;f.evaluate(s),y=We.arraySlice(f.resultBuffer,m,E)}l==="quaternion"&&new dt().fromArray(y).normalize().conjugate().toArray(y);const v=c.times.length;for(let f=0;f<v;++f){const m=f*p+d;if(l==="quaternion")dt.multiplyQuaternionsFlat(c.values,m,y,0,c.values,m);else{const E=p-d*2;for(let _=0;_<E;++_)c.values[m+_]-=y[_]}}}return a.blendMode=ol,a}};class dn{constructor(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=i!==void 0?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,i=t[n],s=t[n-1];e:{t:{let r;n:{i:if(!(e<i)){for(let o=n+2;;){if(i===void 0){if(e<s)break i;return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,e,s)}if(n===o)break;if(s=i,i=t[++n],e<i)break t}r=t.length;break n}if(!(e>=s)){const o=t[1];e<o&&(n=2,s=o);for(let l=n-2;;){if(s===void 0)return this._cachedIndex=0,this.beforeStart_(0,e,i);if(n===l)break;if(i=s,s=t[--n-1],e>=s)break t}r=n,n=0;break n}break e}for(;n<r;){const o=n+r>>>1;e<t[o]?r=o:n=o+1}if(i=t[n],s=t[n-1],s===void 0)return this._cachedIndex=0,this.beforeStart_(0,e,i);if(i===void 0)return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,s,e)}this._cachedIndex=n,this.intervalChanged_(n,s,i)}return this.interpolate_(n,s,e,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,s=e*i;for(let r=0;r!==i;++r)t[r]=n[s+r];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}dn.prototype.beforeStart_=dn.prototype.copySampleValue_;dn.prototype.afterEnd_=dn.prototype.copySampleValue_;class _g extends dn{constructor(e,t,n,i){super(e,t,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:$n,endingEnd:$n}}intervalChanged_(e,t,n){const i=this.parameterPositions;let s=e-2,r=e+1,o=i[s],l=i[r];if(o===void 0)switch(this.getSettings_().endingStart){case jn:s=e,o=2*t-n;break;case Fs:s=i.length-2,o=t+i[s]-i[s+1];break;default:s=e,o=n}if(l===void 0)switch(this.getSettings_().endingEnd){case jn:r=e,l=2*n-t;break;case Fs:r=1,l=n+i[1]-i[0];break;default:r=e-1,l=t}const c=(n-t)*.5,h=this.valueSize;this._weightPrev=c/(t-o),this._weightNext=c/(l-n),this._offsetPrev=s*h,this._offsetNext=r*h}interpolate_(e,t,n,i){const s=this.resultBuffer,r=this.sampleValues,o=this.valueSize,l=e*o,c=l-o,h=this._offsetPrev,u=this._offsetNext,d=this._weightPrev,p=this._weightNext,g=(n-t)/(i-t),y=g*g,v=y*g,f=-d*v+2*d*y-d*g,m=(1+d)*v+(-1.5-2*d)*y+(-.5+d)*g+1,E=(-1-p)*v+(1.5+p)*y+.5*g,_=p*v-p*y;for(let T=0;T!==o;++T)s[T]=f*r[h+T]+m*r[c+T]+E*r[l+T]+_*r[u+T];return s}}class Wl extends dn{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,r=this.sampleValues,o=this.valueSize,l=e*o,c=l-o,h=(n-t)/(i-t),u=1-h;for(let d=0;d!==o;++d)s[d]=r[c+d]*u+r[l+d]*h;return s}}class Mg extends dn{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e){return this.copySampleValue_(e-1)}}class Nt{constructor(e,t,n,i){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=We.convertArray(t,this.TimeBufferType),this.values=We.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON)n=t.toJSON(e);else{n={name:e.name,times:We.convertArray(e.times,Array),values:We.convertArray(e.values,Array)};const i=e.getInterpolation();i!==e.DefaultInterpolation&&(n.interpolation=i)}return n.type=e.ValueTypeName,n}InterpolantFactoryMethodDiscrete(e){return new Mg(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new Wl(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new _g(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case Us:t=this.InterpolantFactoryMethodDiscrete;break;case Ns:t=this.InterpolantFactoryMethodLinear;break;case nr:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(n);return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Us;case this.InterpolantFactoryMethodLinear:return Ns;case this.InterpolantFactoryMethodSmooth:return nr}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]*=e}return this}trim(e,t){const n=this.times,i=n.length;let s=0,r=i-1;for(;s!==i&&n[s]<e;)++s;for(;r!==-1&&n[r]>t;)--r;if(++r,s!==0||r!==i){s>=r&&(r=Math.max(r,1),s=r-1);const o=this.getValueSize();this.times=We.arraySlice(n,s,r),this.values=We.arraySlice(this.values,s*o,r*o)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,i=this.values,s=n.length;s===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let r=null;for(let o=0;o!==s;o++){const l=n[o];if(typeof l=="number"&&isNaN(l)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,l),e=!1;break}if(r!==null&&r>l){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,l,r),e=!1;break}r=l}if(i!==void 0&&We.isTypedArray(i))for(let o=0,l=i.length;o!==l;++o){const c=i[o];if(isNaN(c)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,c),e=!1;break}}return e}optimize(){const e=We.arraySlice(this.times),t=We.arraySlice(this.values),n=this.getValueSize(),i=this.getInterpolation()===nr,s=e.length-1;let r=1;for(let o=1;o<s;++o){let l=!1;const c=e[o],h=e[o+1];if(c!==h&&(o!==1||c!==e[0]))if(i)l=!0;else{const u=o*n,d=u-n,p=u+n;for(let g=0;g!==n;++g){const y=t[u+g];if(y!==t[d+g]||y!==t[p+g]){l=!0;break}}}if(l){if(o!==r){e[r]=e[o];const u=o*n,d=r*n;for(let p=0;p!==n;++p)t[d+p]=t[u+p]}++r}}if(s>0){e[r]=e[s];for(let o=s*n,l=r*n,c=0;c!==n;++c)t[l+c]=t[o+c];++r}return r!==e.length?(this.times=We.arraySlice(e,0,r),this.values=We.arraySlice(t,0,r*n)):(this.times=e,this.values=t),this}clone(){const e=We.arraySlice(this.times,0),t=We.arraySlice(this.values,0),n=this.constructor,i=new n(this.name,e,t);return i.createInterpolant=this.createInterpolant,i}}Nt.prototype.TimeBufferType=Float32Array;Nt.prototype.ValueBufferType=Float32Array;Nt.prototype.DefaultInterpolation=Ns;class pi extends Nt{}pi.prototype.ValueTypeName="bool";pi.prototype.ValueBufferType=Array;pi.prototype.DefaultInterpolation=Us;pi.prototype.InterpolantFactoryMethodLinear=void 0;pi.prototype.InterpolantFactoryMethodSmooth=void 0;class ql extends Nt{}ql.prototype.ValueTypeName="color";class Bs extends Nt{}Bs.prototype.ValueTypeName="number";class bg extends dn{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,r=this.sampleValues,o=this.valueSize,l=(n-t)/(i-t);let c=e*o;for(let h=c+o;c!==h;c+=4)dt.slerpFlat(s,0,r,c-o,r,c,l);return s}}class Qi extends Nt{InterpolantFactoryMethodLinear(e){return new bg(this.times,this.values,this.getValueSize(),e)}}Qi.prototype.ValueTypeName="quaternion";Qi.prototype.DefaultInterpolation=Ns;Qi.prototype.InterpolantFactoryMethodSmooth=void 0;class fi extends Nt{}fi.prototype.ValueTypeName="string";fi.prototype.ValueBufferType=Array;fi.prototype.DefaultInterpolation=Us;fi.prototype.InterpolantFactoryMethodLinear=void 0;fi.prototype.InterpolantFactoryMethodSmooth=void 0;class zs extends Nt{}zs.prototype.ValueTypeName="vector";class Yo{constructor(e,t=-1,n,i=na){this.name=e,this.tracks=n,this.duration=t,this.blendMode=i,this.uuid=Dt(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],n=e.tracks,i=1/(e.fps||1);for(let r=0,o=n.length;r!==o;++r)t.push(Sg(n[r]).scale(i));const s=new this(e.name,e.duration,t,e.blendMode);return s.uuid=e.uuid,s}static toJSON(e){const t=[],n=e.tracks,i={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let s=0,r=n.length;s!==r;++s)t.push(Nt.toJSON(n[s]));return i}static CreateFromMorphTargetSequence(e,t,n,i){const s=t.length,r=[];for(let o=0;o<s;o++){let l=[],c=[];l.push((o+s-1)%s,o,(o+1)%s),c.push(0,1,0);const h=We.getKeyframeOrder(l);l=We.sortedArray(l,1,h),c=We.sortedArray(c,1,h),!i&&l[0]===0&&(l.push(s),c.push(c[0])),r.push(new Bs(".morphTargetInfluences["+t[o].name+"]",l,c).scale(1/n))}return new this(e,-1,r)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const i=e;n=i.geometry&&i.geometry.animations||i.animations}for(let i=0;i<n.length;i++)if(n[i].name===t)return n[i];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const i={},s=/^([\w-]*?)([\d]+)$/;for(let o=0,l=e.length;o<l;o++){const c=e[o],h=c.name.match(s);if(h&&h.length>1){const u=h[1];let d=i[u];d||(i[u]=d=[]),d.push(c)}}const r=[];for(const o in i)r.push(this.CreateFromMorphTargetSequence(o,i[o],t,n));return r}static parseAnimation(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(u,d,p,g,y){if(p.length!==0){const v=[],f=[];We.flattenJSON(p,v,f,g),v.length!==0&&y.push(new u(d,v,f))}},i=[],s=e.name||"default",r=e.fps||30,o=e.blendMode;let l=e.length||-1;const c=e.hierarchy||[];for(let u=0;u<c.length;u++){const d=c[u].keys;if(!(!d||d.length===0))if(d[0].morphTargets){const p={};let g;for(g=0;g<d.length;g++)if(d[g].morphTargets)for(let y=0;y<d[g].morphTargets.length;y++)p[d[g].morphTargets[y]]=-1;for(const y in p){const v=[],f=[];for(let m=0;m!==d[g].morphTargets.length;++m){const E=d[g];v.push(E.time),f.push(E.morphTarget===y?1:0)}i.push(new Bs(".morphTargetInfluence["+y+"]",v,f))}l=p.length*r}else{const p=".bones["+t[u].name+"]";n(zs,p+".position",d,"pos",i),n(Qi,p+".quaternion",d,"rot",i),n(zs,p+".scale",d,"scl",i)}}return i.length===0?null:new this(s,l,i,o)}resetDuration(){const e=this.tracks;let t=0;for(let n=0,i=e.length;n!==i;++n){const s=this.tracks[n];t=Math.max(t,s.times[s.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function wg(a){switch(a.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Bs;case"vector":case"vector2":case"vector3":case"vector4":return zs;case"color":return ql;case"quaternion":return Qi;case"bool":case"boolean":return pi;case"string":return fi}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+a)}function Sg(a){if(a.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=wg(a.type);if(a.times===void 0){const t=[],n=[];We.flattenJSON(a.keys,t,n,"value"),a.times=t,a.values=n}return e.parse!==void 0?e.parse(a):new e(a.name,a.times,a.values,a.interpolation)}const ri={enabled:!1,files:{},add:function(a,e){this.enabled!==!1&&(this.files[a]=e)},get:function(a){if(this.enabled!==!1)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}};class Eg{constructor(e,t,n){const i=this;let s=!1,r=0,o=0,l;const c=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(h){o++,s===!1&&i.onStart!==void 0&&i.onStart(h,r,o),s=!0},this.itemEnd=function(h){r++,i.onProgress!==void 0&&i.onProgress(h,r,o),r===o&&(s=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(h){i.onError!==void 0&&i.onError(h)},this.resolveURL=function(h){return l?l(h):h},this.setURLModifier=function(h){return l=h,this},this.addHandler=function(h,u){return c.push(h,u),this},this.removeHandler=function(h){const u=c.indexOf(h);return u!==-1&&c.splice(u,2),this},this.getHandler=function(h){for(let u=0,d=c.length;u<d;u+=2){const p=c[u],g=c[u+1];if(p.global&&(p.lastIndex=0),p.test(h))return g}return null}}}const Tg=new Eg;class pn{constructor(e){this.manager=e!==void 0?e:Tg,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(i,s){n.load(e,i,t,s)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}const Ht={};class Cg extends pn{constructor(e){super(e)}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=ri.get(e);if(s!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(s),this.manager.itemEnd(e)},0),s;if(Ht[e]!==void 0){Ht[e].push({onLoad:t,onProgress:n,onError:i});return}Ht[e]=[],Ht[e].push({onLoad:t,onProgress:n,onError:i});const r=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"});fetch(r).then(o=>{if(o.status===200||o.status===0){o.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received.");const l=Ht[e],c=o.body.getReader(),h=o.headers.get("Content-Length"),u=h?parseInt(h):0,d=u!==0;let p=0;return new ReadableStream({start(g){y();function y(){c.read().then(({done:v,value:f})=>{if(v)g.close();else{p+=f.byteLength;const m=new ProgressEvent("progress",{lengthComputable:d,loaded:p,total:u});for(let E=0,_=l.length;E<_;E++){const T=l[E];T.onProgress&&T.onProgress(m)}g.enqueue(f),y()}})}}})}else throw Error(`fetch for "${o.url}" responded with ${o.status}: ${o.statusText}`)}).then(o=>{const l=new Response(o);switch(this.responseType){case"arraybuffer":return l.arrayBuffer();case"blob":return l.blob();case"document":return l.text().then(c=>new DOMParser().parseFromString(c,this.mimeType));case"json":return l.json();default:return l.text()}}).then(o=>{ri.add(e,o);const l=Ht[e];delete Ht[e];for(let c=0,h=l.length;c<h;c++){const u=l[c];u.onLoad&&u.onLoad(o)}this.manager.itemEnd(e)}).catch(o=>{const l=Ht[e];delete Ht[e];for(let c=0,h=l.length;c<h;c++){const u=l[c];u.onError&&u.onError(o)}this.manager.itemError(e),this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class Xl extends pn{constructor(e){super(e)}load(e,t,n,i){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,r=ri.get(e);if(r!==void 0)return s.manager.itemStart(e),setTimeout(function(){t&&t(r),s.manager.itemEnd(e)},0),r;const o=qs("img");function l(){h(),ri.add(e,this),t&&t(this),s.manager.itemEnd(e)}function c(u){h(),i&&i(u),s.manager.itemError(e),s.manager.itemEnd(e)}function h(){o.removeEventListener("load",l,!1),o.removeEventListener("error",c,!1)}return o.addEventListener("load",l,!1),o.addEventListener("error",c,!1),e.substr(0,5)!=="data:"&&this.crossOrigin!==void 0&&(o.crossOrigin=this.crossOrigin),s.manager.itemStart(e),o.src=e,o}}class Ag extends pn{constructor(e){super(e)}load(e,t,n,i){const s=new Xs,r=new Xl(this.manager);r.setCrossOrigin(this.crossOrigin),r.setPath(this.path);let o=0;function l(c){r.load(e[c],function(h){s.images[c]=h,o++,o===6&&(s.needsUpdate=!0,t&&t(s))},void 0,i)}for(let c=0;c<e.length;++c)l(c);return s}}class Yl extends pn{constructor(e){super(e)}load(e,t,n,i){const s=new st,r=new Xl(this.manager);return r.setCrossOrigin(this.crossOrigin),r.setPath(this.path),r.load(e,function(o){s.image=o,s.needsUpdate=!0,t!==void 0&&t(s)},n,i),s}}class Ut extends Ne{constructor(e,t=1){super(),this.type="Light",this.color=new de(e),this.intensity=t}dispose(){}copy(e){return super.copy(e),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),t}}Ut.prototype.isLight=!0;class Lg extends Ut{constructor(e,t,n){super(e,n),this.type="HemisphereLight",this.position.copy(Ne.DefaultUp),this.updateMatrix(),this.groundColor=new de(t)}copy(e){return Ut.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}Lg.prototype.isHemisphereLight=!0;const Zo=new xe,$o=new w,jo=new w;class va{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Y(512,512),this.map=null,this.mapPass=null,this.matrix=new xe,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Ys,this._frameExtents=new Y(1,1),this._viewportCount=1,this._viewports=[new ze(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;$o.setFromMatrixPosition(e.matrixWorld),t.position.copy($o),jo.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(jo),t.updateMatrixWorld(),Zo.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Zo),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(t.projectionMatrix),n.multiply(t.matrixWorldInverse)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class Zl extends va{constructor(){super(new mt(50,1,.5,500)),this.focus=1}updateMatrices(e){const t=this.camera,n=Yr*2*e.angle*this.focus,i=this.mapSize.width/this.mapSize.height,s=e.distance||t.far;(n!==t.fov||i!==t.aspect||s!==t.far)&&(t.fov=n,t.aspect=i,t.far=s,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}Zl.prototype.isSpotLightShadow=!0;class Rg extends Ut{constructor(e,t,n=0,i=Math.PI/3,s=0,r=1){super(e,t),this.type="SpotLight",this.position.copy(Ne.DefaultUp),this.updateMatrix(),this.target=new Ne,this.distance=n,this.angle=i,this.penumbra=s,this.decay=r,this.shadow=new Zl}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}Rg.prototype.isSpotLight=!0;const Jo=new xe,Ti=new w,Br=new w;class $l extends va{constructor(){super(new mt(90,1,.5,500)),this._frameExtents=new Y(4,2),this._viewportCount=6,this._viewports=[new ze(2,1,1,1),new ze(0,1,1,1),new ze(3,1,1,1),new ze(1,1,1,1),new ze(3,0,1,1),new ze(1,0,1,1)],this._cubeDirections=[new w(1,0,0),new w(-1,0,0),new w(0,0,1),new w(0,0,-1),new w(0,1,0),new w(0,-1,0)],this._cubeUps=[new w(0,1,0),new w(0,1,0),new w(0,1,0),new w(0,1,0),new w(0,0,1),new w(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,i=this.matrix,s=e.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),Ti.setFromMatrixPosition(e.matrixWorld),n.position.copy(Ti),Br.copy(n.position),Br.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(Br),n.updateMatrixWorld(),i.makeTranslation(-Ti.x,-Ti.y,-Ti.z),Jo.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Jo)}}$l.prototype.isPointLightShadow=!0;class Pg extends Ut{constructor(e,t,n=0,i=1){super(e,t),this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new $l}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}Pg.prototype.isPointLight=!0;class jl extends va{constructor(){super(new Zi(-5,5,5,-5,.5,500))}}jl.prototype.isDirectionalLightShadow=!0;class Dg extends Ut{constructor(e,t){super(e,t),this.type="DirectionalLight",this.position.copy(Ne.DefaultUp),this.updateMatrix(),this.target=new Ne,this.shadow=new jl}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}Dg.prototype.isDirectionalLight=!0;class Jl extends Ut{constructor(e,t){super(e,t),this.type="AmbientLight"}}Jl.prototype.isAmbientLight=!0;class Ig extends Ut{constructor(e,t,n=10,i=10){super(e,t),this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}}Ig.prototype.isRectAreaLight=!0;class Ql{constructor(){this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new w)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const n=e.x,i=e.y,s=e.z,r=this.coefficients;return t.copy(r[0]).multiplyScalar(.282095),t.addScaledVector(r[1],.488603*i),t.addScaledVector(r[2],.488603*s),t.addScaledVector(r[3],.488603*n),t.addScaledVector(r[4],1.092548*(n*i)),t.addScaledVector(r[5],1.092548*(i*s)),t.addScaledVector(r[6],.315392*(3*s*s-1)),t.addScaledVector(r[7],1.092548*(n*s)),t.addScaledVector(r[8],.546274*(n*n-i*i)),t}getIrradianceAt(e,t){const n=e.x,i=e.y,s=e.z,r=this.coefficients;return t.copy(r[0]).multiplyScalar(.886227),t.addScaledVector(r[1],2*.511664*i),t.addScaledVector(r[2],2*.511664*s),t.addScaledVector(r[3],2*.511664*n),t.addScaledVector(r[4],2*.429043*n*i),t.addScaledVector(r[5],2*.429043*i*s),t.addScaledVector(r[6],.743125*s*s-.247708),t.addScaledVector(r[7],2*.429043*n*s),t.addScaledVector(r[8],.429043*(n*n-i*i)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(e.coefficients[n],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(e,t+i*3);return this}toArray(e=[],t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(e,t+i*3);return e}static getBasisAt(e,t){const n=e.x,i=e.y,s=e.z;t[0]=.282095,t[1]=.488603*i,t[2]=.488603*s,t[3]=.488603*n,t[4]=1.092548*n*i,t[5]=1.092548*i*s,t[6]=.315392*(3*s*s-1),t[7]=1.092548*n*s,t[8]=.546274*(n*n-i*i)}}Ql.prototype.isSphericalHarmonics3=!0;class xa extends Ut{constructor(e=new Ql,t=1){super(void 0,t),this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}}xa.prototype.isLightProbe=!0;class Ug{static decodeText(e){if(typeof TextDecoder<"u")return new TextDecoder().decode(e);let t="";for(let n=0,i=e.length;n<i;n++)t+=String.fromCharCode(e[n]);try{return decodeURIComponent(escape(t))}catch{return t}}static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.substr(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}}class Ng extends Oe{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}clone(){return new this.constructor().copy(this)}toJSON(){const e=super.toJSON(this);return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}Ng.prototype.isInstancedBufferGeometry=!0;class Fg extends pn{constructor(e){super(e),typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,r=ri.get(e);if(r!==void 0)return s.manager.itemStart(e),setTimeout(function(){t&&t(r),s.manager.itemEnd(e)},0),r;const o={};o.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",o.headers=this.requestHeader,fetch(e,o).then(function(l){return l.blob()}).then(function(l){return createImageBitmap(l,Object.assign(s.options,{colorSpaceConversion:"none"}))}).then(function(l){ri.add(e,l),t&&t(l),s.manager.itemEnd(e)}).catch(function(l){i&&i(l),s.manager.itemError(e),s.manager.itemEnd(e)}),s.manager.itemStart(e)}}Fg.prototype.isImageBitmapLoader=!0;let Ls;const Kl={getContext:function(){return Ls===void 0&&(Ls=new(window.AudioContext||window.webkitAudioContext)),Ls},setContext:function(a){Ls=a}};class ec extends pn{constructor(e){super(e)}load(e,t,n,i){const s=this,r=new Cg(this.manager);r.setResponseType("arraybuffer"),r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(this.withCredentials),r.load(e,function(o){try{const l=o.slice(0);Kl.getContext().decodeAudioData(l,function(h){t(h)})}catch(l){i?i(l):console.error(l),s.manager.itemError(e)}},n,i)}}class kg extends xa{constructor(e,t,n=1){super(void 0,n);const i=new de().set(e),s=new de().set(t),r=new w(i.r,i.g,i.b),o=new w(s.r,s.g,s.b),l=Math.sqrt(Math.PI),c=l*Math.sqrt(.75);this.sh.coefficients[0].copy(r).add(o).multiplyScalar(l),this.sh.coefficients[1].copy(r).sub(o).multiplyScalar(c)}}kg.prototype.isHemisphereLightProbe=!0;class Bg extends xa{constructor(e,t=1){super(void 0,t);const n=new de().set(e);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}Bg.prototype.isAmbientLightProbe=!0;class tc{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Qo(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const t=Qo();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}function Qo(){return(typeof performance>"u"?Date:performance).now()}const bn=new w,Ko=new dt,zg=new w,wn=new w;class Gg extends Ne{constructor(){super(),this.type="AudioListener",this.context=Kl.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new tc}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(e){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(bn,Ko,zg),wn.set(0,0,-1).applyQuaternion(Ko),t.positionX){const i=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(bn.x,i),t.positionY.linearRampToValueAtTime(bn.y,i),t.positionZ.linearRampToValueAtTime(bn.z,i),t.forwardX.linearRampToValueAtTime(wn.x,i),t.forwardY.linearRampToValueAtTime(wn.y,i),t.forwardZ.linearRampToValueAtTime(wn.z,i),t.upX.linearRampToValueAtTime(n.x,i),t.upY.linearRampToValueAtTime(n.y,i),t.upZ.linearRampToValueAtTime(n.z,i)}else t.setPosition(bn.x,bn.y,bn.z),t.setOrientation(wn.x,wn.y,wn.z,n.x,n.y,n.z)}}class Pi extends Ne{constructor(e){super(),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){if(this.detune=e,this.source.detune!==void 0)return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}}class Og{constructor(e,t,n){this.binding=e,this.valueSize=n;let i,s,r;switch(t){case"quaternion":i=this._slerp,s=this._slerpAdditive,r=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(n*6),this._workIndex=5;break;case"string":case"bool":i=this._select,s=this._select,r=this._setAdditiveIdentityOther,this.buffer=new Array(n*5);break;default:i=this._lerp,s=this._lerpAdditive,r=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(n*5)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=s,this._setIdentity=r,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,t){const n=this.buffer,i=this.valueSize,s=e*i+i;let r=this.cumulativeWeight;if(r===0){for(let o=0;o!==i;++o)n[s+o]=n[o];r=t}else{r+=t;const o=t/r;this._mixBufferRegion(n,s,0,o,i)}this.cumulativeWeight=r}accumulateAdditive(e){const t=this.buffer,n=this.valueSize,i=n*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(t,i,0,e,n),this.cumulativeWeightAdditive+=e}apply(e){const t=this.valueSize,n=this.buffer,i=e*t+t,s=this.cumulativeWeight,r=this.cumulativeWeightAdditive,o=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,s<1){const l=t*this._origIndex;this._mixBufferRegion(n,i,l,1-s,t)}r>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*t,1,t);for(let l=t,c=t+t;l!==c;++l)if(n[l]!==n[l+t]){o.setValue(n,i);break}}saveOriginalState(){const e=this.binding,t=this.buffer,n=this.valueSize,i=n*this._origIndex;e.getValue(t,i);for(let s=n,r=i;s!==r;++s)t[s]=t[i+s%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,t=e+this.valueSize;for(let n=e;n<t;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[t+n]=this.buffer[e+n]}_select(e,t,n,i,s){if(i>=.5)for(let r=0;r!==s;++r)e[t+r]=e[n+r]}_slerp(e,t,n,i){dt.slerpFlat(e,t,e,t,e,n,i)}_slerpAdditive(e,t,n,i,s){const r=this._workIndex*s;dt.multiplyQuaternionsFlat(e,r,e,t,e,n),dt.slerpFlat(e,t,e,t,e,r,i)}_lerp(e,t,n,i,s){const r=1-i;for(let o=0;o!==s;++o){const l=t+o;e[l]=e[l]*r+e[n+o]*i}}_lerpAdditive(e,t,n,i,s){for(let r=0;r!==s;++r){const o=t+r;e[o]=e[o]+e[n+r]*i}}}const _a="\\[\\]\\.:\\/",Hg=new RegExp("["+_a+"]","g"),Ma="[^"+_a+"]",Vg="[^"+_a.replace("\\.","")+"]",Wg=/((?:WC+[\/:])*)/.source.replace("WC",Ma),qg=/(WCOD+)?/.source.replace("WCOD",Vg),Xg=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Ma),Yg=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Ma),Zg=new RegExp("^"+Wg+qg+Xg+Yg+"$"),$g=["material","materials","bones"];class jg{constructor(e,t,n){const i=n||Be.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];i!==void 0&&i.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,s=n.length;i!==s;++i)n[i].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}class Be{constructor(e,t,n){this.path=t,this.parsedPath=n||Be.parseTrackName(t),this.node=Be.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new Be.Composite(e,t,n):new Be(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(Hg,"")}static parseTrackName(e){const t=Zg.exec(e);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(i!==void 0&&i!==-1){const s=n.nodeName.substring(i+1);$g.indexOf(s)!==-1&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=s)}if(n.propertyName===null||n.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}static findNode(e,t){if(!t||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==void 0)return n}if(e.children){const n=function(s){for(let r=0;r<s.length;r++){const o=s[r];if(o.name===t||o.uuid===t)return o;const l=n(o.children);if(l)return l}return null},i=n(e.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)e[t++]=n[i]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,n=t.objectName,i=t.propertyName;let s=t.propertyIndex;if(e||(e=Be.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(n){let c=t.objectIndex;switch(n){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let h=0;h<e.length;h++)if(e[h].name===c){c=h;break}break;default:if(e[n]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[n]}if(c!==void 0){if(e[c]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[c]}}const r=e[i];if(r===void 0){const c=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+c+"."+i+" but it wasn't found.",e);return}let o=this.Versioning.None;this.targetObject=e,e.needsUpdate!==void 0?o=this.Versioning.NeedsUpdate:e.matrixWorldNeedsUpdate!==void 0&&(o=this.Versioning.MatrixWorldNeedsUpdate);let l=this.BindingType.Direct;if(s!==void 0){if(i==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[s]!==void 0&&(s=e.morphTargetDictionary[s])}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}l=this.BindingType.ArrayElement,this.resolvedProperty=r,this.propertyIndex=s}else r.fromArray!==void 0&&r.toArray!==void 0?(l=this.BindingType.HasFromToArray,this.resolvedProperty=r):Array.isArray(r)?(l=this.BindingType.EntireArray,this.resolvedProperty=r):this.propertyName=i;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][o]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Be.Composite=jg;Be.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};Be.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};Be.prototype.GetterByBindingType=[Be.prototype._getValue_direct,Be.prototype._getValue_array,Be.prototype._getValue_arrayElement,Be.prototype._getValue_toArray];Be.prototype.SetterByBindingTypeAndVersioning=[[Be.prototype._setValue_direct,Be.prototype._setValue_direct_setNeedsUpdate,Be.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Be.prototype._setValue_array,Be.prototype._setValue_array_setNeedsUpdate,Be.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Be.prototype._setValue_arrayElement,Be.prototype._setValue_arrayElement_setNeedsUpdate,Be.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Be.prototype._setValue_fromArray,Be.prototype._setValue_fromArray_setNeedsUpdate,Be.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Jg{constructor(e,t,n=null,i=t.blendMode){this._mixer=e,this._clip=t,this._localRoot=n,this.blendMode=i;const s=t.tracks,r=s.length,o=new Array(r),l={endingStart:$n,endingEnd:$n};for(let c=0;c!==r;++c){const h=s[c].createInterpolant(null);o[c]=h,h.settings=l}this._interpolantSettings=l,this._interpolants=o,this._propertyBindings=new Array(r),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Uh,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,n){if(e.fadeOut(t),this.fadeIn(t),n){const i=this._clip.duration,s=e._clip.duration,r=s/i,o=i/s;e.warp(1,r,t),this.warp(o,1,t)}return this}crossFadeTo(e,t,n){return e.crossFadeFrom(this,t,n)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,n){const i=this._mixer,s=i.time,r=this.timeScale;let o=this._timeScaleInterpolant;o===null&&(o=i._lendControlInterpolant(),this._timeScaleInterpolant=o);const l=o.parameterPositions,c=o.sampleValues;return l[0]=s,l[1]=s+n,c[0]=e/r,c[1]=t/r,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,n,i){if(!this.enabled){this._updateWeight(e);return}const s=this._startTime;if(s!==null){const l=(e-s)*n;if(l<0||n===0)return;this._startTime=null,t=n*l}t*=this._updateTimeScale(e);const r=this._updateTime(t),o=this._updateWeight(e);if(o>0){const l=this._interpolants,c=this._propertyBindings;switch(this.blendMode){case ol:for(let h=0,u=l.length;h!==u;++h)l[h].evaluate(r),c[h].accumulateAdditive(o);break;case na:default:for(let h=0,u=l.length;h!==u;++h)l[h].evaluate(r),c[h].accumulate(i,o)}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const n=this._weightInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopFading(),i===0&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopWarping(),t===0?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t}_updateTime(e){const t=this._clip.duration,n=this.loop;let i=this.time+e,s=this._loopCount;const r=n===Nh;if(e===0)return s===-1?i:r&&(s&1)===1?t-i:i;if(n===Ih){s===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(i>=t)i=t;else if(i<0)i=0;else{this.time=i;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(s===-1&&(e>=0?(s=0,this._setEndings(!0,this.repetitions===0,r)):this._setEndings(this.repetitions===0,!0,r)),i>=t||i<0){const o=Math.floor(i/t);i-=t*o,s+=Math.abs(o);const l=this.repetitions-s;if(l<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=e>0?t:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(l===1){const c=e<0;this._setEndings(c,!c,r)}else this._setEndings(!1,!1,r);this._loopCount=s,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}else this.time=i;if(r&&(s&1)===1)return t-i}return i}_setEndings(e,t,n){const i=this._interpolantSettings;n?(i.endingStart=jn,i.endingEnd=jn):(e?i.endingStart=this.zeroSlopeAtStart?jn:$n:i.endingStart=Fs,t?i.endingEnd=this.zeroSlopeAtEnd?jn:$n:i.endingEnd=Fs)}_scheduleFading(e,t,n){const i=this._mixer,s=i.time;let r=this._weightInterpolant;r===null&&(r=i._lendControlInterpolant(),this._weightInterpolant=r);const o=r.parameterPositions,l=r.sampleValues;return o[0]=s,l[0]=t,o[1]=s+e,l[1]=n,this}}class Qg extends An{constructor(e){super(),this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,t){const n=e._localRoot||this._root,i=e._clip.tracks,s=i.length,r=e._propertyBindings,o=e._interpolants,l=n.uuid,c=this._bindingsByRootAndName;let h=c[l];h===void 0&&(h={},c[l]=h);for(let u=0;u!==s;++u){const d=i[u],p=d.name;let g=h[p];if(g!==void 0)r[u]=g;else{if(g=r[u],g!==void 0){g._cacheIndex===null&&(++g.referenceCount,this._addInactiveBinding(g,l,p));continue}const y=t&&t._propertyBindings[u].binding.parsedPath;g=new Og(Be.create(n,p,y),d.ValueTypeName,d.getValueSize()),++g.referenceCount,this._addInactiveBinding(g,l,p),r[u]=g}o[u].resultBuffer=g.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const n=(e._localRoot||this._root).uuid,i=e._clip.uuid,s=this._actionsByClip[i];this._bindAction(e,s&&s.knownActions[0]),this._addInactiveAction(e,i,n)}const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];s.useCount++===0&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];--s.useCount===0&&(s.restoreOriginalState(),this._takeBackBinding(s))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,n){const i=this._actions,s=this._actionsByClip;let r=s[t];if(r===void 0)r={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,s[t]=r;else{const o=r.knownActions;e._byClipCacheIndex=o.length,o.push(e)}e._cacheIndex=i.length,i.push(e),r.actionByRoot[n]=e}_removeInactiveAction(e){const t=this._actions,n=t[t.length-1],i=e._cacheIndex;n._cacheIndex=i,t[i]=n,t.pop(),e._cacheIndex=null;const s=e._clip.uuid,r=this._actionsByClip,o=r[s],l=o.knownActions,c=l[l.length-1],h=e._byClipCacheIndex;c._byClipCacheIndex=h,l[h]=c,l.pop(),e._byClipCacheIndex=null;const u=o.actionByRoot,d=(e._localRoot||this._root).uuid;delete u[d],l.length===0&&delete r[s],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];--s.referenceCount===0&&this._removeInactiveBinding(s)}}_lendAction(e){const t=this._actions,n=e._cacheIndex,i=this._nActiveActions++,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_takeBackAction(e){const t=this._actions,n=e._cacheIndex,i=--this._nActiveActions,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_addInactiveBinding(e,t,n){const i=this._bindingsByRootAndName,s=this._bindings;let r=i[t];r===void 0&&(r={},i[t]=r),r[n]=e,e._cacheIndex=s.length,s.push(e)}_removeInactiveBinding(e){const t=this._bindings,n=e.binding,i=n.rootNode.uuid,s=n.path,r=this._bindingsByRootAndName,o=r[i],l=t[t.length-1],c=e._cacheIndex;l._cacheIndex=c,t[c]=l,t.pop(),delete o[s],Object.keys(o).length===0&&delete r[i]}_lendBinding(e){const t=this._bindings,n=e._cacheIndex,i=this._nActiveBindings++,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_takeBackBinding(e){const t=this._bindings,n=e._cacheIndex,i=--this._nActiveBindings,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_lendControlInterpolant(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let n=e[t];return n===void 0&&(n=new Wl(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),n.__cacheIndex=t,e[t]=n),n}_takeBackControlInterpolant(e){const t=this._controlInterpolants,n=e.__cacheIndex,i=--this._nActiveControlInterpolants,s=t[i];e.__cacheIndex=i,t[i]=e,s.__cacheIndex=n,t[n]=s}clipAction(e,t,n){const i=t||this._root,s=i.uuid;let r=typeof e=="string"?Yo.findByName(i,e):e;const o=r!==null?r.uuid:e,l=this._actionsByClip[o];let c=null;if(n===void 0&&(r!==null?n=r.blendMode:n=na),l!==void 0){const u=l.actionByRoot[s];if(u!==void 0&&u.blendMode===n)return u;c=l.knownActions[0],r===null&&(r=c._clip)}if(r===null)return null;const h=new Jg(this,r,t,n);return this._bindAction(h,c),this._addInactiveAction(h,o,s),h}existingAction(e,t){const n=t||this._root,i=n.uuid,s=typeof e=="string"?Yo.findByName(n,e):e,r=s?s.uuid:e,o=this._actionsByClip[r];return o!==void 0&&o.actionByRoot[i]||null}stopAllAction(){const e=this._actions,t=this._nActiveActions;for(let n=t-1;n>=0;--n)e[n].stop();return this}update(e){e*=this.timeScale;const t=this._actions,n=this._nActiveActions,i=this.time+=e,s=Math.sign(e),r=this._accuIndex^=1;for(let c=0;c!==n;++c)t[c]._update(i,e,s,r);const o=this._bindings,l=this._nActiveBindings;for(let c=0;c!==l;++c)o[c].apply(r);return this}setTime(e){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const t=this._actions,n=e.uuid,i=this._actionsByClip,s=i[n];if(s!==void 0){const r=s.knownActions;for(let o=0,l=r.length;o!==l;++o){const c=r[o];this._deactivateAction(c);const h=c._cacheIndex,u=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,u._cacheIndex=h,t[h]=u,t.pop(),this._removeInactiveBindingsForAction(c)}delete i[n]}}uncacheRoot(e){const t=e.uuid,n=this._actionsByClip;for(const r in n){const o=n[r].actionByRoot,l=o[t];l!==void 0&&(this._deactivateAction(l),this._removeInactiveAction(l))}const i=this._bindingsByRootAndName,s=i[t];if(s!==void 0)for(const r in s){const o=s[r];o.restoreOriginalState(),this._removeInactiveBinding(o)}}uncacheAction(e,t){const n=this.existingAction(e,t);n!==null&&(this._deactivateAction(n),this._removeInactiveAction(n))}}Qg.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class Kg extends $i{constructor(e,t,n=1){super(e,t),this.meshPerAttribute=n}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}Kg.prototype.isInstancedInterleavedBuffer=!0;const Kt=new w,Rs=new xe,zr=new xe;class e0 extends ua{constructor(e){const t=nc(e),n=new Oe,i=[],s=[],r=new de(0,0,1),o=new de(0,1,0);for(let c=0;c<t.length;c++){const h=t[c];h.parent&&h.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),s.push(r.r,r.g,r.b),s.push(o.r,o.g,o.b))}n.setAttribute("position",new Ge(i,3)),n.setAttribute("color",new Ge(s,3));const l=new ji({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(n,l),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const t=this.bones,n=this.geometry,i=n.getAttribute("position");zr.copy(this.root.matrixWorld).invert();for(let s=0,r=0;s<t.length;s++){const o=t[s];o.parent&&o.parent.isBone&&(Rs.multiplyMatrices(zr,o.matrixWorld),Kt.setFromMatrixPosition(Rs),i.setXYZ(r,Kt.x,Kt.y,Kt.z),Rs.multiplyMatrices(zr,o.parent.matrixWorld),Kt.setFromMatrixPosition(Rs),i.setXYZ(r+1,Kt.x,Kt.y,Kt.z),r+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}}function nc(a){const e=[];a&&a.isBone&&e.push(a);for(let t=0;t<a.children.length;t++)e.push.apply(e,nc(a.children[t]));return e}class t0 extends ua{constructor(e=10,t=10,n=4473924,i=8947848){n=new de(n),i=new de(i);const s=t/2,r=e/t,o=e/2,l=[],c=[];for(let d=0,p=0,g=-o;d<=t;d++,g+=r){l.push(-o,0,g,o,0,g),l.push(g,0,-o,g,0,o);const y=d===s?n:i;y.toArray(c,p),p+=3,y.toArray(c,p),p+=3,y.toArray(c,p),p+=3,y.toArray(c,p),p+=3}const h=new Oe;h.setAttribute("position",new Ge(l,3)),h.setAttribute("color",new Ge(c,3));const u=new ji({vertexColors:!0,toneMapped:!1});super(h,u),this.type="GridHelper"}}const n0=new Float32Array(1);new Int32Array(n0.buffer);wt.create=function(a,e){return console.log("THREE.Curve.create() has been deprecated"),a.prototype=Object.create(wt.prototype),a.prototype.constructor=a,a.prototype.getPoint=e,a};Jr.prototype.fromPoints=function(a){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(a)};t0.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};e0.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};pn.prototype.extractUrlBase=function(a){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Ug.extractUrlBase(a)};pn.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};Lt.prototype.center=function(a){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(a)};Lt.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()};Lt.prototype.isIntersectionBox=function(a){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)};Lt.prototype.isIntersectionSphere=function(a){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(a)};Lt.prototype.size=function(a){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(a)};li.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()};Ys.prototype.setFromMatrix=function(a){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(a)};nt.prototype.flattenToArrayOffset=function(a,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(a,e)};nt.prototype.multiplyVector3=function(a){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),a.applyMatrix3(this)};nt.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")};nt.prototype.applyToBufferAttribute=function(a){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),a.applyMatrix3(this)};nt.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")};nt.prototype.getInverse=function(a){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(a).invert()};xe.prototype.extractPosition=function(a){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(a)};xe.prototype.flattenToArrayOffset=function(a,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(a,e)};xe.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),new w().setFromMatrixColumn(this,3)};xe.prototype.setRotationFromQuaternion=function(a){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(a)};xe.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")};xe.prototype.multiplyVector3=function(a){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)};xe.prototype.multiplyVector4=function(a){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)};xe.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")};xe.prototype.rotateAxis=function(a){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),a.transformDirection(this)};xe.prototype.crossVector=function(a){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)};xe.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")};xe.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")};xe.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")};xe.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")};xe.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")};xe.prototype.applyToBufferAttribute=function(a){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)};xe.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")};xe.prototype.makeFrustum=function(a,e,t,n,i,s){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(a,e,n,t,i,s)};xe.prototype.getInverse=function(a){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(a).invert()};Vt.prototype.isIntersectionLine=function(a){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(a)};dt.prototype.multiplyVector3=function(a){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),a.applyQuaternion(this)};dt.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()};ci.prototype.isIntersectionBox=function(a){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)};ci.prototype.isIntersectionPlane=function(a){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(a)};ci.prototype.isIntersectionSphere=function(a){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(a)};Je.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()};Je.prototype.barycoordFromPoint=function(a,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(a,e)};Je.prototype.midpoint=function(a){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(a)};Je.prototypenormal=function(a){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(a)};Je.prototype.plane=function(a){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(a)};Je.barycoordFromPoint=function(a,e,t,n,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Je.getBarycoord(a,e,t,n,i)};Je.normal=function(a,e,t,n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Je.getNormal(a,e,t,n)};Ji.prototype.extractAllPoints=function(a){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(a)};Ji.prototype.extrude=function(a){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new di(this,a)};Ji.prototype.makeGeometry=function(a){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new ya(this,a)};Y.prototype.fromAttribute=function(a,e,t){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,e,t)};Y.prototype.distanceToManhattan=function(a){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(a)};Y.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};w.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")};w.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")};w.prototype.getPositionFromMatrix=function(a){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(a)};w.prototype.getScaleFromMatrix=function(a){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(a)};w.prototype.getColumnFromMatrix=function(a,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,a)};w.prototype.applyProjection=function(a){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(a)};w.prototype.fromAttribute=function(a,e,t){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,e,t)};w.prototype.distanceToManhattan=function(a){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(a)};w.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};ze.prototype.fromAttribute=function(a,e,t){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,e,t)};ze.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};Ne.prototype.getChildByName=function(a){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(a)};Ne.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")};Ne.prototype.translate=function(a,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,a)};Ne.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")};Ne.prototype.applyMatrix=function(a){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(a)};Object.defineProperties(Ne.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(a){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=a}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});oe.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")};Object.defineProperties(oe.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),Fh},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}});Il.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")};mt.prototype.setLens=function(a,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),e!==void 0&&(this.filmGauge=e),this.setFocalLength(a)};Object.defineProperties(Ut.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(a){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=a}},shadowCameraLeft:{set:function(a){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=a}},shadowCameraRight:{set:function(a){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=a}},shadowCameraTop:{set:function(a){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=a}},shadowCameraBottom:{set:function(a){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=a}},shadowCameraNear:{set:function(a){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=a}},shadowCameraFar:{set:function(a){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=a}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(a){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=a}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(a){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=a}},shadowMapHeight:{set:function(a){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=a}}});Object.defineProperties(Qe.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===ks},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(ks)}}});Qe.prototype.setDynamic=function(a){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(a===!0?ks:Gi),this};Qe.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},Qe.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};Oe.prototype.addIndex=function(a){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(a)};Oe.prototype.addAttribute=function(a,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),!(e&&e.isBufferAttribute)&&!(e&&e.isInterleavedBufferAttribute)?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(a,new Qe(arguments[1],arguments[2]))):a==="index"?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(a,e)};Oe.prototype.addDrawCall=function(a,e,t){t!==void 0&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(a,e)};Oe.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()};Oe.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")};Oe.prototype.removeAttribute=function(a){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(a)};Oe.prototype.applyMatrix=function(a){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(a)};Object.defineProperties(Oe.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}});$i.prototype.setDynamic=function(a){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(a===!0?ks:Gi),this};$i.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};di.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")};di.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")};di.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")};$s.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")};Object.defineProperties(ht.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new de}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(a){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=a===il}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(a){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=a}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}});Object.defineProperties(Tn.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(a){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=a}}});Fe.prototype.clearTarget=function(a,e,t,n){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(a),this.clear(e,t,n)};Fe.prototype.animate=function(a){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(a)};Fe.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()};Fe.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()};Fe.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision};Fe.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()};Fe.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")};Fe.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")};Fe.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")};Fe.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")};Fe.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")};Fe.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")};Fe.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures};Fe.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")};Fe.prototype.enableScissorTest=function(a){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(a)};Fe.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")};Fe.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")};Fe.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")};Fe.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")};Fe.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")};Fe.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")};Fe.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")};Fe.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")};Fe.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")};Fe.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()};Object.defineProperties(Fe.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=a}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=a}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(a){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=a===!0?Cn:lt}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}});Object.defineProperties(Rl.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});Object.defineProperties(It.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=a}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=a}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=a}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=a}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(a){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=a}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(a){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=a}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(a){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=a}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(a){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=a}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(a){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=a}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(a){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=a}}});Pi.prototype.load=function(a){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const e=this;return new ec().load(a,function(n){e.setBuffer(n)}),this};aa.prototype.updateCubeMap=function(a,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(a,e)};aa.prototype.clear=function(a,e,t,n){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(a,e,t,n)};oi.crossOrigin=void 0;oi.loadTexture=function(a,e,t,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const i=new Yl;i.setCrossOrigin(this.crossOrigin);const s=i.load(a,t,void 0,n);return e&&(s.mapping=e),s};oi.loadTextureCube=function(a,e,t,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const i=new Ag;i.setCrossOrigin(this.crossOrigin);const s=i.load(a,t,void 0,n);return e&&(s.mapping=e),s};oi.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")};oi.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:tl}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=tl);var ki=function(){var a=0,e=document.createElement("div");e.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",e.addEventListener("click",function(h){h.preventDefault(),n(++a%e.children.length)},!1);function t(h){return e.appendChild(h.dom),h}function n(h){for(var u=0;u<e.children.length;u++)e.children[u].style.display=u===h?"block":"none";a=h}var i=(performance||Date).now(),s=i,r=0,o=t(new ki.Panel("FPS","#0ff","#002")),l=t(new ki.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var c=t(new ki.Panel("MB","#f08","#201"));return n(0),{REVISION:16,dom:e,addPanel:t,showPanel:n,begin:function(){i=(performance||Date).now()},end:function(){r++;var h=(performance||Date).now();if(l.update(h-i,200),h>=s+1e3&&(o.update(r*1e3/(h-s),100),s=h,r=0,c)){var u=performance.memory;c.update(u.usedJSHeapSize/1048576,u.jsHeapSizeLimit/1048576)}return h},update:function(){i=this.end()},domElement:e,setMode:n}};ki.Panel=function(a,e,t){var n=1/0,i=0,s=Math.round,r=s(window.devicePixelRatio||1),o=80*r,l=48*r,c=3*r,h=2*r,u=3*r,d=15*r,p=74*r,g=30*r,y=document.createElement("canvas");y.width=o,y.height=l,y.style.cssText="width:80px;height:48px";var v=y.getContext("2d");return v.font="bold "+9*r+"px Helvetica,Arial,sans-serif",v.textBaseline="top",v.fillStyle=t,v.fillRect(0,0,o,l),v.fillStyle=e,v.fillText(a,c,h),v.fillRect(u,d,p,g),v.fillStyle=t,v.globalAlpha=.9,v.fillRect(u,d,p,g),{dom:y,update:function(f,m){n=Math.min(n,f),i=Math.max(i,f),v.fillStyle=t,v.globalAlpha=1,v.fillRect(0,0,o,d),v.fillStyle=e,v.fillText(s(f)+" "+a+" ("+s(n)+"-"+s(i)+")",c,h),v.drawImage(y,u+r,d,p-r,g,u,d,p-r,g),v.fillRect(u+p-r,d,r,g),v.fillStyle=t,v.globalAlpha=.9,v.fillRect(u+p-r,d,r,s((1-f/m)*g))}}};class i0{minimapRenderer;minimapCamera;minimapScene;playerUnit;playerUnitDot;enemyDots=[];minimapContainer;MINIMAP_SIZE=150;MAP_SIZE=1e3;constructor(e,t){this.playerUnit=t,this.initMinimap(),this.createMinimapScene(e),this.createPlayerUnitDot(),this.setupMinimapContainer()}initMinimap(){this.minimapRenderer=new Fe({alpha:!0}),this.minimapRenderer.setSize(this.MINIMAP_SIZE,this.MINIMAP_SIZE),this.minimapRenderer.setClearColor(0,.3),this.minimapCamera=new Zi(-this.MAP_SIZE/2,this.MAP_SIZE/2,this.MAP_SIZE/2,-this.MAP_SIZE/2,1,1e3),this.minimapCamera.position.z=500,this.minimapCamera.lookAt(0,0,0),this.minimapScene=new $s}createMinimapScene(e){const t=new ft(this.MAP_SIZE,this.MAP_SIZE),n=new Ae({color:2263842}),i=new oe(t,n);i.position.z=-1,this.minimapScene.add(i),e.traverse(s=>{if(s.userData.isTree||s.userData.isBush){const r=new ft(8,8);let o;s.userData.isTree?o=new Ae({color:9127187}):o=new Ae({color:10044586});const l=new oe(r,o);l.position.copy(s.position),l.position.z=0,this.minimapScene.add(l)}})}createPlayerUnitDot(){const e=this.getPlayerDotSize(),t=new ft(e,e),n=new Ae({color:0});this.playerUnitDot=new oe(t,n),this.playerUnitDot.position.z=1,this.minimapScene.add(this.playerUnitDot)}getPlayerDotSize(){return this.playerUnit.getRadius()*10*1.5}updatePlayerUnitDotSize(){const e=this.getPlayerDotSize(),n=this.playerUnitDot.geometry.parameters?.width||10,i=n*this.playerUnitDot.scale.x;Math.abs(i-e)>.1&&this.playerUnitDot.scale.set(e/n,e/n,1)}setupMinimapContainer(){this.minimapContainer=document.createElement("div"),this.minimapContainer.style.position="fixed",this.minimapContainer.style.bottom="20px",this.minimapContainer.style.left="20px",this.minimapContainer.style.width=`${this.MINIMAP_SIZE}px`,this.minimapContainer.style.height=`${this.MINIMAP_SIZE}px`,this.minimapContainer.style.border="2px solid #fff",this.minimapContainer.style.borderRadius="8px",this.minimapContainer.style.overflow="hidden",this.minimapContainer.style.zIndex="1000",this.minimapContainer.appendChild(this.minimapRenderer.domElement),document.body.appendChild(this.minimapContainer)}updatePlayerUnitPosition(){if(this.playerUnit&&this.playerUnitDot){const e=this.playerUnit.getModel();this.playerUnitDot.position.x=e.position.x,this.playerUnitDot.position.y=e.position.y,this.updatePlayerUnitDotSize()}}updatePlayerUnitRef(e){this.playerUnit=e,this.updatePlayerUnitDotSize()}render(){this.minimapRenderer.render(this.minimapScene,this.minimapCamera)}updateObjects(e,t,n){this.minimapScene.children=this.minimapScene.children.filter(i=>!i.userData.isMinimapDot),e.forEach(i=>{const s=new ft(8,8),r=new Ae({color:9127187}),o=new oe(s,r);o.position.copy(i.position),o.position.z=0,o.userData.isMinimapDot=!0,this.minimapScene.add(o)}),t.forEach(i=>{const s=new ft(6,6),r=new Ae({color:10044586}),o=new oe(s,r);o.position.copy(i.position),o.position.z=0,o.userData.isMinimapDot=!0,this.minimapScene.add(o)}),n&&n.forEach(i=>{const s=new ft(7,7),r=new Ae({color:65450}),o=new oe(s,r);o.position.copy(i.getPosition()),o.position.z=0,o.userData.isMinimapDot=!0,this.minimapScene.add(o)})}updateEnemyPositions(e){const t=e.length,n=this.enemyDots.length;for(;this.enemyDots.length>t;){const i=this.enemyDots.pop();this.minimapScene.remove(i),i.geometry.dispose(),i.material.dispose()}for(let i=0;i<t;i++){const s=e[i],r=s.getPosition(),l=(s.getRadius?s.getRadius():3)*10,h=s.getSizeMultiplier()>1?16766720:9109504;if(i<n){const u=this.enemyDots[i];u.position.copy(r),u.position.z=.5;const d=u.material;d.color.getHex()!==h&&d.color.setHex(h);const g=u.geometry.parameters?.width||10;Math.abs(g-l)>.1&&u.scale.set(l/g,l/g,1)}else{const u=new ft(l,l),d=new Ae({color:h}),p=new oe(u,d);p.position.copy(r),p.position.z=.5,this.enemyDots.push(p),this.minimapScene.add(p)}}}dispose(){for(const e of this.enemyDots)this.minimapScene.remove(e),e.geometry.dispose(),e.material.dispose();this.enemyDots=[],this.minimapScene.traverse(e=>{e instanceof oe&&(e.geometry&&e.geometry.dispose(),e.material&&(Array.isArray(e.material)?e.material.forEach(t=>t.dispose()):e.material.dispose()))}),this.minimapRenderer.dispose(),this.minimapContainer&&this.minimapContainer.parentNode&&this.minimapContainer.parentNode.removeChild(this.minimapContainer)}}class ic{static UNIT_MORPH_OPTIONS=[{name:"Larvae",mineralCost:0,gasCost:0,mutations:[]},{name:"Drone",mineralCost:50,gasCost:0,mutations:[]},{name:"Zergling",mineralCost:25,gasCost:0,mutations:[{name:"Hardened Carapace",mineralCost:50,gasCost:50,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:10,bonusRegen:0,type:"mutation",description:"Increases survivability in prolonged engagements",panelDesc:"+10 HP"},{name:"Adrenal Overload",mineralCost:200,gasCost:200,bonusAttSpeed:50,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"Maximizes DPS for surgical strikes",panelDesc:"+50% attack speed"},{name:"Metabolic Boost",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:1,type:"mutation",description:"(+1/s regen) +60% movement speed - Enhances mobility for harassment and flanking",panelDesc:"+1/s regen"},{name:"Raptor Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:2,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"evolution",description:"Cliff jumping, leap attacks, terrain navigation - Mobile assault unit",panelDesc:"+2 damage"},{name:"Swarmling Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:2,type:"evolution",description:"(+2/s regen)3 per egg, 2s morph time - Overwhelming numerical superiority",panelDesc:"+2/s regen"}]},{name:"Baneling",mineralCost:25,gasCost:25,mutations:[{name:"Corrosive Acid",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"100% damage to primary target - Ensures maximum damage to priority targets",panelDesc:"+100% damage to primary target"},{name:"Rupture",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"+50% blast radius - Increases area denial and crowd control",panelDesc:"+50% blast radius"},{name:"Regenerative Acid",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"Explosion heals friendly units/structures - Tactical healing support",panelDesc:"Explosion heals friendly units"},{name:"Splitter Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:5,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"evolution",description:"Splits into smaller explosive units on detonation - Area denial",panelDesc:"+5 damage, splits into smaller banelings"},{name:"Hunter Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"evolution",description:"Cliff jumping, leap attacks - Eliminates terrain restrictions",panelDesc:"Cliff jumping, leap attacks"}]},{name:"Overlord",mineralCost:100,gasCost:0,mutations:[]},{name:"Roach",mineralCost:75,gasCost:25,mutations:[{name:"Hydriodic Bile",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:8,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"+8 damage vs Light units - Specializes against infantry",panelDesc:"+8 damage vs Light"},{name:"Adaptive Plating",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:3,bonusHP:0,bonusRegen:0,type:"mutation",description:"+3 armor when below 50% HP - Enhances survivability when critically damaged",panelDesc:"+3 armor when below 50% HP"},{name:"Tunneling Claws",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"Full speed burrowed movement + 100% regen rate - Guerrilla tactics",panelDesc:"Full speed burrowed move, +100% regen"},{name:"Corpser Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"evolution",description:"Spawns roachlings from killed enemies - Converts casualties to reinforcements",panelDesc:"Spawns roachlings from kills"},{name:"Vile Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"evolution",description:"Attacks slow enemy movement/attack by 75% - Battlefield control",panelDesc:"Attacks slow enemies by 75%"}]},{name:"Hydralisk",mineralCost:100,gasCost:50,mutations:[{name:"Frenzy",mineralCost:100,gasCost:100,bonusAttSpeed:50,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"+50% attack speed for 15s (30s cooldown) - Burst damage capability",panelDesc:"+50% attack speed for 15s (30s cd)"},{name:"Ancillary Carapace",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:20,bonusRegen:0,type:"mutation",description:"Increases base survivability",panelDesc:"+20 HP"},{name:"Grooved Spines",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"+1 range (5→6) - Improves engagement flexibility and safety",panelDesc:"+1 range"},{name:"Impaler Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"evolution",description:"Single-target burrowed attacks, armor penetration - Anti-armor siege unit",panelDesc:"Burrowed attacks, armor penetration"},{name:"Lurker Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"evolution",description:"Linear area attacks while burrowed - Area denial against light swarms",panelDesc:"Linear area attacks while burrowed"}]},{name:"Mutalisk",mineralCost:100,gasCost:100,mutations:[{name:"Vicious Glaive",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"+3 additional bounces (total 6 targets) - Maximizes damage vs grouped enemies",panelDesc:"+3 bounces (6 total targets)"},{name:"Rapid Regeneration",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"Health regeneration when out of combat (5s) - Sustained harassment",panelDesc:"Regen when out of combat (5s)"},{name:"Sundering Glaive",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:9,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"+9 damage vs Armored, no bounce - Specializes against heavy units",panelDesc:"+9 damage vs Armored, no bounce"},{name:"Brood Lord Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:11,bonusArmour:1,bonusHP:105,bonusRegen:0,type:"evolution",description:"225 HP, 1 armor, 20 damage - Heavy siege unit with broodling spawning",panelDesc:"+105 HP, +1 armor, +11 damage"},{name:"Viper Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:0,bonusArmour:1,bonusHP:30,bonusRegen:0,type:"evolution",description:"150 HP, 1 armor - Tactical support with Abduct, Blinding Cloud, Consume",panelDesc:"+30 HP, +1 armor, Abduct/Blinding Cloud"}]},{name:"Queen",mineralCost:150,gasCost:0,mutations:[]},{name:"Swarm Host",mineralCost:100,gasCost:75,mutations:[{name:"Burrow",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"Can spawn locusts while burrowed - Concealed siege capability",panelDesc:"Spawn locusts while burrowed"},{name:"Rapid Incubation",mineralCost:100,gasCost:100,bonusAttSpeed:20,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"+20% locust spawn rate - Increases sustained pressure",panelDesc:"+20% locust spawn rate"},{name:"Pressurized Glands",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"Locusts attack air and ground - Provides anti-air capability",panelDesc:"Locusts attack air and ground"},{name:"Carrion Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"evolution",description:"Flying locusts: +50% damage, +speed, -25% HP - Air-to-ground siege",panelDesc:"Flying locusts: +50% damage, +speed"},{name:"Creeper Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"evolution",description:"Generates creep, Deep Tunnel ability - Enhanced strategic mobility",panelDesc:"Generates creep, Deep Tunnel"}]},{name:"Ultralisk",mineralCost:275,gasCost:200,mutations:[{name:"Burrow Charge",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"Underground charge attack - Surprise engagement initiation",panelDesc:"Underground charge attack"},{name:"Tissue Assimilation",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"Recovers 40% damage dealt as HP - Self-sustaining combat capability",panelDesc:"Recovers 40% damage as HP"},{name:"Monarch Blades",mineralCost:100,gasCost:100,bonusAttSpeed:0,bonusDmg:20,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"mutation",description:"+20 splash damage - Enhances crowd control against grouped enemies",panelDesc:"+20 splash damage"},{name:"Noxious Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:0,bonusArmour:0,bonusHP:0,bonusRegen:0,type:"evolution",description:"Noxious Cloud (5 DPS), Toxic Blast (20 damage) - Area denial through poison",panelDesc:"Noxious Cloud (5/s), Toxic Blast (20)"},{name:"Torrasque Strain",mineralCost:150,gasCost:150,bonusAttSpeed:0,bonusDmg:10,bonusArmour:2,bonusHP:100,bonusRegen:0,type:"evolution",description:"600 HP, 4 armor, 45 damage - Reincarnation (60s cooldown) for battlefield persistence",panelDesc:"+100 HP, +2 armor, +10 damage, Reincarnation"}]}];static getMutationsByUnitName(e){return this.UNIT_MORPH_OPTIONS.find(n=>n.name===e)?.mutations||[]}static getUnitsWithMutations(){return this.UNIT_MORPH_OPTIONS.filter(e=>e.mutations&&e.mutations.length>0).map(e=>e.name)}static getMutation(e,t){return this.getMutationsByUnitName(e).find(i=>i.name===t)}static getTemporaryMutations(e){return this.getMutationsByUnitName(e).filter(t=>t.type==="mutation")}static getEvolutionStrains(e){return this.getMutationsByUnitName(e).filter(t=>t.type==="evolution")}}class s0{controlContainer;callbacks;mineralsDisplay;gasDisplay;essenceDisplay;hpDisplay;morphSelect;SPEED_OPTIONS={Slow:30,Normal:50,Fast:90,Lightning:180};UNIT_MORPH_OPTIONS=ic.UNIT_MORPH_OPTIONS;constructor(e){this.callbacks=e,this.setupControlPanel()}setupControlPanel(){this.controlContainer=document.createElement("div"),this.controlContainer.className="control-panel";const e=this.createResourceSection(),t=this.createMorphSection(),n=this.createZoomSection(),i=this.createSpeedSection();this.controlContainer.appendChild(e),this.controlContainer.appendChild(t),this.controlContainer.appendChild(n),this.controlContainer.appendChild(i),document.body.appendChild(this.controlContainer)}createResourceSection(){const e=document.createElement("div");e.className="control-section resource-section";const t=document.createElement("div");t.className="control-label resource-label",t.textContent="Resources";const n=document.createElement("div");n.className="resource-display";const i=document.createElement("div");i.className="resource-item minerals";const s=document.createElement("span");s.className="resource-icon minerals-icon",s.textContent="♦♦",this.mineralsDisplay=document.createElement("span"),this.mineralsDisplay.className="resource-value",this.mineralsDisplay.textContent="0",i.appendChild(s),i.appendChild(this.mineralsDisplay);const r=document.createElement("div");r.className="resource-item gas";const o=document.createElement("span");o.className="resource-icon gas-icon",o.textContent="●○",this.gasDisplay=document.createElement("span"),this.gasDisplay.className="resource-value",this.gasDisplay.textContent="0",r.appendChild(o),r.appendChild(this.gasDisplay);const l=document.createElement("div");l.className="resource-item essence";const c=document.createElement("span");c.className="resource-icon essence-icon",c.textContent="🐚",this.essenceDisplay=document.createElement("span"),this.essenceDisplay.className="resource-value",this.essenceDisplay.textContent="0",l.appendChild(c),l.appendChild(this.essenceDisplay);const h=document.createElement("div");h.className="resource-item hp";const u=document.createElement("span");return u.className="resource-icon hp-icon",u.textContent="♥",this.hpDisplay=document.createElement("span"),this.hpDisplay.className="resource-value",this.hpDisplay.textContent="0/0",h.appendChild(u),h.appendChild(this.hpDisplay),n.appendChild(i),n.appendChild(r),n.appendChild(l),n.appendChild(h),e.appendChild(t),e.appendChild(n),e}createMorphSection(){const e=document.createElement("div");e.className="control-section",this.morphSelect=document.createElement("select"),this.morphSelect.className="morph-select";const t=document.createElement("option");return t.value="",t.textContent="Morph Into (Select)",t.disabled=!0,t.selected=!0,this.morphSelect.appendChild(t),this.UNIT_MORPH_OPTIONS.forEach(n=>{const i=document.createElement("option");i.value=n.name;let s="";(n.mineralCost>0||n.gasCost>0)&&(s=" (",n.mineralCost>0&&(s+=`${n.mineralCost}M`),n.gasCost>0&&(s+=n.mineralCost>0?`/${n.gasCost}G`:`${n.gasCost}G`),s+=")"),i.textContent=`${n.name}${s}`,i.dataset.minerals=n.mineralCost.toString(),i.dataset.gas=n.gasCost.toString(),this.morphSelect.appendChild(i)}),this.morphSelect.addEventListener("change",n=>{const i=n.target,s=i.value;s&&(this.callbacks.onMorphUnit(s),i.value=""),i.blur()}),this.morphSelect.addEventListener("keydown",n=>{["ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].includes(n.key)&&(n.preventDefault(),n.stopPropagation(),this.morphSelect.blur())}),e.appendChild(this.morphSelect),e}createZoomSection(){const e=document.createElement("div");e.className="control-section";const t=document.createElement("div");t.className="zoom-controls";const n=document.createElement("span");n.className="zoom-label",n.textContent="Zoom";const i=document.createElement("button");i.className="zoom-btn",i.textContent="-",i.addEventListener("click",()=>{this.callbacks.onZoomChange(-.1)});const s=document.createElement("button");return s.className="zoom-btn",s.textContent="+",s.addEventListener("click",()=>{this.callbacks.onZoomChange(.1)}),t.appendChild(n),t.appendChild(i),t.appendChild(s),e.appendChild(t),e}createSpeedSection(){const e=document.createElement("div");e.className="control-section";const t=document.createElement("select");t.className="speed-select";const n=document.createElement("option");return n.value="",n.textContent="Speed (Normal)",n.disabled=!0,n.selected=!0,n.hidden=!0,t.appendChild(n),Object.entries(this.SPEED_OPTIONS).forEach(([i,s])=>{const r=document.createElement("option");r.value=s.toString(),r.textContent=i,t.appendChild(r)}),t.addEventListener("change",i=>{const s=i.target,r=parseInt(s.value),o=s.options[s.selectedIndex].text;n.textContent=`Speed (${o})`,s.value="",this.callbacks.onSpeedChange(r),s.blur()}),t.addEventListener("keydown",i=>{["ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].includes(i.key)&&(i.preventDefault(),i.stopPropagation(),t.blur())}),e.appendChild(t),e}setAvailableUnits(e){Array.from(this.morphSelect.querySelectorAll("option")).forEach(n=>{n.value!==""&&this.morphSelect.removeChild(n)}),this.UNIT_MORPH_OPTIONS.forEach(n=>{if(e.includes(n.name)){const i=document.createElement("option");i.value=n.name;let s="";(n.mineralCost>0||n.gasCost>0)&&(s=" (",n.mineralCost>0&&(s+=`${n.mineralCost}M`),n.gasCost>0&&(s+=n.mineralCost>0?`/${n.gasCost}G`:`${n.gasCost}G`),s+=")"),i.textContent=`${n.name}${s}`,i.dataset.minerals=n.mineralCost.toString(),i.dataset.gas=n.gasCost.toString(),this.morphSelect.appendChild(i)}})}updateResources(e,t,n,i,s){this.mineralsDisplay.textContent=e.toString(),this.gasDisplay.textContent=t.toString(),this.essenceDisplay.textContent=n.toString(),this.hpDisplay.textContent=`${i}/${s}`,this.morphSelect.querySelectorAll("option").forEach(o=>{if(o.value==="")return;const l=parseInt(o.dataset.minerals||"0"),c=parseInt(o.dataset.gas||"0"),h=e>=l&&t>=c;o.disabled=!h})}dispose(){this.controlContainer&&this.controlContainer.parentElement&&document.body.removeChild(this.controlContainer)}}class r0{titleContainer;README_URL="https://github.com/bresleveloper/ZerusCarnage_01/blob/main/README.md";constructor(){this.setupGameTitle()}setupGameTitle(){this.titleContainer=document.createElement("div"),this.titleContainer.className="game-title";const e=document.createElement("span");e.className="game-title-text",e.textContent="ZerusCarnage";const t=document.createElement("a");t.className="info-icon",t.href=this.README_URL,t.target="_blank",t.rel="noopener noreferrer",t.textContent="ⓘ",t.title="View README",this.titleContainer.appendChild(e),this.titleContainer.appendChild(t),document.body.appendChild(this.titleContainer)}dispose(){this.titleContainer&&this.titleContainer.parentElement&&document.body.removeChild(this.titleContainer)}}class er{supply;costMinerals;costVespene;hitPoints;armor;damage;attackCooldown;attributes;unitTypeName;currentHP;attackTimer;isInCombat;damageAbsorb=0;attackUpgrade=0;armorUpgrade=0;sizeMultiplier=1;model;position;constructor(e,t,n,i=1){this.supply=e.supply,this.costMinerals=e.costMinerals,this.costVespene=e.costVespene,this.hitPoints=e.hitPoints,this.armor=e.armor,this.damage=e.damage,this.attackCooldown=e.attackCooldown,this.attributes=[...e.attributes],this.unitTypeName=n,this.sizeMultiplier=i,this.currentHP=this.hitPoints,this.attackTimer=0,this.isInCombat=!1,this.position=t.clone(),this.model=this.createModel(),this.model.position.copy(this.position)}getSupply(){return this.supply}getCostMinerals(){return this.costMinerals}getCostVespene(){return this.costVespene}getHitPoints(){return this.hitPoints}getArmor(){return this.armor}getDamage(){return this.damage}getAttackCooldown(){return this.attackCooldown}getAttributes(){return[...this.attributes]}getUnitTypeName(){return this.unitTypeName}getCurrentHP(){return this.currentHP}getAttackTimer(){return this.attackTimer}getIsInCombat(){return this.isInCombat}setIsInCombat(e){this.isInCombat=e}getAttackUpgrade(){return this.attackUpgrade}getArmorUpgrade(){return this.armorUpgrade}setAttackUpgrade(e){this.attackUpgrade=e}setArmorUpgrade(e){this.armorUpgrade=e}getSizeMultiplier(){return this.sizeMultiplier}getDamageAbsorb(){return this.damageAbsorb}setDamageAbsorb(e){this.damageAbsorb=Math.max(0,e)}getModel(){return this.model}getPosition(){return this.position.clone()}setPosition(e){this.position.copy(e),this.model.position.copy(this.position)}takeDamage(e,t=this.armor){if(e<0){const i=Math.abs(e);this.currentHP=Math.min(this.hitPoints,this.currentHP+i);return}let n=e;if(this.damageAbsorb>0){const i=Math.min(this.damageAbsorb,e);this.damageAbsorb-=i,n=e-i}if(n>0){const i=Math.max(1,n-t);this.currentHP=Math.max(0,this.currentHP-i)}}canAttack(){return this.attackTimer<=0}resetAttackTimer(){this.attackTimer=this.attackCooldown}updateAttackTimer(e){this.attackTimer>0&&(this.attackTimer=Math.max(0,this.attackTimer-e))}isAlive(){return this.currentHP>0}getUnitInfo(){return`${this.constructor.name} - ${this.costMinerals}M/${this.costVespene}G - HP:${this.hitPoints} Armor:${this.armor} Damage:${this.damage}`}dispose(){this.model.traverse(e=>{e instanceof oe&&(e.geometry&&e.geometry.dispose(),e.material&&(Array.isArray(e.material)?e.material.forEach(t=>t.dispose()):e.material.dispose()))})}}class Ci extends er{direction;speed=20;directionChangeTimer=0;directionChangeInterval=3+Math.random()*2;isPlayerUnit=!1;customBodyColor;constructor(e,t=!1,n,i,s=1){const r={supply:1,costMinerals:50,costVespene:0,hitPoints:40,armor:0,damage:5,attackCooldown:1,attributes:["Biological"],...n};super(r,e,"Drone",s),this.isPlayerUnit=t,this.customBodyColor=i,this.model=this.createDroneModel(),this.model.position.copy(this.position),this.direction=this.getRandomDirection(),this.updateRotation()}createModel(){return this.createDroneModel()}createDroneModel(){const e=new bt,t=3*this.sizeMultiplier,n=this.customBodyColor??(this.isPlayerUnit?16716947:16738740),i=new it(1.2*t,12,8);this.sizeMultiplier>1?i.scale(1.5,1,.3):i.scale(1.5,1,1);const s=new Ae({color:n}),r=new oe(i,s);r.position.set(0,.6*t,0);const o=new it(.12*t,6,4);o.scale(.6,1.2,1);const l=new Ae({color:0}),c=new oe(o,l);c.position.set(-.4*t,.8*t,1.6*t);const h=new oe(o,l);h.position.set(.4*t,.8*t,1.6*t);const u=new it(.6*t,8,6);u.scale(.8,.6,1.2);const d=new Ae({color:16758465}),p=new oe(u,d);p.position.set(-1.8*t,.4*t,0);const g=new it(.6*t,8,6);g.scale(.8,.6,1.2);const y=new oe(g,d);return y.position.set(1.8*t,.4*t,0),e.add(r),e.add(c),e.add(h),e.add(p),e.add(y),e.position.y=.3*t,e}getRandomDirection(){const e=Math.random()*Math.PI*2;return new Y(Math.cos(e),Math.sin(e))}updateRotation(){if(this.direction.length()>0){const e=Math.atan2(this.direction.y,this.direction.x);this.model.rotation.z=e}}static getRandomEdgePosition(){const t=Math.floor(Math.random()*4);let n,i;switch(t){case 0:n=(Math.random()-.5)*(500*2),i=500;break;case 1:n=(Math.random()-.5)*(500*2),i=-500;break;case 2:n=-500,i=(Math.random()-.5)*(500*2);break;case 3:n=500,i=(Math.random()-.5)*(500*2);break;default:n=0,i=500}return new w(n,i,0)}update(e,t,n,i,s){if(s)if(Math.sqrt(Math.pow(this.position.x-s.x,2)+Math.pow(this.position.y-s.y,2))<=100){const g=s.x-this.position.x,y=s.y-this.position.y,v=Math.sqrt(g*g+y*y);v>0&&(this.direction.set(g/v,y/v),this.updateRotation())}else this.directionChangeTimer+=e,this.directionChangeTimer>=this.directionChangeInterval&&(this.direction=this.getRandomDirection(),this.directionChangeTimer=0,this.directionChangeInterval=3+Math.random()*2,this.updateRotation());else this.directionChangeTimer+=e,this.directionChangeTimer>=this.directionChangeInterval&&(this.direction=this.getRandomDirection(),this.directionChangeTimer=0,this.directionChangeInterval=3+Math.random()*2,this.updateRotation());const r=this.speed*e;let o=this.position.x+this.direction.x*r,l=this.position.y+this.direction.y*r;const c=new w(o,l,0),h=this.getRadius();let u=!1;for(const p of n){const g=new w(p.position.x,p.position.y+2,p.position.z);if(Math.sqrt(Math.pow(c.x-g.x,2)+Math.pow(c.y-g.y,2))<h+.8){u=!0;break}}if(!u){for(const p of i)if(Math.sqrt(Math.pow(c.x-p.position.x,2)+Math.pow(c.y-p.position.y,2))<h+1.5){u=!0;break}}if(u){this.direction.x*=-1,this.direction.y*=-1,this.direction.x+=(Math.random()-.5)*.5,this.direction.y+=(Math.random()-.5)*.5;const p=Math.sqrt(this.direction.x*this.direction.x+this.direction.y*this.direction.y);this.direction.x/=p,this.direction.y/=p,this.updateRotation();return}const d=10;(o<=t.minX+d||o>=t.maxX-d)&&(this.direction.x*=-1,o=Math.max(t.minX+d,Math.min(t.maxX-d,o))),(l<=t.minY+d||l>=t.maxY-d)&&(this.direction.y*=-1,l=Math.max(t.minY+d,Math.min(t.maxY-d,l))),this.position.set(o,l,0),this.model.position.copy(this.position),this.updateRotation()}getRadius(){return 5*this.sizeMultiplier}}class Ai extends er{direction;speed=22;directionChangeTimer=0;directionChangeInterval=2+Math.random()*2;isPlayerUnit=!1;customBodyColor;constructor(e,t=!1,n,i,s=1){const r={supply:.5,costMinerals:25,costVespene:0,hitPoints:35,armor:0,damage:5,attackCooldown:.61,attributes:["Light","Biological"],...n};super(r,e,"Zergling",s),this.isPlayerUnit=t,this.customBodyColor=i,this.model=this.createZerglingModel(),this.model.position.copy(this.position),this.direction=this.getRandomDirection(),this.updateRotation()}createModel(){return this.createZerglingModel()}createZerglingModel(){const e=new bt,t=2.5*this.sizeMultiplier,n=this.customBodyColor??(this.isPlayerUnit?11032063:14194431),i=new it(1.2*t,12,8);i.scale(1.3,1,1.1);const s=new Ae({color:n}),r=new oe(i,s);r.position.set(0,1.2*t,0);const o=new it(1*t,12,8,0,Math.PI*2,0,Math.PI/1.8),l=new Ae({color:4856394}),c=new oe(o,l);c.position.set(.3*t,.8*t,0),c.rotation.z=Math.PI/6;const h=new Ae({color:4856394});for(let W=0;W<5;W++){const N=new js(.15*t,.3*t,4),A=new oe(N,h);A.position.set((W-2)*.35*t,1*t,.8*t),A.rotation.x=Math.PI,e.add(A)}const u=new it(.35*t,8,6),d=new Ae({color:0}),p=new oe(u,d);p.position.set(-.4*t,1.6*t,1*t);const g=new oe(u,d);g.position.set(.4*t,1.6*t,1*t);const y=new hn(.15*t,.2*t,.5*t,6),v=new Ae({color:13073919}),f=new oe(y,v);f.position.set(-.5*t,.25*t,.7*t);const m=new oe(y,v);m.position.set(.5*t,.25*t,.7*t);const E=new oe(y,v);E.position.set(-.6*t,.25*t,-.5*t);const _=new oe(y,v);_.position.set(.6*t,.25*t,-.5*t);const T=new hn(.2*t,.35*t,1.5*t,8),C=new Ae({color:11888088}),x=new oe(T,C);x.position.set(-.3*t,1.3*t,-1.3*t),x.rotation.x=Math.PI/3,x.rotation.z=-Math.PI/8;const R=new oe(T,C);return R.position.set(.3*t,1.3*t,-1.3*t),R.rotation.x=Math.PI/3,R.rotation.z=Math.PI/8,e.add(r),e.add(c),e.add(p),e.add(g),e.add(f),e.add(m),e.add(E),e.add(_),e.add(x),e.add(R),e.position.y=0,e}getRandomDirection(){const e=Math.random()*Math.PI*2;return new Y(Math.cos(e),Math.sin(e))}updateRotation(){if(this.direction.length()>0){const e=Math.atan2(this.direction.y,this.direction.x);this.model.rotation.z=e}}static getRandomEdgePosition(e){let n=Math.floor(Math.random()*4);if(e!==void 0){const r=[0,1,2,3].filter(o=>o!==e);n=r[Math.floor(Math.random()*r.length)]}let i,s;switch(n){case 0:i=(Math.random()-.5)*(500*2),s=500;break;case 1:i=(Math.random()-.5)*(500*2),s=-500;break;case 2:i=-500,s=(Math.random()-.5)*(500*2);break;case 3:i=500,s=(Math.random()-.5)*(500*2);break;default:i=0,s=500}return new w(i,s,0)}update(e,t,n,i,s){if(s)if(Math.sqrt(Math.pow(this.position.x-s.x,2)+Math.pow(this.position.y-s.y,2))<=100){const g=s.x-this.position.x,y=s.y-this.position.y,v=Math.sqrt(g*g+y*y);v>0&&(this.direction.set(g/v,y/v),this.updateRotation())}else this.directionChangeTimer+=e,this.directionChangeTimer>=this.directionChangeInterval&&(this.direction=this.getRandomDirection(),this.directionChangeTimer=0,this.directionChangeInterval=2+Math.random()*2,this.updateRotation());else this.directionChangeTimer+=e,this.directionChangeTimer>=this.directionChangeInterval&&(this.direction=this.getRandomDirection(),this.directionChangeTimer=0,this.directionChangeInterval=2+Math.random()*2,this.updateRotation());const r=this.speed*e;let o=this.position.x+this.direction.x*r,l=this.position.y+this.direction.y*r;const c=new w(o,l,0),h=this.getRadius();let u=!1;for(const p of n){const g=new w(p.position.x,p.position.y+2,p.position.z);if(Math.sqrt(Math.pow(c.x-g.x,2)+Math.pow(c.y-g.y,2))<h+.8){u=!0;break}}if(!u){for(const p of i)if(Math.sqrt(Math.pow(c.x-p.position.x,2)+Math.pow(c.y-p.position.y,2))<h+1.5){u=!0;break}}if(u){this.direction.x*=-1,this.direction.y*=-1,this.direction.x+=(Math.random()-.5)*.5,this.direction.y+=(Math.random()-.5)*.5;const p=Math.sqrt(this.direction.x*this.direction.x+this.direction.y*this.direction.y);this.direction.x/=p,this.direction.y/=p,this.updateRotation();return}const d=10;(o<=t.minX+d||o>=t.maxX-d)&&(this.direction.x*=-1,o=Math.max(t.minX+d,Math.min(t.maxX-d,o))),(l<=t.minY+d||l>=t.maxY-d)&&(this.direction.y*=-1,l=Math.max(t.minY+d,Math.min(t.maxY-d,l))),this.position.set(o,l,0),this.model.position.copy(this.position),this.updateRotation()}getRadius(){return 4*this.sizeMultiplier}}class sc{rules=[];constructor(){this.initializeRules()}initializeRules(){this.addRule("Drone","Larvae",!0,!1,0),this.addRule("Larvae","Bush",!1,!0,0),this.addRule("Drone","Drone",!1,!1,0),this.addRule("Larvae","Drone",!1,!1,0),this.addRule("Drone","Bush",!1,!0,0),this.addRule("Drone","Tree",!1,!0,20),this.addRule("Drone","Zergling",!1,!1,0),this.addRule("Zergling","Zergling",!1,!1,0),this.addRule("Zergling","Larvae",!0,!0,25),this.addRule("Zergling","Drone",!0,!0,50)}addRule(e,t,n,i,s){this.rules.push({attacker:e,target:t,canKill:n,canEat:i,reward:s})}canKill(e,t){const n=this.rules.find(i=>i.attacker===e&&i.target===t);return n?n.canKill:!1}canEat(e,t){const n=this.rules.find(i=>i.attacker===e&&i.target===t);return n?n.canEat:!1}getReward(e,t){const n=this.rules.find(i=>i.attacker===e&&i.target===t);return n?n.reward:0}isImmuneTo(e,t){return!this.canKill(t,e)}shouldFight(e,t){return!(e==="Larvae"||t==="Larvae")}}class a0{gameOver=!1;callbacks;combatRules;constructor(e){this.callbacks=e,this.combatRules=new sc}checkCollisions(e,t,n,i){if(!this.gameOver)for(const s of i){const r=s.getPosition(),o=s.getRadius?s.getRadius():3;if(Math.sqrt(Math.pow(e.x-r.x,2)+Math.pow(e.y-r.y,2))<t+o){const c=s.getUnitTypeName();if(this.combatRules.canKill(c,n)){this.triggerGameOver();break}}}}checkEatingEnemies(e,t,n,i,s){for(const r of i){const o=r.getPosition(),l=r.getRadius?r.getRadius():3;if(Math.sqrt(Math.pow(e.x-o.x,2)+Math.pow(e.y-o.y,2))<t+l){const h=r.getUnitTypeName();if(this.combatRules.canEat(n,h)){const u=this.combatRules.getReward(n,h);return s(r,u),r}}}return null}triggerGameOver(){this.gameOver||(this.gameOver=!0,this.callbacks.onGameOver())}isGameOver(){return this.gameOver}resetGameState(){this.gameOver=!1}takeDamage(e){}addEffect(e,t){}collectPowerUp(e){}}class o0{attackLevel=0;armorLevel=0;getAttackLevel(){return this.attackLevel}getArmorLevel(){return this.armorLevel}getAttackBonus(){return this.attackLevel}getArmorBonus(){return this.armorLevel}upgradeAttack(){this.attackLevel++}upgradeArmor(){this.armorLevel++}getAttackUpgradeCost(){this.attackLevel+1;const e=100+this.attackLevel*50;return{minerals:e,gas:e}}getArmorUpgradeCost(){this.armorLevel+1;const e=150+this.armorLevel*50;return{minerals:e,gas:e}}getInfo(){return`Attack: +${this.attackLevel} | Armor: +${this.armorLevel}`}}class Gs{static instance=null;container;callbacks;mutationButtons=[];isExpanded=!1;contentContainer;collapseIndicator;currentUnitType="";constructor(e){this.callbacks=e,this.container=this.createPanel(),Gs.instance=this}static getInstance(){return Gs.instance}createPanel(){const e=document.createElement("div");e.className="spending-section";const t=document.createElement("div");t.className="spending-header",t.addEventListener("click",()=>this.toggleCollapse()),this.collapseIndicator=document.createElement("span"),this.collapseIndicator.className="collapse-indicator",this.collapseIndicator.textContent="▶";const n=document.createElement("span");n.className="control-label",n.textContent="Evolutions",t.appendChild(this.collapseIndicator),t.appendChild(n),e.appendChild(t),this.contentContainer=document.createElement("div"),this.contentContainer.className="spending-content collapsed";for(let i=0;i<5;i++){const s=this.createMutationButton(i);this.mutationButtons.push(s),this.contentContainer.appendChild(s)}return e.appendChild(this.contentContainer),e}createMutationButton(e){const t=document.createElement("button");t.className="upgrade-button",t.style.display="none",t.setAttribute("data-mutation-index",e.toString());const n=document.createElement("span");n.className="upgrade-icon",n.textContent="🧬";const i=document.createElement("span");i.className="upgrade-label",i.textContent="";const s=document.createElement("span");s.className="upgrade-cost",s.textContent="0M / 0G";const r=document.createElement("span");r.className="info-icon",r.textContent="ℹ️";const o=document.createElement("div");return o.className="mutation-tooltip",o.textContent="",r.appendChild(o),t.appendChild(n),t.appendChild(i),t.appendChild(s),t.appendChild(r),t}toggleCollapse(){this.isExpanded=!this.isExpanded,this.isExpanded?(this.contentContainer.classList.remove("collapsed"),this.collapseIndicator.textContent="▼"):(this.contentContainer.classList.add("collapsed"),this.collapseIndicator.textContent="▶")}updateMutations(e,t,n){this.currentUnitType=e;const i=ic.getMutationsByUnitName(e);if(this.mutationButtons.forEach(s=>s.style.display="none"),i.length===0){this.isExpanded&&this.toggleCollapse();return}i.forEach((s,r)=>{if(r<5){const o=this.mutationButtons[r];this.updateButton(o,s,t,n),o.style.display="flex"}}),this.isExpanded||this.toggleCollapse()}updateButton(e,t,n,i){const s=e.querySelector(".upgrade-icon"),r=e.querySelector(".upgrade-label"),o=e.querySelector(".upgrade-cost"),l=e.querySelector(".mutation-tooltip");let c="🧬";t.bonusDmg>0?c="⚔️":t.bonusArmour>0?c="🛡️":t.bonusHP>0?c="❤️":t.bonusAttSpeed>0?c="⚡":t.bonusRegen>0&&(c="💚"),s.textContent=c,r.textContent=t.name,o.textContent=`${t.mineralCost}M / ${t.gasCost}G`,l.textContent=t.panelDesc||"";const h=n>=t.mineralCost&&i>=t.gasCost;e.disabled=!h,e.onclick=()=>{h&&this.callbacks.onSelectMutation(t.name)}}getContainer(){return this.container}dispose(){this.container.parentNode&&this.container.parentNode.removeChild(this.container)}}class Os{static instance=null;scene;camera;visualElements;playerUnit=null;constructor(e,t,n){this.scene=e,this.camera=t,this.visualElements=new Map,this.playerUnit=n||null,Os.instance=this}static getInstance(){return Os.instance}setPlayerUnit(e){this.playerUnit=e}setDisplayMode(e,t){const n=this.visualElements.get(e);if(!n){this.trackUnit(e,t);return}n.displayMode!==t&&(this.untrackUnit(e),this.trackUnit(e,t))}trackUnit(e,t="healthbar"){e.getUnitTypeName()!=="Larvae"&&(t==="healthbar"?this.createHPBar(e):t!=="hide"&&this.createIconDisplay(e,t))}untrackUnit(e){this.removeHPBar(e)}getUpgradeColor(e){switch(e){case 0:return"#CCCCCC";case 1:return"#00BFFF";case 2:return"#DA70D6";case 3:return"#FF0000";default:return"#FFD700"}}getIconCharacter(e){switch(e){case"quest":return"!";case"help":return"?";case"shop":return"💰";default:return"!"}}getIconColor(e){switch(e){case"quest":return"#FFFF00";case"help":return"#00BFFF";case"shop":return"#FFD700";default:return"#FFFFFF"}}createIconSprite(e,t){const n=document.createElement("canvas");n.width=256,n.height=256;const i=n.getContext("2d");i.clearRect(0,0,256,256),i.font="bold 200px Arial",i.fillStyle=this.getIconColor(e),i.textAlign="center",i.textBaseline="middle";const s=this.getIconCharacter(e);i.fillText(s,128,128);const r=new Ui(n),o=new nn(new si({map:r,transparent:!0})),l=t.getRadius()+3;return o.position.set(0,l,1),o.scale.set(4,4,1),o}createIconDisplay(e,t){if(this.visualElements.has(e))return;const n=this.createIconSprite(t,e);e.getModel().add(n),this.visualElements.set(e,{unit:e,displayMode:t,iconSprite:n})}createUpgradeIndicator(e){let t,n;this.playerUnit&&e===this.playerUnit.getCurrentUnit()?(t=this.playerUnit.getUpgrades().getAttackBonus(),n=this.playerUnit.getUpgrades().getArmorBonus()):(t=e.getAttackUpgrade(),n=e.getArmorUpgrade());const i=e.getSizeMultiplier()>1,s=document.createElement("canvas");s.width=i?512:384,s.height=192;const r=s.getContext("2d");r.clearRect(0,0,s.width,s.height),r.font="bold 96px Arial",r.fillStyle=this.getUpgradeColor(t),r.fillText(t.toString(),60,120),r.fillStyle="#FFFFFF",r.fillText("/",156,120),r.fillStyle=this.getUpgradeColor(n),r.fillText(n.toString(),225,120),i&&(r.fillStyle="#FFFFFF",r.fillText("/",294,120),r.fillStyle="#FFFFFF",r.fillText(e.getHitPoints().toString(),363,120));const o=new Ui(s),l=new si({map:o}),c=new nn(l),h=e.getSizeMultiplier()>1?1:.5;return c.scale.set((i?56:42)*h,21*h,1),c}updateUpgradeIndicator(e){const t=this.visualElements.get(e);if(!t||!t.upgradeText)return;let n,i;this.playerUnit&&e===this.playerUnit.getCurrentUnit()?(n=this.playerUnit.getUpgrades().getAttackBonus(),i=this.playerUnit.getUpgrades().getArmorBonus()):(n=e.getAttackUpgrade(),i=e.getArmorUpgrade());const s=e.getSizeMultiplier()>1,r=document.createElement("canvas");r.width=s?512:384,r.height=192;const o=r.getContext("2d");o.clearRect(0,0,r.width,r.height),o.font="bold 96px Arial",o.fillStyle=this.getUpgradeColor(n),o.fillText(n.toString(),60,120),o.fillStyle="#FFFFFF",o.fillText("/",156,120),o.fillStyle=this.getUpgradeColor(i),o.fillText(i.toString(),225,120),s&&(o.fillStyle="#FFFFFF",o.fillText("/",294,120),o.fillStyle="#FFFFFF",o.fillText(e.getHitPoints().toString(),363,120));const l=new Ui(r),c=t.upgradeText.material;c.map&&c.map.dispose(),c.map=l,c.needsUpdate=!0;const h=e.getSizeMultiplier()>1?1:.5;t.upgradeText.scale.set((s?56:42)*h,21*h,1)}createHPBar(e){if(this.visualElements.has(e))return;const t=8,n=.8,i=e.getRadius()+2+(e.getSizeMultiplier()>1?15:0),s=new ft(t,n),r=new Ae({color:9109504}),o=new oe(s,r);o.position.set(0,i,1);const l=new ft(t,n),c=new Ae({color:65280}),h=new oe(l,c);h.position.set(0,i,1.1);const u=this.createUpgradeIndicator(e);u.position.set(0,i+2,1.2);const d=e.getModel();d.add(o),d.add(h),d.add(u),this.visualElements.set(e,{unit:e,displayMode:"healthbar",background:o,foreground:h,upgradeText:u})}removeHPBar(e){const t=this.visualElements.get(e);if(!t)return;const n=e.getModel();t.background&&(n.remove(t.background),t.background.geometry.dispose(),t.background.material.dispose()),t.foreground&&(n.remove(t.foreground),t.foreground.geometry.dispose(),t.foreground.material.dispose()),t.upgradeText&&(n.remove(t.upgradeText),t.upgradeText.material.map?.dispose(),t.upgradeText.material.dispose()),t.iconSprite&&(n.remove(t.iconSprite),t.iconSprite.material.map?.dispose(),t.iconSprite.material.dispose()),this.visualElements.delete(e)}updateHPBars(){this.visualElements.forEach(e=>{if(e.displayMode!=="healthbar"||!e.foreground)return;const t=e.unit.getCurrentHP(),n=e.unit.getHitPoints(),i=t/n,s=8;e.foreground.scale.x=i;const r=s*(1-i)/2;e.foreground.position.x=-r;const o=e.foreground.material;i>.6?o.color.setHex(65280):i>.3?o.color.setHex(16776960):o.color.setHex(16711680)})}update(e){this.updateHPBars()}getTrackedUnitCount(){return this.visualElements.size}isTracking(e){return this.visualElements.has(e)}dispose(){this.visualElements.forEach(e=>{this.removeHPBar(e.unit)}),this.visualElements.clear()}}class l0{currentUnit;unitType;speed=50;rotationZ=0;minerals=50;gas=0;essence=0;upgrades;isMorphing=!1;constructor(e,t){this.currentUnit=e,this.unitType=t,this.upgrades=new o0}getModel(){return this.currentUnit.getModel()}getPosition(){return this.currentUnit.getPosition()}setPosition(e){this.currentUnit.setPosition(e)}getSpeed(){return this.speed}setSpeed(e){this.speed=e}getRotation(){return this.rotationZ}setRotation(e){this.rotationZ=e,this.currentUnit.getModel().rotation.z=e}getRadius(){return this.currentUnit.getRadius()}getMinerals(){return this.minerals}setMinerals(e){this.minerals=Math.max(0,e)}getGas(){return this.gas}setGas(e){this.gas=Math.max(0,e)}getEssence(){return this.essence}setEssence(e){this.essence=Math.max(0,e)}addEssence(e){this.essence+=e,this.essence=Math.max(0,this.essence)}getResources(){return{minerals:this.minerals,gas:this.gas,essence:this.essence}}getUnitType(){return this.unitType}getCurrentUnit(){return this.currentUnit}morphInto(e,t){const n=this.getPosition(),i=this.minerals,s=this.gas,r=this.essence;this.currentUnit.dispose(),this.currentUnit=e,this.unitType=t,this.setPosition(n),this.minerals=i,this.gas=s,this.essence=r,this.isMorphing=!1}setMorphing(e){this.isMorphing=e}getIsMorphing(){return this.isMorphing}getUpgrades(){return this.upgrades}getEffectiveDamage(){return this.currentUnit.getDamage()+this.upgrades.getAttackBonus()}getEffectiveArmor(){return this.currentUnit.getArmor()+this.upgrades.getArmorBonus()}getCurrentHP(){return this.currentUnit.getCurrentHP()}getMaxHP(){return this.currentUnit.getHitPoints()}getDamageAbsorb(){return this.currentUnit.getDamageAbsorb()}purchaseDamageAbsorb(e,t){if(this.essence>=e){this.essence-=e;const n=this.currentUnit.getDamageAbsorb();return this.currentUnit.setDamageAbsorb(n+t),!0}return!1}}class Ps extends er{direction;speed=8;directionChangeTimer=0;directionChangeInterval=4+Math.random()*3;isPlayerUnit=!1;constructor(e,t=!1){const n={supply:0,costMinerals:0,costVespene:0,hitPoints:25,armor:10,damage:0,attackCooldown:999,attributes:["Light","Biological"]};super(n,e,"Larvae"),this.isPlayerUnit=t,this.model=this.createModelWithColor(t),this.model.position.copy(this.position),this.direction=this.getRandomDirection(),this.updateRotation()}createModel(){return this.createModelWithColor(this.isPlayerUnit)}createModelWithColor(e=!1){const t=new bt,n=1,i=e?10048989:11163050,s=14514141,r=10044586,o=7812010,l=new it(1.2*n,8,6);l.scale(1.5,.8,1);const c=new Ae({color:i}),h=new oe(l,c);h.position.y=.6*n;const u=new it(.6*n,6,4),d=new Ae({color:s}),p=new oe(u,d);p.position.set(1.2*n,.8*n,0);const g=new it(.15*n,4,3),y=new Ae({color:0}),v=new oe(g,y);v.position.set(1.6*n,.9*n,.3*n);const f=new oe(g,y);f.position.set(1.6*n,.9*n,-.3*n);const m=new it(.4*n,6,4),E=new Ae({color:r});for(let C=0;C<3;C++){const x=new oe(m,E);x.position.set(-.8*n-C*.6*n,.4*n,0),x.scale.set(.8-C*.1,.6,.8-C*.1),t.add(x)}const _=new hn(.05*n,.1*n,.8*n,4),T=new Ae({color:o});for(let C=0;C<4;C++){const x=new oe(_,T),R=C/4*Math.PI*2;x.position.set(Math.cos(R)*.6*n,.2*n,Math.sin(R)*.6*n),x.rotation.z=Math.cos(R)*.3,x.rotation.x=Math.sin(R)*.3,t.add(x)}return t.add(h),t.add(p),t.add(v),t.add(f),t}getRandomDirection(){const e=Math.random()*Math.PI*2;return new Y(Math.cos(e),Math.sin(e))}updateRotation(){if(this.direction.length()>0){const e=Math.atan2(this.direction.y,this.direction.x);this.model.rotation.z=e}}static getRandomEdgePosition(e){let n=Math.floor(Math.random()*4);if(e!==void 0){const r=[0,1,2,3].filter(o=>o!==e);n=r[Math.floor(Math.random()*r.length)]}let i,s;switch(n){case 0:i=(Math.random()-.5)*(500*2),s=500;break;case 1:i=(Math.random()-.5)*(500*2),s=-500;break;case 2:i=-500,s=(Math.random()-.5)*(500*2);break;case 3:i=500,s=(Math.random()-.5)*(500*2);break;default:i=0,s=500}return new w(i,s,0)}update(e,t,n,i){this.directionChangeTimer+=e,this.directionChangeTimer>=this.directionChangeInterval&&(this.direction=this.getRandomDirection(),this.directionChangeTimer=0,this.directionChangeInterval=4+Math.random()*3,this.updateRotation());const s=this.speed*e;let r=this.position.x+this.direction.x*s,o=this.position.y+this.direction.y*s;const l=new w(r,o,0),c=this.getRadius();let h=!1;for(const d of n){const p=new w(d.position.x,d.position.y+2,d.position.z);if(Math.sqrt(Math.pow(l.x-p.x,2)+Math.pow(l.y-p.y,2))<c+.8){h=!0;break}}if(!h){for(const d of i)if(Math.sqrt(Math.pow(l.x-d.position.x,2)+Math.pow(l.y-d.position.y,2))<c+1.5){h=!0;break}}if(h){this.direction.x*=-1,this.direction.y*=-1,this.direction.x+=(Math.random()-.5)*.5,this.direction.y+=(Math.random()-.5)*.5;const d=Math.sqrt(this.direction.x*this.direction.x+this.direction.y*this.direction.y);this.direction.x/=d,this.direction.y/=d,this.updateRotation();return}const u=10;(r<=t.minX+u||r>=t.maxX-u)&&(this.direction.x*=-1,r=Math.max(t.minX+u,Math.min(t.maxX-u,r))),(o<=t.minY+u||o>=t.maxY-u)&&(this.direction.y*=-1,o=Math.max(t.minY+u,Math.min(t.maxY-u,o))),this.position.set(r,o,0),this.model.position.copy(this.position),this.updateRotation()}getRadius(){return 2}}class c0 extends er{targetUnitType;morphTimer;morphDuration;isComplete=!1;constructor(e,t,n=3){const i={supply:0,costMinerals:0,costVespene:0,hitPoints:100,armor:0,damage:0,attackCooldown:0,attributes:["Biological"]};super(i,e,"Egg"),this.targetUnitType=t,this.morphDuration=n,this.morphTimer=0}createModel(){const e=new bt,t=2,n=new hn(2*t,2.2*t,.5*t,16),i=new Ae({color:4881466}),s=new oe(n,i);s.position.y=.25*t,s.rotation.x=Math.PI/2;const r=new it(1.5*t,16,12);r.scale(1,1.3,1);const o=new Ae({color:10048989}),l=new oe(r,o);l.position.y=2*t;for(let c=0;c<5;c++){const h=new it(.3*t,8,6),u=new Ae({color:7812010}),d=new oe(h,u),p=c/5*Math.PI*2,g=1.2*t;d.position.set(Math.cos(p)*g,1.5*t+Math.random()*t,Math.sin(p)*g),e.add(d)}return e.add(s),e.add(l),e}update(e){this.morphTimer+=e;const i=1+Math.sin(this.morphTimer*3)*.1;this.model.scale.set(i,i,i),this.morphTimer>=this.morphDuration&&(this.isComplete=!0)}isMorphComplete(){return this.isComplete}getTargetUnitType(){return this.targetUnitType}getMorphProgress(){return Math.min(this.morphTimer/this.morphDuration,1)}getRadius(){return 4}dispose(){super.dispose()}}class h0{callbacks;winCondition;availableUnits;constructor(e,t,n){e!==null&&t!==null?this.winCondition={type:e,target:t,current:0}:this.winCondition=null,this.availableUnits=n}setCallbacks(e){this.callbacks=e}getWinCondition(){return this.winCondition===null?{type:"none",target:0,current:0}:this.winCondition}isWinConditionMet(){return this.winCondition===null?!1:this.winCondition.current>=this.winCondition.target}getAvailableUnits(){return this.availableUnits}updateWinProgress(e){this.winCondition!==null&&(this.winCondition.current=e,this.isWinConditionMet()&&this.callbacks?.onWin&&this.callbacks.onWin())}}class u0{listener;backgroundMusic=null;eatSound=null;boneCrackSound=null;eggCrackSound=null;audioLoader;constructor(e){this.listener=new Gg,e.add(this.listener),this.audioLoader=new ec}loadBackgroundMusic(e,t=.15,n=!0){this.backgroundMusic=new Pi(this.listener),this.audioLoader.load(e,i=>{this.backgroundMusic&&(this.backgroundMusic.setBuffer(i),this.backgroundMusic.setLoop(n),this.backgroundMusic.setVolume(t),this.listener.context.state==="suspended"?(console.warn("AudioContext is suspended. Audio will start on user interaction."),this.resumeAudioContextOnInteraction()):(this.backgroundMusic.play(),console.log(`Background music loaded and playing: ${e} at ${t*100}% volume`)))},i=>{const s=i.loaded/i.total*100;console.log(`Loading audio: ${s.toFixed(0)}%`)},i=>{console.error("Error loading background music:",i)})}loadEatSound(e,t=.5){this.eatSound=new Pi(this.listener),this.audioLoader.load(e,n=>{this.eatSound&&(this.eatSound.setBuffer(n),this.eatSound.setLoop(!1),this.eatSound.setVolume(t),console.log(`Eat sound effect loaded at ${t*100}% volume`))},void 0,n=>{console.error("Error loading eat sound effect:",n)})}playEatSound(){this.eatSound&&this.eatSound.buffer&&(this.listener.context.state==="suspended"?this.listener.context.resume().then(()=>{this.eatSound&&!this.eatSound.isPlaying&&this.eatSound.play()}):(this.eatSound.isPlaying&&this.eatSound.stop(),this.eatSound.play()))}loadBoneCrackSound(e,t=.5){this.boneCrackSound=new Pi(this.listener),this.audioLoader.load(e,n=>{this.boneCrackSound&&(this.boneCrackSound.setBuffer(n),this.boneCrackSound.setLoop(!1),this.boneCrackSound.setVolume(t),console.log(`Bone crack sound effect loaded at ${t*100}% volume`))},void 0,n=>{console.error("Error loading bone crack sound effect:",n)})}playBoneCrackSound(){this.boneCrackSound&&this.boneCrackSound.buffer&&(this.listener.context.state==="suspended"?this.listener.context.resume().then(()=>{this.boneCrackSound&&!this.boneCrackSound.isPlaying&&this.boneCrackSound.play()}):(this.boneCrackSound.isPlaying&&this.boneCrackSound.stop(),this.boneCrackSound.play()))}loadEggCrackSound(e,t=.5){this.eggCrackSound=new Pi(this.listener),this.audioLoader.load(e,n=>{this.eggCrackSound&&(this.eggCrackSound.setBuffer(n),this.eggCrackSound.setLoop(!1),this.eggCrackSound.setVolume(t),console.log(`Egg crack sound effect loaded at ${t*100}% volume`))},void 0,n=>{console.error("Error loading egg crack sound effect:",n)})}playEggCrackSound(){this.eggCrackSound&&this.eggCrackSound.buffer&&(this.listener.context.state==="suspended"?this.listener.context.resume().then(()=>{this.eggCrackSound&&!this.eggCrackSound.isPlaying&&this.eggCrackSound.play()}):(this.eggCrackSound.isPlaying&&this.eggCrackSound.stop(),this.eggCrackSound.play()))}stopBackgroundMusic(){this.backgroundMusic&&this.backgroundMusic.isPlaying&&this.backgroundMusic.stop()}pauseBackgroundMusic(){this.backgroundMusic&&this.backgroundMusic.isPlaying&&this.backgroundMusic.pause()}resumeBackgroundMusic(){this.backgroundMusic&&!this.backgroundMusic.isPlaying&&this.backgroundMusic.play()}setVolume(e){this.backgroundMusic&&this.backgroundMusic.setVolume(Math.max(0,Math.min(1,e)))}resumeAudioContextOnInteraction(){const e=()=>{this.listener.context.state==="suspended"&&this.listener.context.resume().then(()=>{console.log("AudioContext resumed. Starting background music."),this.backgroundMusic&&!this.backgroundMusic.isPlaying&&this.backgroundMusic.play()})};document.addEventListener("click",e,{once:!0}),document.addEventListener("keydown",e,{once:!0})}dispose(){this.backgroundMusic&&(this.backgroundMusic.isPlaying&&this.backgroundMusic.stop(),this.backgroundMusic.disconnect(),this.backgroundMusic=null),this.eatSound&&(this.eatSound.isPlaying&&this.eatSound.stop(),this.eatSound.disconnect(),this.eatSound=null),this.boneCrackSound&&(this.boneCrackSound.isPlaying&&this.boneCrackSound.stop(),this.boneCrackSound.disconnect(),this.boneCrackSound=null),this.eggCrackSound&&(this.eggCrackSound.isPlaying&&this.eggCrackSound.stop(),this.eggCrackSound.disconnect(),this.eggCrackSound=null),this.listener.parent&&this.listener.parent.remove(this.listener),console.log("AudioManager disposed")}}class d0{activeFights=[];callbacks;playerUpgrades=null;constructor(e){this.callbacks=e}setPlayerUpgrades(e){this.playerUpgrades=e}checkCombatInitiation(e,t,n){if(e.getIsInCombat())return!1;const i=e.getPosition(),s=e.getRadius(),r=e.getUnitTypeName();for(const o of t){if(o.getIsInCombat()||!o.isAlive())continue;const l=o.getPosition(),c=o.getRadius(),h=o.getUnitTypeName(),u=Math.sqrt(Math.pow(i.x-l.x,2)+Math.pow(i.y-l.y,2)),d=s+c;if(u<d&&n(r,h))return this.startCombat(e,o),!0}return!1}startCombat(e,t){e.setIsInCombat(!0),t.setIsInCombat(!0),this.activeFights.push({player:e,enemy:t,isActive:!0}),console.log(`Combat started: ${e.getUnitTypeName()} vs ${t.getUnitTypeName()}`)}update(e){for(let t=this.activeFights.length-1;t>=0;t--){const n=this.activeFights[t];if(!n.isActive)continue;n.player.updateAttackTimer(e),n.enemy.updateAttackTimer(e);const i=n.player.getPosition(),s=n.enemy.getPosition(),r=Math.sqrt(Math.pow(i.x-s.x,2)+Math.pow(i.y-s.y,2)),o=n.player.getRadius()+n.enemy.getRadius()+2;if(r>o){this.endCombat(n),this.activeFights.splice(t,1);continue}if(n.player.canAttack()){const l=this.calculateRawDamage(n.player,!0),c=this.calculateTotalArmor(n.enemy,!1);if(n.enemy.takeDamage(l,c),n.player.resetAttackTimer(),this.callbacks.onDamageDealt(n.player,n.enemy,l),!n.enemy.isAlive()){const h={minerals:n.enemy.getCostMinerals(),gas:n.enemy.getCostVespene(),essence:n.enemy.getUnitTypeName()==="Larvae"?0:1};this.callbacks.onEnemyDeath(n.enemy,h),this.endCombat(n),this.activeFights.splice(t,1);continue}}if(n.enemy.canAttack()){const l=this.calculateRawDamage(n.enemy,!1),c=this.calculateTotalArmor(n.player,!0);if(n.player.takeDamage(l,c),n.enemy.resetAttackTimer(),this.callbacks.onDamageDealt(n.enemy,n.player,l),!n.player.isAlive()){this.callbacks.onPlayerDeath(),this.endCombat(n),this.activeFights.splice(t,1);continue}}}}calculateRawDamage(e,t){const n=e.getDamage(),i=t?this.playerUpgrades?.getAttackBonus()??0:e.getAttackUpgrade();return n+i}calculateTotalArmor(e,t){const n=e.getArmor(),i=t?this.playerUpgrades?.getArmorBonus()??0:e.getArmorUpgrade();return n+i}endCombat(e){e.player.setIsInCombat(!1),e.enemy.setIsInCombat(!1),e.isActive=!1,console.log(`Combat ended: ${e.player.getUnitTypeName()} vs ${e.enemy.getUnitTypeName()}`)}getActiveFights(){return this.activeFights.filter(e=>e.isActive)}clearAll(){for(const e of this.activeFights)this.endCombat(e);this.activeFights=[]}}class p0{scene;camera;damageNumbers;constructor(e,t){this.scene=e,this.camera=t,this.damageNumbers=[]}createDamageNumber(e,t){const n=document.createElement("canvas"),i=n.getContext("2d");if(!i)return;n.width=128,n.height=64,i.fillStyle="#FF0000",i.font="Bold 48px Arial",i.textAlign="center",i.textBaseline="middle",i.fillText(`-${t}`,64,32);const s=new Ui(n),r=new si({map:s}),o=new nn(r);o.position.copy(e),o.position.y+=2,o.scale.set(4,2,1),this.scene.add(o),this.damageNumbers.push({sprite:o,lifetime:1,velocity:new w(0,10,0)})}update(e){for(let t=this.damageNumbers.length-1;t>=0;t--){const n=this.damageNumbers[t];n.sprite.position.add(n.velocity.clone().multiplyScalar(e)),n.lifetime-=e;const i=n.sprite.material;i.opacity=Math.max(0,n.lifetime),n.lifetime<=0&&(this.scene.remove(n.sprite),i.map?.dispose(),i.dispose(),this.damageNumbers.splice(t,1))}}createHitFlash(e){const t=e.getModel(),n=new Map;t.traverse(i=>{i instanceof oe&&i.material instanceof Ae&&(n.set(i,i.material.color.getHex()),i.material.color.setHex(16777215))}),setTimeout(()=>{n.forEach((i,s)=>{s.material instanceof Ae&&s.material.color.setHex(i)})},100)}dispose(){this.damageNumbers.forEach(e=>{this.scene.remove(e.sprite);const t=e.sprite.material;t.map?.dispose(),t.dispose()}),this.damageNumbers=[]}}class f0{model;position;smokeParticles=[];particleUpdateTime=0;constructor(e){this.position=e.clone(),this.model=this.createModel(),this.model.position.copy(this.position)}createModel(){const e=new bt,t=new js(2,3,8),n=new Ae({color:4868682}),i=new oe(t,n);i.position.y=1.5,i.rotation.x=Math.PI/2;const s=new da(1.2,8),r=new Ae({color:65416,transparent:!0,opacity:.6}),o=new oe(s,r);o.position.y=1.5,o.position.z=1.6;for(let l=0;l<3;l++){const c=this.createSmokeParticle(l);this.smokeParticles.push(c),e.add(c)}return e.add(i),e.add(o),e.userData.isVespeneGeyser=!0,e}createSmokeParticle(e){const t=.8+Math.random()*.4,n=new ft(t,t),i=new Ae({color:11184810,transparent:!0,opacity:.3+Math.random()*.2}),s=new oe(n,i);return s.position.y=2+e*1.5,s.position.x=(Math.random()-.5)*.5,s.position.z=3+e*.5,s.userData.offsetY=e*1.5,s.userData.offsetX=(Math.random()-.5)*.5,s.userData.phase=Math.random()*Math.PI*2,s}update(e){this.particleUpdateTime+=e;for(const t of this.smokeParticles){t.userData.phase+=e*2;const n=2+t.userData.offsetY+this.particleUpdateTime*2;t.position.y=n%6+2,t.position.x=t.userData.offsetX+Math.sin(t.userData.phase)*.3;const i=t.material,s=(t.position.y-2)/6;i.opacity=.5*(1-s)}}getModel(){return this.model}getPosition(){return this.position.clone()}getRadius(){return 2}dispose(){for(const e of this.smokeParticles)e.geometry.dispose(),e.material.dispose();this.smokeParticles=[],this.model.traverse(e=>{e instanceof oe&&(e.geometry&&e.geometry.dispose(),e.material&&(Array.isArray(e.material)?e.material.forEach(t=>t.dispose()):e.material.dispose()))})}}class m0{callbacks;extractionStates=new Map;EXTRACTION_INTERVAL=1;DAMAGE_PER_SECOND=5;GAS_PER_SECOND=10;EXTRACTION_RADIUS=7.5;constructor(e){this.callbacks=e}update(e,t,n){const i=t.getPosition();let s=!1,r=-1;for(let o=0;o<n.length;o++){const c=n[o].getPosition();if(Math.sqrt(Math.pow(i.x-c.x,2)+Math.pow(i.y-c.y,2))<this.EXTRACTION_RADIUS){s=!0,r=o;break}}if(s){let o=this.extractionStates.get(t);if(o||(o={geyserIndex:r,timer:0},this.extractionStates.set(t,o)),o.timer+=e,o.timer>=this.EXTRACTION_INTERVAL){if(o.timer-=this.EXTRACTION_INTERVAL,this.callbacks.onDamage(t,this.DAMAGE_PER_SECOND),this.callbacks.onVisualFeedback&&this.callbacks.onVisualFeedback(t),!t.isAlive()){this.callbacks.onUnitDeath(t),this.extractionStates.delete(t);return}this.callbacks.onGasGained(t,this.GAS_PER_SECOND)}}else this.extractionStates.delete(t)}clearUnit(e){this.extractionStates.delete(e)}clearAll(){this.extractionStates.clear()}}class g0{container;callbacks;attackButton;armorButton;healButton;absorbButton;isExpanded=!1;contentContainer;collapseIndicator;constructor(e){this.callbacks=e,this.container=this.createPanel()}createPanel(){const e=document.createElement("div");e.className="spending-section";const t=document.createElement("div");t.className="spending-header",t.addEventListener("click",()=>this.toggleCollapse()),this.collapseIndicator=document.createElement("span"),this.collapseIndicator.className="collapse-indicator",this.collapseIndicator.textContent="▶";const n=document.createElement("span");return n.className="control-label",n.textContent="Spending",t.appendChild(this.collapseIndicator),t.appendChild(n),e.appendChild(t),this.contentContainer=document.createElement("div"),this.contentContainer.className="spending-content collapsed",this.attackButton=this.createButton("⚔️","ATK",()=>this.callbacks.onUpgradeAttack()),this.contentContainer.appendChild(this.attackButton),this.armorButton=this.createButton("🛡️","ARM",()=>this.callbacks.onUpgradeArmor()),this.contentContainer.appendChild(this.armorButton),this.healButton=this.createButton("❤️","HEAL",()=>this.callbacks.onSpendHealth()),this.contentContainer.appendChild(this.healButton),this.absorbButton=this.createButton("⚡","ABSORB",()=>this.callbacks.onPurchaseAbsorb()),this.contentContainer.appendChild(this.absorbButton),e.appendChild(this.contentContainer),e}toggleCollapse(){this.isExpanded=!this.isExpanded,this.isExpanded?(this.contentContainer.classList.remove("collapsed"),this.collapseIndicator.textContent="▼"):(this.contentContainer.classList.add("collapsed"),this.collapseIndicator.textContent="▶")}createButton(e,t,n){const i=document.createElement("button");i.className="upgrade-button";const s=document.createElement("span");s.className="upgrade-icon",s.textContent=e;const r=document.createElement("span");r.className="upgrade-label",r.textContent=t;const o=document.createElement("span");return o.className="upgrade-cost",o.textContent="0M / 0G",i.appendChild(s),i.appendChild(r),i.appendChild(o),i.addEventListener("click",n),i}updateButtons(e,t,n,i,s,r,o){const l=i.getAttackUpgradeCost(),c=i.getAttackLevel();this.updateButton(this.attackButton,`+${c+1} ATK`,l.minerals,l.gas,e>=l.minerals&&t>=l.gas);const h=i.getArmorUpgradeCost(),u=i.getArmorLevel();this.updateButton(this.armorButton,`+${u+1} ARM`,h.minerals,h.gas,e>=h.minerals&&t>=h.gas);const d=r-s,p=d>0&&e>=1;this.updateButton(this.healButton,d>0?"HEAL":"FULL HP",1,0,p,`${s}/${r} HP`);const g=1,y=10,v=n>=g;this.updateButton(this.absorbButton,`+${y} ABSORB`,0,0,v,`${o} shield | ${g}🐚`)}updateButton(e,t,n,i,s,r){const o=e.querySelector(".upgrade-label"),l=e.querySelector(".upgrade-cost");o.textContent=t,r?l.textContent=r:l.textContent=`${n}M / ${i}G`,e.disabled=!s}getContainer(){return this.container}dispose(){this.container.parentNode&&this.container.parentNode.removeChild(this.container)}}class y0{overlayElement=null;pauseCallback;resumeCallback;escHandler=null;constructor(e,t){this.pauseCallback=e,this.resumeCallback=t}show(e){if(this.overlayElement){console.warn("MessageSystem: Already showing a message");return}this.pauseCallback(),this.overlayElement=document.createElement("div"),this.overlayElement.className="message-overlay",this.overlayElement.setAttribute("data-type",e.type),e.customClass&&this.overlayElement.classList.add(e.customClass);const t=document.createElement("div");t.className="message-content";const n=document.createElement("h1");n.className="message-title",n.textContent=e.title,t.appendChild(n);const i=document.createElement("div");if(i.className="message-body",typeof e.content=="string"?i.textContent=e.content:i.appendChild(e.content),t.appendChild(i),e.buttons&&e.buttons.length>0){const s=document.createElement("div");s.className="message-buttons",e.buttons.forEach(r=>{const o=document.createElement("button");o.className=`message-button ${r.style||"primary"}`,o.textContent=r.label,o.addEventListener("click",()=>{r.onClick(),this.hide()}),s.appendChild(o)}),t.appendChild(s)}if(e.dismissOnEsc){const s=document.createElement("div");s.className="message-esc-hint",s.textContent="Press ESC to close",t.appendChild(s)}this.overlayElement.appendChild(t),document.body.appendChild(this.overlayElement),e.dismissOnEsc&&(this.escHandler=s=>{s.key==="Escape"&&(e.dismissCallback&&e.dismissCallback(),this.hide())},window.addEventListener("keydown",this.escHandler))}hide(){this.overlayElement&&this.overlayElement.parentElement&&(document.body.removeChild(this.overlayElement),this.overlayElement=null),this.escHandler&&(window.removeEventListener("keydown",this.escHandler),this.escHandler=null),this.resumeCallback()}isVisible(){return this.overlayElement!==null}dispose(){this.hide()}}class v0{quests=new Map;eventListeners=new Map;addQuest(e){this.quests.set(e.id,e),console.log(`Quest added: ${e.id} - ${e.title}`)}activateQuest(e){const t=this.quests.get(e);if(!t){console.error(`Quest not found: ${e}`);return}if(t.isActive){console.warn(`Quest already active: ${e}`);return}t.isActive=!0,this.emit("quest_activated",t),console.log(`Quest activated: ${t.title}`)}completeQuest(e){const t=this.quests.get(e);if(!(!t||t.isCompleted)){if(t.isCompleted=!0,t.rewards){const n={questId:t.id,questTitle:t.title,rewards:t.rewards};this.emit("quest_rewards_granted",n)}this.emit("quest_completed",t),console.log(`Quest completed: ${t.title}`)}}updateKillObjective(e,t){const n=this.quests.get(e);if(!n||!n.isActive||n.isCompleted)return;let i=!1;n.objectives.forEach((s,r)=>{s.type==="kill"&&s.unitType===t&&s.current<s.target&&(s.current++,s.isCompleted=s.current>=s.target,i=!0,this.emit("objective_updated",{questId:e,objectiveIndex:r,objective:s}))}),i&&this.checkQuestCompletion(e)}updateKillBossObjective(e,t){const n=this.quests.get(e);if(!n||!n.isActive||n.isCompleted)return;let i=!1;n.objectives.forEach((s,r)=>{s.type==="kill_boss"&&s.bossId===t&&s.current<s.target&&(s.current++,s.isCompleted=s.current>=s.target,i=!0,this.emit("objective_updated",{questId:e,objectiveIndex:r,objective:s}))}),i&&this.checkQuestCompletion(e)}updateGatherObjective(e,t,n){const i=this.quests.get(e);if(!i||!i.isActive||i.isCompleted)return;let s=!1;i.objectives.forEach((r,o)=>{if(r.type==="gather"&&r.resource===t){const l=Math.min(r.current+n,r.target);l>r.current&&(r.current=l,r.isCompleted=r.current>=r.target,s=!0,this.emit("objective_updated",{questId:e,objectiveIndex:o,objective:r}))}}),s&&this.checkQuestCompletion(e)}checkQuestCompletion(e){const t=this.quests.get(e);if(!t||!t.isActive||t.isCompleted)return;t.objectives.every(i=>i.isCompleted)&&this.completeQuest(e)}getActiveQuests(){const e=[];return this.quests.forEach(t=>{t.isActive&&!t.isCompleted&&e.push(t)}),e}getQuest(e){return this.quests.get(e)||null}isQuestCompleted(e){const t=this.quests.get(e);return t?t.isCompleted:!1}on(e,t){this.eventListeners.has(e)||this.eventListeners.set(e,[]),this.eventListeners.get(e).push(t)}emit(e,t){const n=this.eventListeners.get(e);n&&n.forEach(i=>i(t))}dispose(){this.quests.clear(),this.eventListeners.clear()}}class x0{questGivers=new Map;registerQuestGiver(e,t,n,i=!1){const s={entityId:e,entityType:t,questId:n,isPeaceful:i,peacePersistent:i};this.questGivers.set(e,s),console.log(`Quest giver registered: ${e} (${t}) -> Quest: ${n}`)}isQuestGiver(e){return this.questGivers.has(e)}getQuestForEntity(e){const t=this.questGivers.get(e);return t?t.questId:null}isPeaceful(e){const t=this.questGivers.get(e);return t?t.isPeaceful:!1}setPeaceFlag(e,t){const n=this.questGivers.get(e);n&&(n.isPeaceful=t,console.log(`Peace flag set for ${e}: ${t}`))}getEntityId(e){for(const[t,n]of this.questGivers.entries())if(n.questId===e)return t;return null}unregisterQuestGiver(e){this.questGivers.delete(e),console.log(`Quest giver unregistered: ${e}`)}getAllQuestGivers(){return Array.from(this.questGivers.values())}dispose(){this.questGivers.clear()}}class _0{questManager;questGiverManager;constructor(e,t){this.questManager=e,this.questGiverManager=t}checkQuestGiverCollision(e,t,n,i,s){if(!this.questGiverManager.isQuestGiver(n))return null;if(e.distanceTo(i)<t+s){const o=this.questGiverManager.getQuestForEntity(n);if(!o)return null;const l=this.questManager.getQuest(o);if(l&&!l.isActive&&!l.isCompleted)return this.questGiverManager.getAllQuestGivers().find(c=>c.entityId===n)||null}return null}canAttack(e){return!this.questGiverManager.isPeaceful(e)}onEnemyKilled(e){const t=this.questManager.getActiveQuests();for(const n of t)this.questManager.updateKillObjective(n.id,e)}onBossKilled(e){const t=this.questManager.getActiveQuests();for(const n of t)this.questManager.updateKillBossObjective(n.id,e)}onResourceGathered(e,t){const n=this.questManager.getActiveQuests();for(const i of n)this.questManager.updateGatherObjective(i.id,e,t)}dispose(){}}class M0{container=null;questManager;isMinimized=!1;isVisible=!1;constructor(e){this.questManager=e,this.createHUD(),this.setupEventListeners()}createHUD(){this.container=document.createElement("div"),this.container.className="quest-tracker-hud",this.container.style.display="none",document.body.appendChild(this.container)}setupEventListeners(){this.questManager.on("quest_activated",()=>{this.refresh()}),this.questManager.on("objective_updated",()=>{this.refresh()}),this.questManager.on("quest_completed",()=>{this.refresh()})}refresh(){if(!this.container)return;const e=this.questManager.getActiveQuests();if(e.length===0){this.hide();return}this.isVisible||this.show(),this.container.innerHTML="";const t=document.createElement("div");t.className="quest-tracker-header";const n=document.createElement("span");n.textContent="Active Quests ('J' to expand)",n.className="quest-tracker-title",t.appendChild(n);const i=document.createElement("button");if(i.className="quest-tracker-toggle",i.textContent=this.isMinimized?"+":"−",i.addEventListener("click",()=>this.toggleMinimize()),t.appendChild(i),this.container.appendChild(t),this.isMinimized)return;const s=document.createElement("div");if(s.className="quest-tracker-content",e.some(o=>o.objectives.some(l=>!l.isCompleted)))e.forEach(o=>{const l=o.objectives.filter(u=>!u.isCompleted);if(l.length===0)return;const c=document.createElement("div");c.className="quest-tracker-quest-group";const h=document.createElement("div");h.className="quest-tracker-quest-title",h.textContent=o.title,c.appendChild(h),l.forEach(u=>{const d=document.createElement("div");d.className="quest-tracker-item";const p=document.createElement("span");p.className="quest-tracker-objective-text",p.textContent=`• ${u.description}: ${u.current}/${u.target}`;const g=u.current/u.target;g>=1?p.style.color="#00ff00":g>0?p.style.color="#ffff00":p.style.color="#cccccc",d.appendChild(p),c.appendChild(d)}),s.appendChild(c)});else{const o=document.createElement("div");o.className="quest-tracker-empty",o.textContent="All objectives complete!",s.appendChild(o)}this.container.appendChild(s)}toggleMinimize(){this.isMinimized=!this.isMinimized,this.refresh()}show(){this.container&&(this.container.style.display="block",this.isVisible=!0)}hide(){this.container&&(this.container.style.display="none",this.isVisible=!1)}isShowing(){return this.isVisible}update(){this.refresh()}dispose(){this.container&&this.container.parentElement&&(document.body.removeChild(this.container),this.container=null)}}function b0(a){const e=document.createElement("div");e.className="quest-detail-container";const t=document.createElement("p");t.className="quest-description",t.textContent=a.description,e.appendChild(t);const n=document.createElement("h3");n.textContent="Objectives:",e.appendChild(n);const i=document.createElement("ul");if(i.className="quest-objectives-list",a.objectives.forEach(s=>{const r=document.createElement("li");r.textContent=`• ${s.description} (0/${s.target})`,i.appendChild(r)}),e.appendChild(i),a.rewards){const s=document.createElement("h3");s.textContent="Rewards:",e.appendChild(s);const r=document.createElement("ul");if(r.className="quest-rewards-list",a.rewards.minerals){const o=document.createElement("li");o.innerHTML=`• <span class="resource-icon minerals-icon">💎</span> ${a.rewards.minerals} Minerals`,r.appendChild(o)}if(a.rewards.gas){const o=document.createElement("li");o.innerHTML=`• <span class="resource-icon gas-icon">💨</span> ${a.rewards.gas} Vespene Gas`,r.appendChild(o)}if(a.rewards.essence){const o=document.createElement("li");o.innerHTML=`• <span class="resource-icon essence-icon">✨</span> ${a.rewards.essence} Essence`,r.appendChild(o)}if(a.rewards.attackBonus){const o=document.createElement("li");o.innerHTML=`• ⚔️ +${a.rewards.attackBonus} Attack`,r.appendChild(o)}if(a.rewards.armorBonus){const o=document.createElement("li");o.innerHTML=`• 🛡️ +${a.rewards.armorBonus} Armor`,r.appendChild(o)}if(a.rewards.attackSpeedBonus){const o=document.createElement("li");o.innerHTML=`• ⚡ +${a.rewards.attackSpeedBonus}% Attack Speed`,r.appendChild(o)}e.appendChild(r)}return e}function Gr(a,e,t){const n=b0(a);e.show({type:"info",title:a.title,content:n,dismissOnEsc:!0,dismissCallback:()=>{t.activateQuest(a.id)},customClass:"quest-detail-screen"})}function w0(a,e){const t=document.createElement("div");t.className="progress-bar-container";const n=document.createElement("div");n.className="progress-bar-fill";const i=Math.min(a/e*100,100);return n.style.width=`${i}%`,i===100?n.style.backgroundColor="#00ff00":i>0?n.style.backgroundColor="#ffff00":n.style.backgroundColor="#888888",t.appendChild(n),t}function S0(a){const e=document.createElement("div");if(e.className="quest-log-container",a.length===0){const t=document.createElement("p");return t.className="quest-log-empty",t.textContent="No active quests",e.appendChild(t),e}return a.forEach(t=>{const n=document.createElement("div");n.className="quest-log-item";const i=document.createElement("h3");if(i.textContent=t.title,n.appendChild(i),t.objectives.forEach(s=>{const r=document.createElement("div");r.className="quest-objective";const o=document.createElement("span");o.textContent=`→ ${s.description}: ${s.current}/${s.target}`,s.isCompleted?o.style.color="#00ff00":s.current>0?o.style.color="#ffff00":o.style.color="#888888",r.appendChild(o);const l=w0(s.current,s.target);r.appendChild(l),n.appendChild(r)}),t.rewards){const s=document.createElement("div");s.className="quest-log-rewards";const r=[];t.rewards.minerals&&r.push(`${t.rewards.minerals}M`),t.rewards.gas&&r.push(`${t.rewards.gas}G`),t.rewards.essence&&r.push(`${t.rewards.essence}E`),t.rewards.attackBonus&&r.push(`+${t.rewards.attackBonus} ATK`),t.rewards.armorBonus&&r.push(`+${t.rewards.armorBonus} ARM`),t.rewards.attackSpeedBonus&&r.push(`+${t.rewards.attackSpeedBonus}% AS`),s.innerHTML=`💰 Rewards: ${r.join(", ")}`,n.appendChild(s)}e.appendChild(n)}),e}function E0(a,e){const t=a.getActiveQuests(),n=S0(t);e.show({type:"log",title:"QUEST LOG",content:n,dismissOnEsc:!0,customClass:"quest-log-screen"})}class en{container=null;colorInterval=null;removalTimeout=null;currentColorIndex=0;static COLORS=["#F9D171","#A8DADC","#52B788","#5390D9"];static DISPLAY_DURATION=5e3;static COLOR_CHANGE_INTERVAL=1250;static show(e,t){new en().display(e,t)}formatRewards(e){if(!e)return"None";const t=[];return e.minerals&&t.push(`💎 ${e.minerals} Minerals`),e.gas&&t.push(`💨 ${e.gas} Gas`),e.essence&&t.push(`✨ ${e.essence} Essence`),e.attackBonus&&t.push(`⚔️ +${e.attackBonus} Attack`),e.armorBonus&&t.push(`🛡️ +${e.armorBonus} Armor`),e.attackSpeedBonus&&t.push(`⚡ +${e.attackSpeedBonus}% Speed`),t.length>0?t.join(", "):"None"}display(e,t){this.container=document.createElement("div"),this.container.className="quest-completion-notification";const n=document.createElement("div");n.className="quest-completion-title",n.textContent=`Quest Completed: ${e}`,this.container.appendChild(n);const i=document.createElement("div");i.className="quest-completion-rewards",i.textContent=`Your reward: ${this.formatRewards(t)}`,this.container.appendChild(i),document.body.appendChild(this.container),this.container.style.backgroundColor=en.COLORS[0],this.startColorAnimation(),this.removalTimeout=window.setTimeout(()=>{this.dispose()},en.DISPLAY_DURATION)}startColorAnimation(){this.container&&(this.colorInterval=window.setInterval(()=>{this.currentColorIndex++,this.currentColorIndex<en.COLORS.length&&this.container&&(this.container.style.backgroundColor=en.COLORS[this.currentColorIndex])},en.COLOR_CHANGE_INTERVAL))}dispose(){this.colorInterval!==null&&(clearInterval(this.colorInterval),this.colorInterval=null),this.removalTimeout!==null&&(clearTimeout(this.removalTimeout),this.removalTimeout=null),this.container&&(this.container.classList.add("quest-completion-notification--fadeout"),setTimeout(()=>{this.container&&this.container.parentElement&&(document.body.removeChild(this.container),this.container=null)},300))}}const Or={tutorial_hunt1:{id:"tutorial_hunt1",title:"First Evolution (Tutorial)",description:"You must Gather resources and evolve. Gather 25 minerals to evolve into a Zergling and prey on 3 larvae. It will also harden your jaws. (+1 dmg, +100 minerals)",objectives:[{type:"kill",description:"Eat 3 Larvae",current:0,target:3,isCompleted:!1,unitType:"Larvae"},{type:"gather",description:"Collect 25 minerals",resource:"minerals",current:0,target:25,isCompleted:!1}],rewards:{minerals:100,attackBonus:1},isActive:!1,isCompleted:!1},tutorial_hunt2:{id:"tutorial_hunt2",title:"Eating Trees  (Tutorial)",description:"Trees provide much more minerals than bushes, but only a Drone can harvest them. You should try it! Collect 300 mineral, it will be so faster from trees as a Drone. ( +200 minerals)",objectives:[{type:"gather",description:"Collect 300 minerals",resource:"minerals",current:0,target:300,isCompleted:!1}],rewards:{minerals:200},isActive:!1,isCompleted:!1},tutorial_hunt3:{id:"tutorial_hunt3",title:"Harvesting Gas (Tutorial)",description:"Standing on Vespene Geysers you will collect Gas per second but also lose life. Evolve and gather 300 Gas, so you can evolve your claws and carapace. DON'T forget to HEAL (Expand Spending Panel, cost minerals) yourself while gathering gas! (+200 gas)",objectives:[{type:"gather",description:"Collect 300 gas",resource:"gas",current:0,target:300,isCompleted:!1}],rewards:{gas:200},isActive:!1,isCompleted:!1}},T0="/assets/Jungle-CtmEGoGc.mp3",C0="/assets/eat%20fruit-Dq7ErjQY.mp3",A0="/assets/Bone%20crack-AdBuIRKS.mp3",L0="/assets/Egg%20cracking-Cyf3AwDi.mp3";class R0 extends h0{renderer;scene;camera;clock;stats;ground;trees=[];bushes=[];vespeneGeysers=[];playerUnit;minimap;controlPanel;gameTitle;enemies=[];enemyInteraction;gameOverUI;victoryUI;morphingEgg=null;combatRules;combatManager;combatVisuals;unitVisuals;vespeneExtraction;spendingPanel;evolutionsPanel;hasWon=!1;oldUnitRadius=0;audioManager;minibossKills=0;messageSystem;questManager;questGiverManager;questInteraction;questTrackerHUD;nearestBushToOrigin=null;questBushSprite=null;nearestTreeToOrigin=null;questTreeSprite=null;nearestGeyserToOrigin=null;questGeyserSprite=null;movement={left:!1,right:!1,up:!1,down:!1,speed:50};cameraBounds={minX:-480,maxX:480,minY:-480,maxY:480};animationFrameId=null;keydownHandler;keyupHandler;resizeHandler;constructor(e){super("miniboss_kills",1,["Larvae","Drone","Zergling"]),this.combatRules=new sc,this.setCallbacks(e),this.init()}initCombatSystem(){const e={onEnemyDeath:(t,n)=>{console.log(`Enemy ${t.getUnitTypeName()} defeated! Reward: ${n.minerals}M ${n.gas}G ${n.essence}E`),this.questInteraction.onEnemyKilled(t.getUnitTypeName());const i=this.playerUnit.getMinerals(),s=this.playerUnit.getGas(),r=this.playerUnit.getEssence();this.playerUnit.setMinerals(i+n.minerals),this.playerUnit.setGas(s+n.gas),this.playerUnit.setEssence(r+n.essence),n.essence>0&&this.questInteraction.onResourceGathered("essence",n.essence),n.essence>0&&console.log(`Gained ${n.essence} essence from consuming ${t.getUnitTypeName()}!`),this.unitVisuals.untrackUnit(t),this.scene.remove(t.getModel()),t.dispose();const o=this.enemies.indexOf(t);o>-1&&this.enemies.splice(o,1),t.getSizeMultiplier()>1&&(this.minibossKills++,console.log(`Miniboss defeated! Total: ${this.minibossKills}`),this.updateWinProgress(this.minibossKills)),this.audioManager.playBoneCrackSound()},onPlayerDeath:()=>{console.log("Player died in combat!"),this.handleGameOver()},onDamageDealt:(t,n,i)=>{this.combatVisuals.createDamageNumber(n.getPosition(),i),this.combatVisuals.createHitFlash(n)}};this.combatManager=new d0(e),this.combatVisuals=new p0(this.scene,this.camera),this.combatManager.setPlayerUpgrades(this.playerUnit.getUpgrades())}initVespeneExtractionSystem(){const e={onDamage:(t,n)=>{t.takeDamage(n),this.combatVisuals.createDamageNumber(t.getPosition(),n)},onGasGained:(t,n)=>{if(t===this.playerUnit.getCurrentUnit()){const i=this.playerUnit.getGas();this.playerUnit.setGas(i+n),this.questInteraction.onResourceGathered("gas",n)}},onUnitDeath:t=>{t===this.playerUnit.getCurrentUnit()&&(console.log("Player died from vespene geyser damage!"),this.handleGameOver())},onVisualFeedback:t=>{this.combatVisuals.createHitFlash(t)}};this.vespeneExtraction=new m0(e)}initQuestSystem(){this.messageSystem=new y0(()=>{this.animationFrameId&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=null)},()=>{this.animate()}),this.questManager=new v0,this.questGiverManager=new x0,this.questInteraction=new _0(this.questManager,this.questGiverManager),this.questTrackerHUD=new M0(this.questManager),this.questManager.on("quest_completed",e=>{console.log(`Quest completed: ${e.title}`);const t=e.completionUI||"notification";(t==="notification"||t==="both")&&en.show(e.title,e.rewards)}),this.questManager.on("quest_rewards_granted",e=>{if(console.log(`Quest rewards granted: ${e.questTitle}`,e.rewards),e.rewards.minerals){const i=this.playerUnit.getMinerals();this.playerUnit.setMinerals(i+e.rewards.minerals)}if(e.rewards.gas){const i=this.playerUnit.getGas();this.playerUnit.setGas(i+e.rewards.gas)}if(e.rewards.essence){const i=this.playerUnit.getEssence();this.playerUnit.setEssence(i+e.rewards.essence)}const n=this.questManager.getQuest(e.questId)?.completionUI||"notification";(n==="message"||n==="both")&&this.messageSystem.show({type:"success",title:"QUEST COMPLETE!",content:`${e.questTitle}

Rewards granted!`,buttons:[{label:"OK",onClick:()=>{},style:"primary"}]})}),this.setupExampleQuests()}setupExampleQuests(){const e=Or.tutorial_hunt1;if(this.questManager.addQuest(e),this.nearestBushToOrigin){const i=this.nearestBushToOrigin,s="quest_bush_tutorial";i.userData.questGiverId=s,this.questGiverManager.registerQuestGiver(s,"obstacle","tutorial_hunt1",!1),console.log("Tutorial quest registered with nearest bush to origin"),this.questBushSprite=this.createQuestIconSprite(),i.add(this.questBushSprite)}const t=Or.tutorial_hunt2;if(this.questManager.addQuest(t),this.nearestTreeToOrigin){const i=this.nearestTreeToOrigin,s="quest_tree_tutorial";i.userData.questGiverId=s,this.questGiverManager.registerQuestGiver(s,"obstacle","tutorial_hunt2",!1),console.log("Tree quest registered with nearest tree to origin"),this.questTreeSprite=this.createQuestIconSprite(),i.add(this.questTreeSprite),this.questTreeSprite.position.y=9}const n=Or.tutorial_hunt3;if(this.questManager.addQuest(n),this.nearestGeyserToOrigin){const i=this.nearestGeyserToOrigin,s="quest_geyser_tutorial";i.getModel().userData.questGiverId=s,this.questGiverManager.registerQuestGiver(s,"obstacle","tutorial_hunt3",!1),console.log("Geyser quest registered with nearest geyser to origin"),this.questGeyserSprite=this.createQuestIconSprite(),i.getModel().add(this.questGeyserSprite)}}createQuestIconSprite(){const t=new Yl().load("resources/Q_Large.png"),n=new nn(new si({map:t,transparent:!0}));n.position.set(0,4,1);const s=32/this.camera.zoom;return n.scale.set(s,s,1),n}init(){this.initScene(),this.initStats(),this.initListeners(),this.setupGameTitle(),this.setupControlPanel(),this.setupSpendingPanel(),this.setupEvolutionsPanel(),this.setupEnemySystem(),this.initCombatSystem(),this.initVespeneExtractionSystem(),this.initQuestSystem(),this.animate(),this.initAudio()}initStats(){this.stats=new ki,this.stats.dom.style.position="fixed",this.stats.dom.style.bottom="0px",this.stats.dom.style.right="0px",this.stats.dom.style.top="auto",this.stats.dom.style.left="auto",document.body.appendChild(this.stats.dom)}initAudio(){this.audioManager=new u0(this.camera),this.audioManager.loadBackgroundMusic(T0,.15,!0),this.audioManager.loadEatSound(C0,.3),this.audioManager.loadBoneCrackSound(A0,.25),this.audioManager.loadEggCrackSound(L0,.5)}initScene(){this.scene=new $s,this.scene.background=new de(8900331),this.clock=new tc,this.camera=new Zi(window.innerWidth/-2,window.innerWidth/2,window.innerHeight/2,window.innerHeight/-2,1,1e3),this.camera.position.z=10,this.camera.zoom=8,this.camera.updateProjectionMatrix(),this.renderer=new Fe,this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(this.renderer.domElement);const e=new Jl(16777215,.8);this.scene.add(e),this.unitVisuals=new Os(this.scene,this.camera),this.createJungleEnvironment(),this.createPlayerUnit(),this.unitVisuals.setPlayerUnit(this.playerUnit),this.minimap=new i0(this.scene,this.playerUnit),this.minimap.updateObjects(this.trees,this.bushes,this.vespeneGeysers)}createJungleEnvironment(){const e=new ft(1e3,1e3),t=new Ae({color:2263842});this.ground=new oe(e,t),this.ground.position.z=-1,this.scene.add(this.ground);for(let r=0;r<200;r++){let o,l;do o=(Math.random()-.5)*940,l=(Math.random()-.5)*940;while(Math.sqrt(o*o+l*l)<10);this.createTree(o,l)}let n=1/0;for(const r of this.trees){const o=Math.sqrt(r.position.x**2+r.position.y**2);o<n&&(n=o,this.nearestTreeToOrigin=r)}for(let r=0;r<520;r++){let o,l;do o=(Math.random()-.5)*940,l=(Math.random()-.5)*940;while(Math.sqrt(o*o+l*l)<10);this.createBush(o,l)}let i=1/0;for(const r of this.bushes){const o=Math.sqrt(r.position.x**2+r.position.y**2);o<i&&(i=o,this.nearestBushToOrigin=r)}for(let r=0;r<50;r++){let o,l;do o=(Math.random()-.5)*940,l=(Math.random()-.5)*940;while(Math.sqrt(o*o+l*l)<10);this.createVespeneGeyser(o,l)}let s=1/0;for(const r of this.vespeneGeysers){const o=r.getPosition(),l=Math.sqrt(o.x**2+o.y**2);l<s&&(s=l,this.nearestGeyserToOrigin=r)}}createTree(e,t){const n=new bt,i=new hn(.5,.8,4,8),s=new Ae({color:9127187}),r=new oe(i,s);r.position.y=2,r.rotation.x=Math.PI/2;const o=new it(3,8,6),l=new Ae({color:25600}),c=new oe(o,l);c.position.y=4.5,n.add(r),n.add(c),n.position.x=e,n.position.y=t,this.trees.push(n),this.scene.add(n)}createBush(e,t){const n=new bt,i=new it(1+Math.random()*.5,6,4),s=Math.random();let r,o;s<.33?(r=.55+Math.random()*.1,o=1):s<.66?(r=.7+Math.random()*.15,o=2):(r=.85+Math.random()*.15,o=5);const l=new Ae({color:new de().setHSL(r,.7,.4+Math.random()*.3)}),c=new oe(i,l);c.position.y=.5,n.add(c),n.position.x=e,n.position.y=t,n.userData={minerals:o},this.bushes.push(n),this.scene.add(n)}createVespeneGeyser(e,t){const n=new f0(new w(e,t,0));this.vespeneGeysers.push(n),this.scene.add(n.getModel())}createPlayerUnit(){const e=new Ps(new w(0,0,0),!0);this.playerUnit=new l0(e,"Larvae"),this.scene.add(this.playerUnit.getModel()),this.unitVisuals.trackUnit(e)}initListeners(){this.resizeHandler=this.onWindowResize.bind(this),window.addEventListener("resize",this.resizeHandler,!1),this.keydownHandler=e=>{const{key:t}=e;switch(t.toLowerCase()){case"w":case"arrowup":this.movement.up=!0;break;case"s":case"arrowdown":this.movement.down=!0;break;case"a":case"arrowleft":this.movement.left=!0;break;case"d":case"arrowright":this.movement.right=!0;break;case"e":const n=window.open("","Canvas Image"),{domElement:i}=this.renderer;this.renderer.render(this.scene,this.camera);const s=i.toDataURL();if(!n)return;n.document.write(`<img src='${s}' width='${i.width}' height='${i.height}'>`);break;case"j":this.messageSystem.isVisible()||E0(this.questManager,this.messageSystem);break;case"+":case"=":this.handleZoomChange(.1);break;case"-":this.handleZoomChange(-.1);break}},window.addEventListener("keydown",this.keydownHandler),this.keyupHandler=e=>{const{key:t}=e;switch(t.toLowerCase()){case"w":case"arrowup":this.movement.up=!1;break;case"s":case"arrowdown":this.movement.down=!1;break;case"a":case"arrowleft":this.movement.left=!1;break;case"d":case"arrowright":this.movement.right=!1;break}},window.addEventListener("keyup",this.keyupHandler)}onWindowResize(){this.camera.left=window.innerWidth/-2,this.camera.right=window.innerWidth/2,this.camera.top=window.innerHeight/2,this.camera.bottom=window.innerHeight/-2,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}checkCollision(e){for(const n of this.trees){const i=new w(n.position.x,n.position.y+2,n.position.z);if(Math.sqrt(Math.pow(e.x-i.x,2)+Math.pow(e.y-i.y,2))<2+.8)return!0}for(const n of this.bushes)if(Math.sqrt(Math.pow(e.x-n.position.x,2)+Math.pow(e.y-n.position.y,2))<2+.5)return!0;return!1}checkResourceHarvesting(){const e=this.playerUnit.getPosition(),t=2,n=this.playerUnit.getUnitType();for(const i of this.bushes){const s=i.userData.questGiverId;if(s&&(Math.sqrt(Math.pow(e.x-i.position.x,2)+Math.pow(e.y-i.position.y,2)),this.questInteraction.checkQuestGiverCollision(e,t,s,new w(i.position.x,i.position.y,0),5))){const o=this.questGiverManager.getQuestForEntity(s),l=this.questManager.getQuest(o);l&&!l.isActive&&!l.isCompleted&&(Gr(l,this.messageSystem,this.questManager),delete i.userData.questGiverId,this.questBushSprite&&(i.remove(this.questBushSprite),this.questBushSprite.material.map?.dispose(),this.questBushSprite.material.dispose(),this.questBushSprite=null))}}for(const i of this.trees){const s=i.userData.questGiverId;if(s&&(Math.sqrt(Math.pow(e.x-i.position.x,2)+Math.pow(e.y-i.position.y,2)),this.questInteraction.checkQuestGiverCollision(e,t,s,new w(i.position.x,i.position.y+4,0),6))){const o=this.questGiverManager.getQuestForEntity(s),l=this.questManager.getQuest(o);l&&!l.isActive&&!l.isCompleted&&(Gr(l,this.messageSystem,this.questManager),delete i.userData.questGiverId,this.questTreeSprite&&(i.remove(this.questTreeSprite),this.questTreeSprite.material.map?.dispose(),this.questTreeSprite.material.dispose(),this.questTreeSprite=null))}}for(const i of this.vespeneGeysers){const s=i.getModel().userData.questGiverId;if(s){const r=i.getPosition();if(Math.sqrt(Math.pow(e.x-r.x,2)+Math.pow(e.y-r.y,2)),this.questInteraction.checkQuestGiverCollision(e,t,s,r,8)){const l=this.questGiverManager.getQuestForEntity(s),c=this.questManager.getQuest(l);c&&!c.isActive&&!c.isCompleted&&(Gr(c,this.messageSystem,this.questManager),delete i.getModel().userData.questGiverId,this.questGeyserSprite&&(i.getModel().remove(this.questGeyserSprite),this.questGeyserSprite.material.map?.dispose(),this.questGeyserSprite.material.dispose(),this.questGeyserSprite=null))}}}if(this.combatRules.canEat(n,"Bush")){const i=n==="Larvae"?t+2.15:t+1.5;for(const s of this.bushes){if(s.userData.minerals<=0)continue;if(Math.sqrt(Math.pow(e.x-s.position.x,2)+Math.pow(e.y-s.position.y,2))<i){const o=s.userData.minerals;this.questInteraction.onResourceGathered("minerals",o);const l=this.playerUnit.getMinerals();this.playerUnit.setMinerals(l+o),this.audioManager.playEatSound(),s.userData.minerals=0;const c=s.children[0];c.material instanceof Ae&&c.material.color.setHex(8421504)}}}if(this.combatRules.canEat(n,"Tree"))for(const i of this.trees){if(i.userData.harvested)continue;if(Math.sqrt(Math.pow(e.x-i.position.x,2)+Math.pow(e.y-(i.position.y+2),2))<t+2.5){const r=this.combatRules.getReward(n,"Tree"),o=this.playerUnit.getMinerals();this.playerUnit.setMinerals(o+r),this.questInteraction.onResourceGathered("minerals",r),this.audioManager.playEatSound(),i.userData.harvested=!0,i.children.forEach(l=>{l instanceof oe&&l.material instanceof Ae&&l.material.color.setHex(8421504)})}}}updateCameraFollow(){const e=this.playerUnit.getPosition();this.camera.position.x=e.x,this.camera.position.y=e.y}updateMovement(e){const t=this.movement.speed*e,n=this.playerUnit.getPosition();let i=n.x,s=n.y,r=new Y(0,0);this.movement.up&&(s=Math.min(n.y+t,this.cameraBounds.maxY),r.y+=1),this.movement.down&&(s=Math.max(n.y-t,this.cameraBounds.minY),r.y-=1),this.movement.left&&(i=Math.max(n.x-t,this.cameraBounds.minX),r.x-=1),this.movement.right&&(i=Math.min(n.x+t,this.cameraBounds.maxX),r.x+=1);const o=new w(i,s,n.z);if(!this.checkCollision(o)&&(this.playerUnit.setPosition(o),this.updateCameraFollow(),r.length()>0)){const l=Math.atan2(r.y,r.x);this.playerUnit.setRotation(l)}}animate(){this.animationFrameId=requestAnimationFrame(()=>{this.animate()});const e=this.clock.getDelta();if(!this.enemyInteraction?.isGameOver()&&!this.hasWon){this.playerUnit.getIsMorphing()||(this.updateMovement(e),this.checkEnemyCollisions(),this.checkResourceHarvesting()),this.updateEnemies(e),this.combatManager.update(e),this.combatVisuals.update(e),this.unitVisuals.update(e),this.vespeneExtraction.update(e,this.playerUnit.getCurrentUnit(),this.vespeneGeysers);for(const o of this.vespeneGeysers)o.update(e);this.morphingEgg&&(this.morphingEgg.update(e),this.morphingEgg.isMorphComplete()&&this.completeMorphing(this.morphingEgg.getTargetUnitType())),this.minimap.updatePlayerUnitPosition(),this.minimap.updateEnemyPositions(this.enemies);const t=this.playerUnit.getResources(),n=this.playerUnit.getUpgrades(),i=this.playerUnit.getCurrentHP(),s=this.playerUnit.getMaxHP();this.controlPanel.updateResources(t.minerals,t.gas,t.essence,i,s);const r=this.playerUnit.getDamageAbsorb();this.spendingPanel.updateButtons(t.minerals,t.gas,t.essence,n,i,s,r),this.evolutionsPanel.updateMutations(this.playerUnit.getUnitType(),t.minerals,t.gas)}this.minimap.render(),this.stats&&this.stats.update(),this.renderer.render(this.scene,this.camera)}setupGameTitle(){this.gameTitle=new r0}setupControlPanel(){const e={onZoomChange:t=>this.handleZoomChange(t),onSpeedChange:t=>this.handleSpeedChange(t),onMorphUnit:t=>this.handleMorph(t)};this.controlPanel=new s0(e),this.controlPanel.setAvailableUnits(this.getAvailableUnits())}handleZoomChange(e){const t=this.camera.zoom,n=e>0?t*1.1:t/1.1;this.camera.zoom=Math.max(2,Math.min(20,n)),this.camera.updateProjectionMatrix();const s=32/this.camera.zoom;this.questBushSprite&&this.questBushSprite.scale.set(s,s,1),this.questTreeSprite&&this.questTreeSprite.scale.set(s,s,1),this.questGeyserSprite&&this.questGeyserSprite.scale.set(s,s,1)}handleSpeedChange(e){this.movement.speed=e}setupSpendingPanel(){const e={onUpgradeAttack:()=>this.handleUpgradeAttack(),onUpgradeArmor:()=>this.handleUpgradeArmor(),onSpendHealth:()=>this.handleHealthSpending(),onPurchaseAbsorb:()=>this.handlePurchaseAbsorb()};this.spendingPanel=new g0(e);const t=document.querySelector(".control-panel");t&&t.appendChild(this.spendingPanel.getContainer())}setupEvolutionsPanel(){const e={onSelectMutation:n=>this.handleMutationSelect(n)};this.evolutionsPanel=new Gs(e);const t=document.querySelector(".control-panel");t&&t.appendChild(this.evolutionsPanel.getContainer())}handleMutationSelect(e){console.log(`Selected mutation: ${e}`)}handleUpgradeAttack(){const e=this.playerUnit.getUpgrades(),t=e.getAttackUpgradeCost();this.playerUnit.getMinerals()>=t.minerals&&this.playerUnit.getGas()>=t.gas&&(this.playerUnit.setMinerals(this.playerUnit.getMinerals()-t.minerals),this.playerUnit.setGas(this.playerUnit.getGas()-t.gas),e.upgradeAttack(),this.unitVisuals.updateUpgradeIndicator(this.playerUnit.getCurrentUnit()),console.log(`Attack upgraded to level ${e.getAttackLevel()}`))}handleUpgradeArmor(){const e=this.playerUnit.getUpgrades(),t=e.getArmorUpgradeCost();this.playerUnit.getMinerals()>=t.minerals&&this.playerUnit.getGas()>=t.gas&&(this.playerUnit.setMinerals(this.playerUnit.getMinerals()-t.minerals),this.playerUnit.setGas(this.playerUnit.getGas()-t.gas),e.upgradeArmor(),this.unitVisuals.updateUpgradeIndicator(this.playerUnit.getCurrentUnit()),console.log(`Armor upgraded to level ${e.getArmorLevel()}`))}handleHealthSpending(){const e=this.playerUnit.getCurrentUnit(),t=e.getCurrentHP(),i=e.getHitPoints()-t;if(i<=0)return;const s=this.playerUnit.getMinerals();if(s>=1){const r=Math.min(i,s);this.playerUnit.setMinerals(s-r),e.takeDamage(-r),console.log(`Healed ${r} HP`)}}handlePurchaseAbsorb(){this.playerUnit.getEssence()>=1&&this.playerUnit.purchaseDamageAbsorb(1,10)&&console.log(`Purchased 10 damage absorb for 1 essence. Current absorb: ${this.playerUnit.getDamageAbsorb()}`)}setupEnemySystem(){const e={onGameOver:()=>this.handleGameOver()};this.enemyInteraction=new a0(e),this.spawnEnemies(),this.createGameOverUI(),this.winCondition!==null&&this.createVictoryUI()}isTooCloseToOtherEnemies(e,t){for(const n of this.enemies){const i=n.getPosition();if(Math.sqrt(Math.pow(e.x-i.x,2)+Math.pow(e.y-i.y,2))<t)return!0}return!1}spawnEnemies(){for(let r=0;r<4;r++){let o;do o=Ci.getRandomEdgePosition();while(this.isTooCloseToOtherEnemies(o,20));const l=new Ci(o,!1);l.setAttackUpgrade(Math.floor(Math.random()*4)),l.setArmorUpgrade(Math.floor(Math.random()*4)),this.enemies.push(l),this.scene.add(l.getModel()),this.unitVisuals.trackUnit(l)}for(let r=0;r<3;r++){let o;do o=Ai.getRandomEdgePosition();while(this.isTooCloseToOtherEnemies(o,20));const l=new Ai(o,!1);l.setAttackUpgrade(Math.floor(Math.random()*4)),l.setArmorUpgrade(Math.floor(Math.random()*4)),this.enemies.push(l),this.scene.add(l.getModel()),this.unitVisuals.trackUnit(l)}for(let r=0;r<18;r++){let o,l,c;do o=(Math.random()-.5)*900,l=(Math.random()-.5)*900,c=new w(o,l,0);while(Math.sqrt(o*o+l*l)<30||this.isTooCloseToOtherEnemies(c,20));const h=new Ps(c,!1);this.enemies.push(h),this.scene.add(h.getModel()),this.unitVisuals.trackUnit(h)}let t;do t=Ci.getRandomEdgePosition();while(this.isTooCloseToOtherEnemies(t,40));const n=new Ci(t,!1,{hitPoints:600,damage:26,armor:24},16766720,3);n.setAttackUpgrade(21),n.setArmorUpgrade(24),this.enemies.push(n),this.scene.add(n.getModel()),this.unitVisuals.trackUnit(n);let i;do i=Ai.getRandomEdgePosition();while(this.isTooCloseToOtherEnemies(i,40));const s=new Ai(i,!1,{hitPoints:150,damage:10,armor:6},14329120,2.5);s.setAttackUpgrade(5),s.setArmorUpgrade(6),this.enemies.push(s),this.scene.add(s.getModel()),this.unitVisuals.trackUnit(s)}updateEnemies(e){const t={minX:-500,maxX:500,minY:-500,maxY:500},n=this.playerUnit.getPosition();for(const i of this.enemies)"update"in i&&typeof i.update=="function"&&i.update(e,t,this.trees,this.bushes,n)}checkEnemyCollisions(){const e=this.playerUnit.getRadius(),t=this.playerUnit.getUnitType(),n=this.playerUnit.getCurrentUnit();if(this.combatManager.checkCombatInitiation(n,this.enemies,(s,r)=>this.combatRules.shouldFight(s,r)),n.getIsInCombat())return;const i=this.enemyInteraction.checkEatingEnemies(this.playerUnit.getPosition(),e,t,this.enemies,(s,r)=>{const o=this.playerUnit.getMinerals();this.playerUnit.setMinerals(o+r),this.audioManager.playBoneCrackSound()});if(i){this.questInteraction.onEnemyKilled(i.getUnitTypeName()),this.unitVisuals.untrackUnit(i),this.scene.remove(i.getModel()),i.dispose();const s=this.enemies.indexOf(i);s>-1&&this.enemies.splice(s,1);return}this.enemyInteraction.checkCollisions(this.playerUnit.getPosition(),e,t,this.enemies)}createGameOverUI(){this.gameOverUI=document.createElement("div"),this.gameOverUI.className="game-over-overlay",this.gameOverUI.style.display="none";const e=document.createElement("div");e.className="game-over-content";const t=document.createElement("h1");t.textContent="GAME OVER",t.className="game-over-title";const n=document.createElement("p");n.textContent="You have been EATEN!",n.className="game-over-message";const i=document.createElement("button");i.textContent="Restart Game",i.className="restart-button",i.addEventListener("click",()=>{window.location.reload()}),e.appendChild(t),e.appendChild(n),e.appendChild(i),this.gameOverUI.appendChild(e),document.body.appendChild(this.gameOverUI)}createVictoryUI(){this.victoryUI=document.createElement("div"),this.victoryUI.className="game-over-overlay",this.victoryUI.style.display="none";const e=document.createElement("div");e.className="game-over-content";const t=document.createElement("h1");t.textContent="VICTORY!",t.className="game-over-title",t.style.color="#00ff00";const n=document.createElement("p");n.textContent="Level 01 Complete! You defeated a miniboss!",n.className="game-over-message";const i=document.createElement("button");i.textContent="Continue to Next Level",i.className="restart-button",i.addEventListener("click",()=>{this.callbacks?.onWin&&this.callbacks.onWin()}),e.appendChild(t),e.appendChild(n),e.appendChild(i),this.victoryUI.appendChild(e),document.body.appendChild(this.victoryUI)}handleGameOver(){console.log("Game Over!"),document.body.style.backgroundColor="rgba(255, 0, 0, 0.3)",setTimeout(()=>{document.body.style.backgroundColor=""},200),this.messageSystem.show({type:"error",title:"GAME OVER",content:"You have been EATEN!",buttons:[{label:"Restart",onClick:()=>el(),style:"danger"}]})}restartGame(){el()}getUnitCost(e){return{Larvae:{minerals:0,gas:0},Drone:{minerals:50,gas:0},Zergling:{minerals:25,gas:0}}[e]||{minerals:0,gas:0}}handleMorph(e){if(this.enemyInteraction.isGameOver()||this.playerUnit.getIsMorphing())return;const t=this.getUnitCost(e),n=this.playerUnit.getMinerals(),i=this.playerUnit.getGas();if(n<t.minerals||i<t.gas){console.log("Not enough resources to morph");return}this.playerUnit.setMinerals(n-t.minerals),this.playerUnit.setGas(i-t.gas),this.startMorphing(e)}startMorphing(e){this.playerUnit.setMorphing(!0),this.oldUnitRadius=this.playerUnit.getRadius();const t=this.playerUnit.getPosition();this.unitVisuals.untrackUnit(this.playerUnit.getCurrentUnit()),this.scene.remove(this.playerUnit.getModel()),this.morphingEgg=new c0(t,e,3),this.scene.add(this.morphingEgg.getModel()),this.audioManager.playEggCrackSound()}completeMorphing(e){if(!this.morphingEgg)return;const t=this.morphingEgg.getPosition();this.scene.remove(this.morphingEgg.getModel()),this.morphingEgg.dispose();let n;switch(e){case"Larvae":n=new Ps(t,!0);break;case"Drone":n=new Ci(t,!0);break;case"Zergling":n=new Ai(t,!0);break;default:console.warn(`Unit type ${e} not yet implemented, defaulting to Larvae`),n=new Ps(t,!0)}this.playerUnit.morphInto(n,e),this.scene.add(this.playerUnit.getModel()),this.unitVisuals.trackUnit(n),this.minimap.updatePlayerUnitRef(this.playerUnit);const s=this.playerUnit.getRadius()-this.oldUnitRadius;if(s>0){const r=Math.ceil(s*3);for(let o=0;o<r;o++)this.handleZoomChange(-.1)}this.morphingEgg=null,this.evolutionsPanel.updateMutations(e,this.playerUnit.getMinerals(),this.playerUnit.getGas())}updateWinProgress(e){if(this.winCondition===null)return;const t=!this.isWinConditionMet();super.updateWinProgress(e),t&&this.isWinConditionMet()&&!this.hasWon&&(this.hasWon=!0,this.handleVictory())}handleVictory(){console.log("Victory! Level 01 Complete!"),document.body.style.backgroundColor="rgba(0, 255, 0, 0.3)",setTimeout(()=>{document.body.style.backgroundColor=""},200),this.messageSystem.show({type:"success",title:"VICTORY!",content:"Level Complete!",buttons:[{label:"Continue",onClick:()=>{this.callbacks?.onWin&&this.callbacks.onWin()},style:"primary"}]})}cleanup(){console.log("Cleaning up Level 01..."),this.animationFrameId!==null&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=null),this.resizeHandler&&window.removeEventListener("resize",this.resizeHandler),this.keydownHandler&&window.removeEventListener("keydown",this.keydownHandler),this.keyupHandler&&window.removeEventListener("keyup",this.keyupHandler),this.playerUnit&&this.playerUnit.getCurrentUnit().dispose(),this.morphingEgg&&this.morphingEgg.dispose();for(const e of this.enemies)this.unitVisuals.untrackUnit(e),this.scene.remove(e.getModel()),e.dispose();this.enemies=[];for(const e of this.trees)e.children.forEach(t=>{t instanceof oe?(t.geometry.dispose(),Array.isArray(t.material)?t.material.forEach(n=>n.dispose()):t.material.dispose()):t instanceof nn&&(t.material.map&&t.material.map.dispose(),t.material.dispose())}),this.scene.remove(e);this.trees=[],this.questTreeSprite=null;for(const e of this.bushes)e.children.forEach(t=>{t instanceof oe?(t.geometry.dispose(),Array.isArray(t.material)?t.material.forEach(n=>n.dispose()):t.material.dispose()):t instanceof nn&&(t.material.map&&t.material.map.dispose(),t.material.dispose())}),this.scene.remove(e);this.bushes=[],this.questBushSprite=null;for(const e of this.vespeneGeysers){const t=e.getModel();t.children.forEach(n=>{n instanceof nn&&(n.material.map&&n.material.map.dispose(),n.material.dispose())}),this.scene.remove(t),e.dispose()}this.vespeneGeysers=[],this.questGeyserSprite=null,this.ground&&(this.ground.geometry.dispose(),Array.isArray(this.ground.material)?this.ground.material.forEach(e=>e.dispose()):this.ground.material.dispose(),this.scene.remove(this.ground)),this.minimap&&this.minimap.dispose(),this.gameTitle&&this.gameTitle.dispose(),this.controlPanel&&this.controlPanel.dispose(),this.spendingPanel&&this.spendingPanel.dispose(),this.stats&&this.stats.dom&&document.body.removeChild(this.stats.dom),this.audioManager&&this.audioManager.dispose(),this.combatManager&&this.combatManager.clearAll(),this.combatVisuals&&this.combatVisuals.dispose(),this.unitVisuals&&this.unitVisuals.dispose(),this.vespeneExtraction&&this.vespeneExtraction.clearAll(),this.gameOverUI&&this.gameOverUI.parentElement&&document.body.removeChild(this.gameOverUI),this.victoryUI&&this.victoryUI.parentElement&&document.body.removeChild(this.victoryUI),this.renderer&&this.renderer.domElement&&this.renderer.domElement.parentElement&&(document.body.removeChild(this.renderer.domElement),this.renderer.dispose()),this.scene&&this.scene.clear(),this.messageSystem&&this.messageSystem.dispose(),this.questManager&&this.questManager.dispose(),this.questGiverManager&&this.questGiverManager.dispose(),this.questInteraction&&this.questInteraction.dispose(),this.questTrackerHUD&&this.questTrackerHUD.dispose(),console.log("Level 01 cleanup complete")}}class P0{constructor(e,t){this.config=e,this.onDismiss=t,this.show()}overlayElement=null;keydownHandler=null;clickHandler=null;isDismissed=!1;show(){this.overlayElement=document.createElement("div"),this.overlayElement.className="story-screen-overlay",this.config.fadeInDuration&&(this.overlayElement.style.animationDuration=`${this.config.fadeInDuration}ms`);const e=document.createElement("div");e.className="story-screen-image",e.style.backgroundImage=`url(${this.config.imagePath})`;const t=document.createElement("div");t.className="story-screen-textbox",t.setAttribute("data-position",this.config.textBox.position),t.style.backgroundColor=this.config.textBox.backgroundColor,t.style.color=this.config.textBox.textColor,t.style.padding=this.config.textBox.padding,t.style.maxWidth=this.config.textBox.maxWidth,this.config.textBox.borderRadius&&(t.style.borderRadius=this.config.textBox.borderRadius),this.config.textBox.border&&(t.style.border=this.config.textBox.border);const n=document.createElement("div");n.className="story-screen-text",n.textContent=this.config.text;const i=document.createElement("div");i.className="story-screen-prompt",i.textContent="Press any key to continue...",t.appendChild(n),t.appendChild(i),e.appendChild(t),this.overlayElement.appendChild(e),this.keydownHandler=()=>this.handleDismiss(),this.clickHandler=()=>this.handleDismiss(),window.addEventListener("keydown",this.keydownHandler),this.overlayElement.addEventListener("click",this.clickHandler),document.body.appendChild(this.overlayElement),console.log("Story screen displayed:",this.config)}handleDismiss(){this.isDismissed||(this.isDismissed=!0,this.keydownHandler&&(window.removeEventListener("keydown",this.keydownHandler),this.keydownHandler=null),this.clickHandler&&this.overlayElement&&(this.overlayElement.removeEventListener("click",this.clickHandler),this.clickHandler=null),this.overlayElement&&this.overlayElement.parentElement&&(document.body.removeChild(this.overlayElement),this.overlayElement=null),console.log("Story screen dismissed"),this.onDismiss())}dispose(){this.handleDismiss()}}const D0=new Map([[1,{imagePath:"/resources/story/level01_zerus.jpg",text:`I am Zagara, the queen of the swarm. You are a special agent i created for "Problem Solving".

You have independent thinking and are exceptionally resourceful, and packed with the DNA of all the swarm's strains.

Your first task is in a little Moon where I feel the leader is in distress. Go find him and solve his problems, so the colony can grow.`,textBox:{position:"left",backgroundColor:"rgba(30, 30, 30, 0.85)",textColor:"#ffffff",padding:"40px",maxWidth:"800px",borderRadius:"12px",border:"2px solid rgba(255, 255, 255, 0.3)"},fadeInDuration:800}]]);function I0(a){return D0.get(a)}class U0{currentLevel=null;currentLevelNumber=1;constructor(){this.loadLevel(this.currentLevelNumber)}restartLevel(){console.log(`Restarting Level ${this.currentLevelNumber}...`),this.currentLevel&&(this.currentLevel.cleanup(),this.currentLevel=null),this.loadLevel(this.currentLevelNumber)}loadLevel(e){console.log(`Loading Level ${e}...`);const t=I0(e);t?(console.log(`Showing story screen for Level ${e}...`),new P0(t,()=>{this.initLevel(e)})):this.initLevel(e)}initLevel(e){const t={onWin:()=>this.handleLevelWin(),onLose:()=>this.handleLevelLose()};switch(e){case 1:this.currentLevel=new R0(t);break;default:console.error(`Level ${e} not implemented yet!`),this.showLevelNotImplemented(e);return}this.currentLevelNumber=e,console.log(`Level ${e} initialized successfully`)}handleLevelWin(){console.log(`Level ${this.currentLevelNumber} completed!`);const e=this.currentLevelNumber+1;setTimeout(()=>{this.currentLevel&&(this.currentLevel.cleanup(),this.currentLevel=null),this.loadLevel(e)},2e3)}handleLevelLose(){console.log(`Level ${this.currentLevelNumber} failed!`)}showLevelNotImplemented(e){const t=document.createElement("div");t.className="game-over-overlay",t.style.display="flex";const n=document.createElement("div");n.className="game-over-content";const i=document.createElement("h1");i.textContent="CONGRATULATIONS!",i.className="game-over-title",i.style.color="#00ff00";const s=document.createElement("p");s.textContent=`You've completed all available levels!
Level ${e} is coming soon...`,s.className="game-over-message",s.style.whiteSpace="pre-line";const r=document.createElement("button");r.textContent="Play Again from Level 1",r.className="restart-button",r.addEventListener("click",()=>{document.body.removeChild(t),this.loadLevel(1)}),n.appendChild(i),n.appendChild(s),n.appendChild(r),t.appendChild(n),document.body.appendChild(t)}}let ea=null;window.addEventListener("DOMContentLoaded",()=>{ea=new U0});function el(){ea?ea.restartLevel():console.error("GameManager not initialized yet!")}
